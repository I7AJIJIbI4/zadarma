#!/bin/bash
# fix_deployment_issues.sh - –í–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ –ø—ñ—Å–ª—è –¥–µ–ø–ª–æ—é

set -e

echo "üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–†–û–ë–õ–ï–ú –ü–Ü–°–õ–Ø –î–ï–ü–õ–û–Æ"
echo "=================================="

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
if [ ! -f "bot.py" ]; then
    log_error "–°–∫—Ä–∏–ø—Ç –º–∞—î –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó /home/gomoncli/zadarma"
    exit 1
fi

log_info "–ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: $(pwd)"

# 1. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ requirements.txt
log_info "1. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è requirements.txt..."
if grep -q "python-telegram-bot==13.15" requirements.txt 2>/dev/null; then
    sed -i 's/python-telegram-bot==13.15/python-telegram-bot==13.12/g' requirements.txt
    log_success "requirements.txt –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (13.15 -> 13.12)"
else
    log_info "requirements.txt –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é"
fi

# 2. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó python-telegram-bot
log_info "2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è python-telegram-bot..."
pip3 install --upgrade python-telegram-bot==13.12 || {
    log_warning "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ python-telegram-bot —á–µ—Ä–µ–∑ pip3, –ø—Ä–æ–±—É—î–º–æ pip"
    pip install --upgrade python-telegram-bot==13.12 || log_warning "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è python-telegram-bot –ø—Ä–æ–ø—É—â–µ–Ω–æ"
}

# 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è process_webhook.py —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
log_info "3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ process_webhook.py..."
if [ ! -f "process_webhook.py" ]; then
    log_warning "process_webhook.py –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ GitHub..."
    curl -sS https://raw.githubusercontent.com/I7AJIJIbI4/zadarma/main/process_webhook.py -o process_webhook.py || {
        log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ process_webhook.py"
        log_info "–°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –≤–µ—Ä—Å—ñ—é..."
        cat > process_webhook.py << 'EOF'
#!/usr/bin/env python3
import sys
import json
import logging

logging.basicConfig(filename='/home/gomoncli/zadarma/webhook_processor.log', level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    if len(sys.argv) < 2:
        logger.error("No webhook data provided")
        print("ERROR")
        return 1
    
    try:
        webhook_data = json.loads(sys.argv[1])
        duration = int(webhook_data.get('duration', 0))
        disposition = webhook_data.get('disposition', '')
        
        # Improved success logic
        if duration > 0 or disposition == 'ANSWERED':
            logger.info("Call successful: duration={}, disposition={}".format(duration, disposition))
            print("SUCCESS")
            return 0
        else:
            logger.info("Call failed: duration={}, disposition={}".format(duration, disposition))
            print("ERROR")
            return 1
            
    except Exception as e:
        logger.error("Error processing webhook: {}".format(e))
        print("ERROR")
        return 1

if __name__ == "__main__":
    exit(main())
EOF
    }
    chmod +x process_webhook.py
    log_success "process_webhook.py —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
else
    log_success "process_webhook.py –≤–∂–µ —ñ—Å–Ω—É—î"
fi

# 4. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤ –¥–ª—è –≤—Å—ñ—Ö Python —Ñ–∞–π–ª—ñ–≤
log_info "4. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É..."
chmod +x *.py 2>/dev/null || true
chmod +x *.sh 2>/dev/null || true
log_success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"

# 5. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è call_tracking
log_info "5. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö call_tracking..."
python3 -c "
import sqlite3
import os

db_path = 'call_tracking.db'
try:
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS calls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            call_id TEXT UNIQUE,
            caller_id TEXT,
            called_number TEXT,
            event TEXT,
            duration INTEGER,
            disposition TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_successful BOOLEAN,
            webhook_data TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS call_tracking (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            call_id TEXT UNIQUE,
            user_id INTEGER,
            chat_id INTEGER,
            action_type TEXT,
            target_number TEXT,
            start_time INTEGER,
            status TEXT DEFAULT 'initiated'
        )
    ''')
    
    conn.commit()
    conn.close()
    print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö call_tracking —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞')
    
except Exception as e:
    print('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {}'.format(e))
"

# 6. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –ª–æ–≥—ñ–∫–∏
log_info "6. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –ª–æ–≥—ñ–∫–∏..."

# –¢–µ—Å—Ç SUCCESS –ª–æ–≥—ñ–∫–∏
test_success='{"event":"NOTIFY_END","duration":"15","disposition":"answered","caller_id":"test"}'
result=$(python3 process_webhook.py "$test_success" 2>/dev/null || echo "ERROR")
if [ "$result" = "SUCCESS" ]; then
    log_success "SUCCESS –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
else
    log_warning "SUCCESS –ª–æ–≥—ñ–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: —Ä–µ–∑—É–ª—å—Ç–∞—Ç = '$result'"
fi

# –¢–µ—Å—Ç ERROR –ª–æ–≥—ñ–∫–∏
test_error='{"event":"NOTIFY_END","duration":"0","disposition":"no_answer","caller_id":"test"}'
result=$(python3 process_webhook.py "$test_error" 2>/dev/null || echo "ERROR")
if [ "$result" = "ERROR" ]; then
    log_success "ERROR –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
else
    log_warning "ERROR –ª–æ–≥—ñ–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: —Ä–µ–∑—É–ª—å—Ç–∞—Ç = '$result'"
fi

# 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
log_info "7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞..."
if pgrep -f "python3.*bot.py" > /dev/null; then
    bot_pid=$(pgrep -f "python3.*bot.py")
    log_success "–ë–æ—Ç –ø—Ä–∞—Ü—é—î (PID: $bot_pid)"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ log—ñ–≤
    if [ -f "bot.log" ]; then
        recent_errors=$(tail -20 bot.log | grep -c "ERROR" 2>/dev/null || echo "0")
        if [ "$recent_errors" -eq 0 ]; then
            log_success "–ë–æ—Ç –ø—Ä–∞—Ü—é—î –±–µ–∑ –ø–æ–º–∏–ª–æ–∫"
        else
            log_warning "–ó–Ω–∞–π–¥–µ–Ω–æ $recent_errors –ø–æ–º–∏–ª–æ–∫ –≤ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ª–æ–≥–∞—Ö"
        fi
    fi
else
    log_warning "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π, —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏..."
    python3 bot.py & 
    sleep 2
    if pgrep -f "python3.*bot.py" > /dev/null; then
        log_success "–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ"
    else
        log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    fi
fi

# 8. –¢–µ—Å—Ç –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
log_info "8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤..."
python3 -c "
try:
    import sync_management
    print('‚úÖ sync_management –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è')
except ImportError as e:
    print('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ sync_management: {}'.format(e))
except Exception as e:
    print('‚ùå –ü–æ–º–∏–ª–∫–∞: {}'.format(e))

try:
    from user_db import force_full_sync, cleanup_duplicate_phones
    print('‚úÖ –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó user_db –¥–æ—Å—Ç—É–ø–Ω—ñ')
except ImportError as e:
    print('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ user_db: {}'.format(e))
"

# 9. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É —Å—Ç–∞—Ç—É—Å—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
log_info "9. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..."
cat > deployment_fixes_report.txt << EOF
–ó–í–Ü–¢ –ü–†–û –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–Ü–°–õ–Ø –î–ï–ü–õ–û–Æ
–î–∞—Ç–∞: $(date)
–°–µ—Ä–≤–µ—Ä: $(hostname)
–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: $(pwd)

‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ü–†–û–ë–õ–ï–ú–ò:
- requirements.txt: python-telegram-bot –≤–µ—Ä—Å—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ 13.12
- process_webhook.py: —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
- call_tracking.db: –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
- –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É: –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤

üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–ò:
- –ë–æ—Ç PID: $(pgrep -f "python3.*bot.py" 2>/dev/null || echo "–ù–ï –ó–ê–ü–£–©–ï–ù–ò–ô")
- Python –≤–µ—Ä—Å—ñ—è: $(python3 --version)
- Git –∫–æ–º—ñ—Ç: $(git rev-parse --short HEAD 2>/dev/null || echo "N/A")

üß™ –¢–ï–°–¢–ò:
- SUCCESS –ª–æ–≥—ñ–∫–∞: $(python3 process_webhook.py '{"duration":"15","disposition":"answered"}' 2>/dev/null || echo "FAILED")
- ERROR –ª–æ–≥—ñ–∫–∞: $(python3 process_webhook.py '{"duration":"0","disposition":"no_answer"}' 2>/dev/null || echo "FAILED")

üìÅ –§–ê–ô–õ–ò:
$(ls -la *.py | grep -E "(bot|sync|process|webhook)" || echo "–§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:
1. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏: /sync_status, /sync_test
2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—Ç—É /hvirtka —Ç–∞ /vorota
3. –ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f bot.log webhook_processor.log
EOF

log_success "–ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: deployment_fixes_report.txt"

echo ""
echo "üéâ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!"
echo "========================"
log_info "–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç: cat deployment_fixes_report.txt"
log_info "–õ–æ–≥–∏ –±–æ—Ç–∞: tail -f bot.log"
log_info "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–∏: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /sync_status –±–æ—Ç—É –≤ Telegram"
echo ""
log_warning "–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:"
echo "1. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –Ω–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏: /sync_status, /sync_test"
echo "2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—Ç—É /hvirtka —Ç–∞ /vorota"
echo "3. –ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø–µ—Ä—à—ñ –≥–æ–¥–∏–Ω–∏ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å"
