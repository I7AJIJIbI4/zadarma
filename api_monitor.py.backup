#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
api_monitor.py - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö API —Å–µ—Ä–≤—ñ—Å—ñ–≤
"""

import requests
import json
import logging
import time
from config import (
    ZADARMA_API_KEY, ZADARMA_API_SECRET,
    WLAUNCH_API_KEY, COMPANY_ID
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class APIMonitor:
    def __init__(self):
        self.results = {}
    
    def test_zadarma_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Zadarma API"""
        try:
            from zadarma_api import test_zadarma_auth
            if test_zadarma_auth():
                self.results['zadarma'] = {'status': 'OK', 'message': 'API –ø—Ä–∞—Ü—é—î'}
                return True
            else:
                self.results['zadarma'] = {'status': 'ERROR', 'message': '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó'}
                return False
        except Exception as e:
            self.results['zadarma'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_wlaunch_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WLaunch API"""
        try:
            url = "https://wlaunch.wlapi.net/api/v1/companies"
            headers = {
                'Authorization': f'Bearer {WLAUNCH_API_KEY}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'data' in data:
                    self.results['wlaunch'] = {'status': 'OK', 'message': f'API –ø—Ä–∞—Ü—é—î, –∫–æ–º–ø–∞–Ω—ñ–π: {len(data["data"])}'}
                    return True
            
            self.results['wlaunch'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['wlaunch'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_sms_fly_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è SMS Fly API"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î SMS Fly –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            try:
                from config import SMS_FLY_LOGIN, SMS_FLY_PASSWORD
            except ImportError:
                self.results['sms_fly'] = {'status': 'NOT_CONFIGURED', 'message': 'SMS Fly –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}
                return None
            
            url = "http://sms-fly.ua/api/api.php"
            params = {
                'login': SMS_FLY_LOGIN,
                'password': SMS_FLY_PASSWORD,
                'action': 'getbalance'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                result = response.text.strip()
                if result.replace('.', '').isdigit():
                    balance = float(result)
                    self.results['sms_fly'] = {'status': 'OK', 'message': f'–ë–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω'}
                    return True
                else:
                    self.results['sms_fly'] = {'status': 'ERROR', 'message': f'–í—ñ–¥–ø–æ–≤—ñ–¥—å: {result}'}
                    return False
            
            self.results['sms_fly'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['sms_fly'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_telegram_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram Bot API"""
        try:
            from config import TELEGRAM_TOKEN
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    bot_info = data['result']
                    self.results['telegram'] = {'status': 'OK', 'message': f'–ë–æ—Ç: {bot_info["first_name"]}'}
                    return True
            
            self.results['telegram'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['telegram'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤ API"""
        logger.info("üîç –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API...")
        
        tests = [
            ('Zadarma API', self.test_zadarma_api),
            ('WLaunch API', self.test_wlaunch_api),
            ('SMS Fly API', self.test_sms_fly_api),
            ('Telegram API', self.test_telegram_api)
        ]
        
        for name, test_func in tests:
            logger.info(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {name}...")
            try:
                test_func()
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {name}: {e}")
                self.results[name.lower().replace(' ', '_')] = {'status': 'ERROR', 'message': str(e)}
        
        return self.results
    
    def get_summary(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if not self.results:
            return "‚ùì –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å"
        
        ok_count = sum(1 for r in self.results.values() if r['status'] == 'OK')
        error_count = sum(1 for r in self.results.values() if r['status'] == 'ERROR')
        not_configured = sum(1 for r in self.results.values() if r['status'] == 'NOT_CONFIGURED')
        
        total = len(self.results)
        
        if error_count == 0:
            return f"‚úÖ –í—Å—ñ API –ø—Ä–∞—Ü—é—é—Ç—å ({ok_count}/{total})"
        elif error_count <= 1:
            return f"‚ö†Ô∏è –ù–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ API ({ok_count}/{total} –ø—Ä–∞—Ü—é—é—Ç—å)"
        else:
            return f"‚ùå –°–µ—Ä–π–æ–∑–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ API ({error_count}/{total} –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å)"
    
    def get_detailed_report(self):
        """–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–æ–∂–Ω–æ–º—É API"""
        if not self.results:
            return "–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
        
        report = []
        for api_name, result in self.results.items():
            status_emoji = {
                'OK': '‚úÖ',
                'ERROR': '‚ùå', 
                'NOT_CONFIGURED': '‚öôÔ∏è'
            }.get(result['status'], '‚ùì')
            
            report.append(f"{status_emoji} {api_name.upper()}: {result['message']}")
        
        return "\n".join(report)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è CLI –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    monitor = APIMonitor()
    results = monitor.run_all_tests()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø API:")
    print("=" * 40)
    print(monitor.get_detailed_report())
    print("=" * 40)
    print(monitor.get_summary())
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É
    error_count = sum(1 for r in results.values() if r['status'] == 'ERROR')
    return min(error_count, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 –¥–ª—è exit code

if __name__ == "__main__":
    exit(main())
