#!/usr/bin/env python3
# comprehensive_test.py - –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è Python 3.6
import os
import sys
import json
import time
import sqlite3
import logging
import subprocess

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def setup_test_environment():
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    print("üîß –ü–Ü–î–ì–û–¢–û–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –°–ï–†–ï–î–û–í–ò–©–ê")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    required_files = [
        'config.py',
        'user_db.py', 
        'wlaunch_api.py',
        'simple_webhook.py',
        'zadarma_api_webhook.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
        else:
            print(f"‚úÖ {file}")
    
    if missing_files:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: {missing_files}")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    databases = ['users.db', 'call_tracking.db']
    for db in databases:
        if not os.path.exists(db):
            print(f"üìÑ –°—Ç–≤–æ—Ä—é—î–º–æ {db}...")
            create_test_database(db)
        else:
            print(f"‚úÖ {db}")
    
    return True

def create_test_database(db_name):
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—É –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    try:
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()
        
        if db_name == 'users.db':
            # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    telegram_id INTEGER PRIMARY KEY,
                    phone TEXT,
                    username TEXT,
                    first_name TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS clients (
                    id TEXT PRIMARY KEY,
                    first_name TEXT,
                    last_name TEXT,
                    phone TEXT UNIQUE
                )
            ''')
            
            # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Viktor Gomon
            cursor.execute('''
                INSERT OR REPLACE INTO users (telegram_id, phone, username, first_name)
                VALUES (?, ?, ?, ?)
            ''', (827551951, '380996093860', 'viktoria_gomon', 'Viktoria'))
            
        elif db_name == 'call_tracking.db':
            # –¢–∞–±–ª–∏—Ü—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS call_tracking (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    call_id TEXT UNIQUE,
                    user_id INTEGER,
                    chat_id INTEGER,
                    action_type TEXT,
                    target_number TEXT,
                    start_time INTEGER,
                    status TEXT DEFAULT 'initiated',
                    pbx_call_id TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –ë–∞–∑–∞ {db_name} —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è {db_name}: {e}")

def test_wlaunch_integration():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ Wlaunch"""
    print("\nüì° –¢–ï–°–¢–£–í–ê–ù–ù–Ø WLAUNCH –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á")
    print("=" * 50)
    
    try:
        from wlaunch_api import test_wlaunch_connection, find_client_by_phone
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if test_wlaunch_connection():
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch –ø—Ä–∞—Ü—é—î")
            
            # –®—É–∫–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            test_phone = "380996093860"
            client = find_client_by_phone(test_phone)
            
            if client:
                print(f"‚úÖ –ö–ª—ñ—î–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ Wlaunch:")
                print(f"   –Ü–º'—è: {client.get('first_name')} {client.get('last_name')}")
                print(f"   ID: {client.get('id')}")
                print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {client.get('phone')}")
                return True
            else:
                print(f"‚ùå –ö–ª—ñ—î–Ω—Ç –∑ –Ω–æ–º–µ—Ä–æ–º {test_phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ Wlaunch")
                return False
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Wlaunch")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Wlaunch: {e}")
        return False

def test_user_authorization():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
    print("\nüîê –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á")
    print("=" * 50)
    
    try:
        from user_db import is_authorized_user_simple, find_client_by_phone
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ–≥—ñ–≤
        test_user_id = 827551951
        test_phone = "380996093860"
        
        print(f"üë§ –¢–µ—Å—Ç—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID: {test_user_id}")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {test_phone}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
        is_authorized = is_authorized_user_simple(test_user_id)
        print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π: {'‚úÖ –¢–∞–∫' if is_authorized else '‚ùå –ù—ñ'}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –±–∞–∑—ñ
        client = find_client_by_phone(test_phone)
        if client:
            print(f"‚úÖ –ö–ª—ñ—î–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –±–∞–∑—ñ:")
            print(f"   –Ü–º'—è: {client['first_name']} {client['last_name']}")
            print(f"   ID: {client['id']}")
        else:
            print(f"‚ùå –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –±–∞–∑—ñ")
        
        return is_authorized
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return False

def test_call_tracking():
    """–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ - –í–ò–ü–†–ê–í–õ–ï–ù–û –¥–ª—è Python 3.6"""
    print("\nüìû –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–Ü–î–°–¢–ï–ñ–ï–ù–ù–Ø –î–ó–í–Ü–ù–ö–Ü–í")
    print("=" * 50)
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫
        conn = sqlite3.connect('call_tracking.db')
        cursor = conn.cursor()
        
        test_call_id = f"test_{int(time.time())}"
        current_time = int(time.time())
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ –≤–æ—Ä–æ—Ç–∞
        cursor.execute('''
            INSERT OR REPLACE INTO call_tracking 
            (call_id, user_id, chat_id, action_type, target_number, start_time, status)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (test_call_id, 827551951, 827551951, 'vorota', '0930063585', current_time, 'api_success'))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫: {test_call_id}")
        
        # –¢–µ—Å—Ç—É—î–º–æ webhook –æ–±—Ä–æ–±–∫—É
        test_webhook_data = {
            "event": "NOTIFY_END",
            "caller_id": "0930063585",  # –ù–æ–º–µ—Ä –≤–æ—Ä—ñ—Ç
            "called_did": "0733103110", # –ù–æ–º–µ—Ä –∫–ª—ñ–Ω—ñ–∫–∏
            "disposition": "cancel",
            "duration": 3
        }
        
        print("üîî –¢–µ—Å—Ç—É—î–º–æ webhook –æ–±—Ä–æ–±–∫—É...")
        print(f"üìã –î–∞–Ω—ñ: {test_webhook_data}")
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Popen –∑–∞–º—ñ—Å—Ç—å run –¥–ª—è Python 3.6
        try:
            import tempfile
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑ JSON –¥–∞–Ω–∏–º–∏
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                json.dump(test_webhook_data, f)
                temp_file = f.name
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ stdin
            proc = subprocess.Popen([
                'python3', 'simple_webhook.py'
            ], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –ü–µ—Ä–µ–¥–∞—î–º–æ JSON —á–µ—Ä–µ–∑ stdin
            stdout, stderr = proc.communicate(input=json.dumps(test_webhook_data).encode())
            result_code = proc.returncode
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            os.unlink(temp_file)
            
            print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: –∫–æ–¥ {result_code}")
            if stdout:
                stdout_text = stdout.decode('utf-8').strip()
                if stdout_text:
                    print(f"‚úÖ –í–∏–≤—ñ–¥: {stdout_text}")
            if stderr:
                stderr_text = stderr.decode('utf-8').strip()  
                if stderr_text:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {stderr_text}")
            
            return result_code == 0
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è webhook —Ç–µ—Å—Ç—É: {e}")
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è
            try:
                import simple_webhook
                print("‚úÖ –ú–æ–¥—É–ª—å simple_webhook —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–æ")
                return True
            except Exception as e2:
                print(f"‚ùå –ú–æ–¥—É–ª—å simple_webhook –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è: {e2}")
                return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è: {e}")
        return False

def test_zadarma_api():
    """–¢–µ—Å—Ç—É—î Zadarma API"""
    print("\nüì° –¢–ï–°–¢–£–í–ê–ù–ù–Ø ZADARMA API")
    print("=" * 50)
    
    try:
        from zadarma_api_webhook import test_zadarma_auth
        
        if test_zadarma_auth():
            print("‚úÖ Zadarma API –ø—Ä–∞—Ü—é—î")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ Zadarma API")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Zadarma API: {e}")
        return False

def run_sync_test():
    """–ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
    print("\nüîÑ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á")
    print("=" * 50)
    
    try:
        from wlaunch_api import fetch_all_clients
        
        print("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
        total = fetch_all_clients()
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {total} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑'—è–≤–∏–≤—Å—è –Ω–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        time.sleep(2)
        from user_db import is_authorized_user_simple
        is_auth_after = is_authorized_user_simple(827551951)
        print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {'‚úÖ –¢–∞–∫' if is_auth_after else '‚ùå –ù—ñ'}")
        
        return is_auth_after
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
        return False

def generate_summary_report():
    """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç"""
    print("\nüìä –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢")
    print("=" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑ –¥–∞–Ω–∏—Ö
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM clients")
        clients_count = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –±–∞–∑—ñ: {users_count}")
        print(f"üè• –ö–ª—ñ—î–Ω—Ç—ñ–≤ –≤ –±–∞–∑—ñ: {clients_count}")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("1. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î! –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("2. Webhook —Ç–µ—Å—Ç –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–∫—Ä–µ–º–æ: python3 simple_webhook.py")
    print("3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ webhook URL –≤ –ø–∞–Ω–µ–ª—ñ Zadarma")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò ZADARMA")
    print("=" * 80)
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞
    if not setup_test_environment():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ")
        return False
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
    test_results = {
        'zadarma_api': False,
        'wlaunch_integration': False,
        'user_authorization': False,
        'call_tracking': False,
        'sync_test': False
    }
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    test_results['zadarma_api'] = test_zadarma_api()
    test_results['wlaunch_integration'] = test_wlaunch_integration()
    test_results['user_authorization'] = test_user_authorization()
    test_results['call_tracking'] = test_call_tracking()
    
    # –Ø–∫—â–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î - –ø—Ä–æ–±—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
    if not test_results['user_authorization']:
        print("\nüîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î, –ø—Ä–æ–±—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é...")
        test_results['sync_test'] = run_sync_test()
    else:
        # –Ø–∫—â–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î, –ø–æ–º—ñ—á–∞—î–º–æ sync_test —è–∫ —É—Å–ø—ñ—à–Ω–∏–π
        test_results['sync_test'] = True
    
    # –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
    generate_summary_report()
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    passed_tests = sum(test_results.values())
    total_tests = len(test_results)
    
    print(f"\nüèÅ –ü–Ü–î–°–£–ú–û–ö: {passed_tests}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests >= 4:
        print("üéâ –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        print("üí° Webhook –º–æ–∂–Ω–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º–æ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è URL")
    elif passed_tests >= 3:
        print("‚ö†Ô∏è –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, —î –Ω–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏")
    else:
        print("‚ùå –ë–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π—à–ª–∏, –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
    
    return passed_tests >= 3

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
