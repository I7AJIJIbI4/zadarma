#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
webhook_test.py - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å webhook –≤ Zadarma API
"""

import sys
import json
import logging
import requests
import hashlib
import base64

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/gomoncli/zadarma')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger('webhook_test')

def test_webhook_settings():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –≤ Zadarma"""
    try:
        from config import ZADARMA_USER_KEY, ZADARMA_SECRET_KEY
        
        # Zadarma API –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        method = 'GET'
        api_method = '/v1/info/price/'
        params = 'format=json'
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∏—Å
        sign = base64.b64encode(
            hashlib.md5(f"{method}{api_method}{params}{ZADARMA_SECRET_KEY}".encode()).digest()
        ).decode()
        
        headers = {
            'Authorization': f"{ZADARMA_USER_KEY}:{sign}",
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        url = f"https://api.zadarma.com{api_method}?{params}"
        logger.info(f"üåê –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Zadarma API...")
        
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            logger.info("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Zadarma API –ø—Ä–∞—Ü—é—î")
            return True
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {response.status_code}")
            logger.error(f"‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API: {e}")
        return False

def check_webhook_logs():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª–æ–≥–∏ webhook"""
    webhook_log_paths = [
        '/home/gomoncli/zadarma/telegram_webhook.log',
        '/home/gomoncli/zadarma/webhook_processor.log',
        '/home/gomoncli/zadarma/ivr_webhook.log'
    ]
    
    logger.info("üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏ webhook...")
    
    for log_path in webhook_log_paths:
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                recent_lines = lines[-10:] if len(lines) > 10 else lines
                
                logger.info(f"üìÅ {log_path} - –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:")
                for line in recent_lines:
                    logger.info(f"  {line.strip()}")
                    
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {log_path}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—É {log_path}: {e}")

def test_webhook_url():
    """–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å webhook URL"""
    webhook_urls = [
        'https://gomoncli.beget.tech/telegram_webhook.php',
        'http://gomoncli.beget.tech/telegram_webhook.php'
    ]
    
    logger.info("üåê –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å webhook URL...")
    
    for url in webhook_urls:
        try:
            logger.info(f"üîó –¢–µ—Å—Ç—É—î–º–æ: {url}")
            
            # –¢–µ—Å—Ç—É—î–º–æ GET –∑–∞–ø–∏—Ç
            response = requests.get(url, timeout=10)
            logger.info(f"  GET —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            # –¢–µ—Å—Ç—É—î–º–æ POST –∑–∞–ø–∏—Ç –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
            test_data = {
                'event': 'TEST',
                'caller_id': '380733103110',
                'pbx_call_id': 'test123'
            }
            
            response = requests.post(url, json=test_data, timeout=10)
            logger.info(f"  POST —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.info(f"  POST –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {url}: {e}")

def simulate_webhook_call():
    """–°–∏–º—É–ª—é—î webhook –≤–∏–∫–ª–∏–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üß™ –°–∏–º—É–ª—é—î–º–æ webhook –≤–∏–∫–ª–∏–∫...")
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —è–∫ –≤—ñ–¥ Zadarma
    test_webhook_data = {
        'event': 'NOTIFY_END',
        'caller_id': '380733103110',
        'destination': '0637442017',
        'pbx_call_id': 'test_' + str(int(time.time())),
        'disposition': 'cancel',
        'duration': '0',
        'call_start': str(int(time.time()))
    }
    
    logger.info(f"üì§ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ: {json.dumps(test_webhook_data, ensure_ascii=False)}")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏
        from process_webhook import main as process_webhook_main
        
        # –°–∏–º—É–ª—é—î–º–æ –≤–∏–∫–ª–∏–∫
        import sys
        original_argv = sys.argv.copy()
        
        sys.argv = ['process_webhook.py', json.dumps(test_webhook_data)]
        
        try:
            process_webhook_main()
            logger.info("‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è webhook —É—Å–ø—ñ—à–Ω–∞")
        finally:
            sys.argv = original_argv
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó webhook: {e}")

def check_zadarma_settings():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ Zadarma"""
    logger.info("üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Zadarma:")
    logger.info("")
    logger.info("1. –£–≤—ñ–π–¥—ñ—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç Zadarma")
    logger.info("2. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —Ä–æ–∑–¥—ñ–ª 'API' -> 'Webhook'")
    logger.info("3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ URL webhook:")
    logger.info("   https://gomoncli.beget.tech/telegram_webhook.php")
    logger.info("")
    logger.info("4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ –ø–æ–¥—ñ—ó:")
    logger.info("   ‚úÖ NOTIFY_START")
    logger.info("   ‚úÖ NOTIFY_END") 
    logger.info("   ‚úÖ NOTIFY_INTERNAL")
    logger.info("")
    logger.info("5. –Ø–∫—â–æ webhook –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π - –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ!")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üîç –ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ webhook...")
    logger.info("=" * 50)
    
    # 1. –¢–µ—Å—Ç—É—î–º–æ API –∑'—î–¥–Ω–∞–Ω–Ω—è
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∑'—î–¥–Ω–∞–Ω–Ω—è...")
    if test_webhook_settings():
        logger.info("‚úÖ API –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ API –∑'—î–¥–Ω–∞–Ω–Ω—è–º")
    
    logger.info("=" * 50)
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏
    logger.info("2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤...")
    check_webhook_logs()
    
    logger.info("=" * 50)
    
    # 3. –¢–µ—Å—Ç—É—î–º–æ webhook URL
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook URL...")
    test_webhook_url()
    
    logger.info("=" * 50)
    
    # 4. –°–∏–º—É–ª—é—î–º–æ webhook
    logger.info("4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü—ñ—è webhook...")
    simulate_webhook_call()
    
    logger.info("=" * 50)
    
    # 5. –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
    logger.info("5Ô∏è‚É£ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è...")
    check_zadarma_settings()
    
    logger.info("=" * 50)
    logger.info("üèÅ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    import time
    main()