# zadarma_api_webhook.py - –í–µ—Ä—Å—ñ—è –±–µ–∑ –ø–æ–ª–ª—ñ–Ω–≥—É, –ø—Ä–∞—Ü—é—î –∑ webhook-–∞–º–∏
import logging
import hashlib
import hmac
import base64
import requests
import json
import time
import sqlite3
import os
from urllib.parse import urlencode
from collections import OrderedDict
from datetime import datetime
from config import (
    ZADARMA_API_KEY,
    ZADARMA_API_SECRET,
    ZADARMA_MAIN_PHONE,
    ADMIN_USER_ID,
    TELEGRAM_TOKEN,
    format_phone_for_zadarma,
    validate_phone_number
)

logger = logging.getLogger(__name__)

class ZadarmaAPI:
    def __init__(self, key, secret, is_sandbox=False):
        self.key = key
        self.secret = secret
        self.is_sandbox = is_sandbox
        self.__url_api = 'https://api.zadarma.com'
        if is_sandbox:
            self.__url_api = 'https://api-sandbox.zadarma.com'

    def call(self, method, params={}, request_type='GET', format='json', is_auth=True):
        """
        Function for send API request - —Ç–æ—á–Ω–∞ –∫–æ–ø—ñ—è –∑ GitHub
        """
        logger.info(f"üì° Zadarma API call: {method}, params: {params}")
        
        request_type = request_type.upper()
        if request_type not in ['GET', 'POST', 'PUT', 'DELETE']:
            request_type = 'GET'
        
        params['format'] = format
        auth_str = None
        
        # –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ query string
        params_string = urlencode(OrderedDict(sorted(params.items())))
        logger.info(f"üîê Params string: {params_string}")

        if is_auth:
            auth_str = self.__get_auth_string_for_header(method, params_string)
            logger.info(f"üîê Auth header: {auth_str}")

        url = self.__url_api + method
        logger.info(f"üåê Request URL: {url}")

        try:
            if request_type == 'GET':
                if params_string:
                    url += '?' + params_string
                result = requests.get(url, headers={'Authorization': auth_str}, timeout=10)
            elif request_type == 'POST':
                result = requests.post(url, headers={'Authorization': auth_str}, data=params, timeout=10)
            elif request_type == 'PUT':
                result = requests.put(url, headers={'Authorization': auth_str}, data=params, timeout=10)
            elif request_type == 'DELETE':
                result = requests.delete(url, headers={'Authorization': auth_str}, data=params, timeout=10)

            logger.info(f"üì° Response status: {result.status_code}")
            logger.info(f"üì° Response: {result.text}")
            
            return result
            
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–æ Zadarma API")
            raise
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Zadarma API: {e}")
            raise

    def __get_auth_string_for_header(self, method, params_string):
        """
        –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ GitHub
        """
        # –ö—Ä–æ–∫ 1: —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
        data = method + params_string + hashlib.md5(params_string.encode('utf8')).hexdigest()
        logger.debug(f"üîê String to sign: {data}")
        
        # –ö—Ä–æ–∫ 2: HMAC SHA1
        hmac_h = hmac.new(self.secret.encode('utf8'), data.encode('utf8'), hashlib.sha1)
        
        # –ö—Ä–æ–∫ 3: –í–ê–ñ–õ–ò–í–û! –°–ø–æ—á–∞—Ç–∫—É hexdigest, –ø–æ—Ç—ñ–º base64
        hex_digest = hmac_h.hexdigest()
        logger.debug(f"üîê HMAC hex digest: {hex_digest}")
        
        bts = bytes(hex_digest, 'utf8')
        signature = base64.b64encode(bts).decode()
        logger.debug(f"üîê Final signature: {signature}")
        
        # –ö—Ä–æ–∫ 4: —Ñ–æ—Ä—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        auth = self.key + ':' + signature
        return auth

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä API
zadarma_api = ZadarmaAPI(ZADARMA_API_KEY, ZADARMA_API_SECRET)

class CallTracker:
    """–ö–ª–∞—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ —á–µ—Ä–µ–∑ SQLite –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    
    def __init__(self):
        self.db_path = "/home/gomoncli/zadarma/call_tracking.db"
        self.init_db()
        
    def init_db(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS call_tracking (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    call_id TEXT UNIQUE,
                    user_id INTEGER,
                    chat_id INTEGER,
                    action_type TEXT,
                    target_number TEXT,
                    start_time INTEGER,
                    status TEXT DEFAULT 'initiated',
                    pbx_call_id TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    
    def register_call(self, call_id, user_id, chat_id, action_type, target_number):
        """–†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO call_tracking 
                (call_id, user_id, chat_id, action_type, target_number, start_time, status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (call_id, user_id, chat_id, action_type, target_number, int(time.time()), 'initiated'))
            
            conn.commit()
            conn.close()
            
            logger.info(f"üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è: {call_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –¥–∑–≤—ñ–Ω–∫–∞: {e}")
    
    def update_call_status(self, call_id, status, pbx_call_id=None):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –¥–∑–≤—ñ–Ω–∫–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if pbx_call_id:
                cursor.execute('''
                    UPDATE call_tracking 
                    SET status = ?, pbx_call_id = ?
                    WHERE call_id = ?
                ''', (status, pbx_call_id, call_id))
            else:
                cursor.execute('''
                    UPDATE call_tracking 
                    SET status = ?
                    WHERE call_id = ?
                ''', (status, call_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"üìù –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –¥–∑–≤—ñ–Ω–∫–∞ {call_id}: {status}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–∑–≤—ñ–Ω–∫–∞: {e}")
    
    def get_call_by_pbx_id(self, pbx_call_id):
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∞ –ø–æ PBX call ID"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT call_id, user_id, chat_id, action_type, target_number, start_time, status
                FROM call_tracking 
                WHERE pbx_call_id = ?
                ORDER BY created_at DESC
                LIMIT 1
            ''', (pbx_call_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'call_id': result[0],
                    'user_id': result[1], 
                    'chat_id': result[2],
                    'action_type': result[3],
                    'target_number': result[4],
                    'start_time': result[5],
                    'status': result[6]
                }
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞ –ø–æ PBX ID: {e}")
            return None

    def get_call_by_target_and_time(self, target_number, start_time_window=60):
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ —á–∞—Å–æ–≤–æ–º—É –≤—ñ–∫–Ω—É"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            current_time = int(time.time())
            time_start = current_time - start_time_window
            
            query = "SELECT call_id, user_id, chat_id, action_type, target_number, start_time, status FROM call_tracking WHERE target_number = ? AND start_time > ? AND status = 'api_success' ORDER BY start_time DESC LIMIT 1"
            cursor.execute(query, (target_number, time_start))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'call_id': result[0],
                    'user_id': result[1], 
                    'chat_id': result[2],
                    'action_type': result[3],
                    'target_number': result[4],
                    'start_time': result[5],
                    'status': result[6]
                }
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —ñ —á–∞—Å—É: {e}")
            return None
    
    def cleanup_old_calls(self, hours=24):
        """–û—á–∏—â—É—î —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –¥–∑–≤—ñ–Ω–∫—ñ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cutoff_time = int(time.time()) - (hours * 3600)
            
            cursor.execute('''
                DELETE FROM call_tracking 
                WHERE start_time < ?
            ''', (cutoff_time,))
            
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            if deleted_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–∑–≤—ñ–Ω–∫—ñ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä
call_tracker = CallTracker()

def send_telegram_message(chat_id, message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –∑ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id, 
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logger.info(f"üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–æ–¥ {response.status_code})")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def send_error_to_admin(message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—É"""
    send_telegram_message(ADMIN_USER_ID, f"üîß ADMIN: {message}")

def make_zadarma_call_with_tracking(to_number: str, user_id: int, chat_id: int, action_type: str) -> dict:
    """
    –†–æ–±–∏—Ç—å callback –¥–∑–≤—ñ–Ω–æ–∫ —á–µ—Ä–µ–∑ API –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é –≤ –±–∞–∑—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ webhook
    
    Args:
        to_number: –Ω–æ–º–µ—Ä –¥–ª—è –¥–∑–≤—ñ–Ω–∫–∞
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        chat_id: ID —á–∞—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å  
        action_type: 'hvirtka' –∞–±–æ 'vorota'
        
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –ø–æ–ª—è–º–∏ success, call_id, message
    """
    logger.info(f"üìû –†–æ–±–∏–º–æ –¥–∑–≤—ñ–Ω–æ–∫ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –Ω–∞ –Ω–æ–º–µ—Ä: {to_number}")
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É
    if not validate_phone_number(to_number):
        error_msg = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É: {to_number}"
        logger.error(f"‚ùå {error_msg}")
        return {"success": False, "message": error_msg}
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    formatted_to = format_phone_for_zadarma(to_number)
    logger.info(f"üìû –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä TO: {formatted_to}")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä
    from_number = ZADARMA_MAIN_PHONE
    logger.info(f"üìû –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FROM –Ω–æ–º–µ—Ä: {from_number}")
    
    try:
        params = {
            "from": from_number,
            "to": formatted_to,
        }
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
        call_id = f"{user_id}_{int(time.time())}"
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–∑–≤—ñ–Ω–æ–∫ –≤ –±–∞–∑—ñ –î–û –∑–∞–ø–∏—Ç—É API
        call_tracker.register_call(call_id, user_id, chat_id, action_type, formatted_to)
        
        # –†–æ–±–∏–º–æ API –∑–∞–ø–∏—Ç
        response = zadarma_api.call('/v1/request/callback/', params, 'GET')
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        try:
            result = json.loads(response.text)
        except json.JSONDecodeError:
            error_msg = f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å API: {response.text}"
            logger.error(f"‚ùå {error_msg}")
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
            call_tracker.update_call_status(call_id, 'failed')
            return {"success": False, "message": error_msg}
        
        if result.get("status") == "success":
            logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç –¥–∑–≤—ñ–Ω–∫–∞ –∑ {from_number} –Ω–∞ {formatted_to}")
            logger.info(f"üìã –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")
            logger.info('üîç DEBUG: Before API time processing')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ time –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API (—è–∫—â–æ —î)
            api_time = result.get('time')
            if api_time:
                # –ú–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü–µ–π —á–∞—Å –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
                logger.info(f"üìÖ API —á–∞—Å: {api_time}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
            logger.info('üîç DEBUG: Before update_call_status')
            call_tracker.update_call_status(call_id, 'api_success')
            logger.info('üîç DEBUG: After update_call_status')
            
            return {
                "success": True, 
                "call_id": call_id,
                "message": "–î–∑–≤—ñ–Ω–æ–∫ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ, –æ—á—ñ–∫—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ webhook..."
            }
        else:
            error_msg = result.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
            logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API –¥–∑–≤—ñ–Ω–∫–∞: {error_msg}")
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
            call_tracker.update_call_status(call_id, 'api_failed')
            return {"success": False, "message": error_msg}
            
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É API: {str(e)}"
        logger.exception(f"‚ùå {error_msg}")
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ, —è–∫—â–æ call_id –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ
        try:
            call_tracker.update_call_status(call_id, 'exception')
        except:
            pass
        return {"success": False, "message": error_msg}

def process_webhook_call_status(webhook_data):
    """
    –û–±—Ä–æ–±–ª—è—î webhook –ø–æ–¥—ñ—ó –≤—ñ–¥ Zadarma –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –¥–∑–≤—ñ–Ω–∫—ñ–≤
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ webhook PHP —Å–∫—Ä–∏–ø—Ç–∞
    """
    try:
        event = webhook_data.get('event', '')
        pbx_call_id = webhook_data.get('pbx_call_id', '')
        disposition = webhook_data.get('disposition', '')
        duration = int(webhook_data.get('duration', 0))
        
        logger.info(f"üîî Webhook –ø–æ–¥—ñ—è: {event}, PBX ID: {pbx_call_id}, Disposition: {disposition}")
        
        if event == 'NOTIFY_END':
            # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –ø–æ PBX ID
            call_data = call_tracker.get_call_by_pbx_id(pbx_call_id)
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ —á–∞—Å—É
            if not call_data:
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ webhook –¥–∞–Ω–∏—Ö
                caller_id = webhook_data.get('caller_id', '')
                called_did = webhook_data.get('called_did', '')
                
                # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä–∏  
                target_number = None
                if '0637442017' in caller_id or '0637442017' in called_did:
                    target_number = '0637442017'
                elif '0930063585' in caller_id or '0930063585' in called_did:
                    target_number = '0930063585'
                
                if target_number:
                    call_data = call_tracker.get_call_by_target_and_time(target_number, 120)
                    if call_data:
                        logger.info(f"üìû –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∑–≤—ñ–Ω–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É {target_number}: {call_data['call_id']}")
            
            if call_data:
                logger.info(f"üìû –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫: {call_data['call_id']}")
                
                action_name = "—Ö–≤—ñ—Ä—Ç–∫—É" if call_data['action_type'] == 'hvirtka' else "–≤–æ—Ä–æ—Ç–∞"
                chat_id = call_data['chat_id']
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∑–≤—ñ–Ω–∫–∞
                if disposition == 'cancel' and duration == 0:
                    # ‚úÖ –£–°–ü–Ü–•: –î–∑–≤—ñ–Ω–æ–∫ —Å–∫–∏–Ω—É—Ç–æ –ø—ñ—Å–ª—è –≥—É–¥–∫—ñ–≤
                    message = f"‚úÖ {action_name.capitalize()} –±—É–¥–µ –≤—ñ–¥—á–∏–Ω–µ–Ω–æ –∑–∞ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥."
                    status = 'success'
                    logger.info(f"‚úÖ SUCCESS: {action_name} –≤—ñ–¥–∫—Ä–∏—Ç–æ —É—Å–ø—ñ—à–Ω–æ")
                    
                elif disposition == 'busy':
                    # ‚ùå –ó–ê–ô–ù–Ø–¢–û  
                    message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É."
                    status = 'busy'
                    logger.warning(f"‚ùå BUSY: {action_name} –∑–∞–π–Ω—è—Ç–æ")
                    
                elif disposition in ['cancel', 'no-answer'] and duration == 0:
                    # ‚ùå –ù–ï –í–Ü–î–ü–û–í–Ü–î–ê–Ñ
                    message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ú–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–≤'—è–∑–∫—É.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'no_answer'
                    logger.warning(f"‚ùå NO_ANSWER: {action_name} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
                    
                elif disposition == 'answered':
                    # ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –î–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è
                    message = f"‚ö†Ô∏è –î–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {action_name} –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ.\n–ú–æ–∂–ª–∏–≤–æ, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'answered'
                    logger.error(f"‚ö†Ô∏è ANSWERED: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ {action_name} –ø—Ä–∏–π–Ω—è—Ç–æ")
                    
                    # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É
                    send_error_to_admin(f"üö® –ü–†–û–ë–õ–ï–ú–ê: –î–∑–≤—ñ–Ω–æ–∫ –Ω–∞ {action_name} ({call_data['target_number']}) –±—É–ª–æ –ü–†–ò–ô–ù–Ø–¢–û –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
                    
                else:
                    # ‚ùå –Ü–ù–®–ê –ü–û–ú–ò–õ–ö–ê
                    message = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {action_name}. –ü—Ä–∏—á–∏–Ω–∞: {disposition}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'failed'
                    logger.warning(f"‚ùå FAILED: {action_name} - {disposition}")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                send_telegram_message(chat_id, message)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
                call_tracker.update_call_status(call_data['call_id'], status, pbx_call_id)
                
                logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {status}")
                
                return {"success": True, "status": status, "message": message}
            else:
                logger.info(f"‚ÑπÔ∏è –î–∑–≤—ñ–Ω–æ–∫ {pbx_call_id} –Ω–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è –Ω–∞—à–æ—é —Å–∏—Å—Ç–µ–º–æ—é")
                
        elif event == 'NOTIFY_START':
            # –î–ª—è –ø–æ—á–∞—Ç–∫—É –¥–∑–≤—ñ–Ω–∫–∞ –º–æ–∂–µ–º–æ –æ–Ω–æ–≤–∏—Ç–∏ PBX call ID —è–∫—â–æ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
            logger.info(f"üìû START: PBX ID {pbx_call_id}")
        
        return {"success": True, "message": "Webhook processed"}
        
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {e}")
        return {"success": False, "message": str(e)}

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º
def make_zadarma_call(to_number: str) -> bool:
    """
    –°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    –†–æ–±–∏—Ç—å –¥–∑–≤—ñ–Ω–æ–∫ –±–µ–∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
    """
    result = make_zadarma_call_with_tracking(to_number, 0, 0, "legacy")
    return result["success"]

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
def test_zadarma_auth():
    """–¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º API...")
    
    try:
        response = zadarma_api.call('/v1/info/balance/', {}, 'GET')
        result = json.loads(response.text)
        
        if result.get("status") == "success":
            balance = result.get("balance", "–Ω–µ–≤—ñ–¥–æ–º–æ")
            currency = result.get("currency", "")
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î. –ë–∞–ª–∞–Ω—Å: {balance} {currency}")
            return True
        else:
            logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î: {result}")
            return False
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return False

def get_call_statistics(hours=24):
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏"""
    try:
        end_time = time.time()
        start_time = end_time - (hours * 3600)
        
        params = {
            'start': int(start_time),
            'end': int(end_time)
        }
        
        response = zadarma_api.call('/v1/statistics/', params, 'GET')
        result = json.loads(response.text)
        
        if result.get("status") == "success":
            calls = result.get('calls', [])
            logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {len(calls)} –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–∞ {hours} –≥–æ–¥–∏–Ω")
            return calls
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result}")
            return []
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∑–≤—ñ–Ω–∫—ñ–≤: {e}")
        return []

def cleanup_old_calls():
    """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—É —ñ—Å—Ç–æ—Ä—ñ—é –¥–∑–≤—ñ–Ω–∫—ñ–≤"""
    call_tracker.cleanup_old_calls(24)  # –û—á–∏—â–∞—î–º–æ –¥–∑–≤—ñ–Ω–∫–∏ —Å—Ç–∞—Ä—à–µ 24 –≥–æ–¥–∏–Ω

# –ó–∞–ø—É—Å–∫ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
def start_cleanup_scheduler():
    """–ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è"""
    import threading
    
    def cleanup_loop():
        while True:
            time.sleep(6 * 3600)  # 6 –≥–æ–¥–∏–Ω
            cleanup_old_calls()
    
    thread = threading.Thread(target=cleanup_loop)
    thread.daemon = True
    thread.start()
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–∑–≤—ñ–Ω–∫—ñ–≤")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if __name__ != "__main__":
    start_cleanup_scheduler()