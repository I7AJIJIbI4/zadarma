# wlaunch_api.py - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
import requests
import logging
from config import WLAUNCH_API_KEY, COMPANY_ID
from user_db import add_or_update_client

logger = logging.getLogger("wlaunch_api")

# Wlaunch API –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
WLAUNCH_API_URL = "https://api.wlaunch.com/api/v2"
WLAUNCH_API_BEARER = f"Bearer {WLAUNCH_API_KEY}"

HEADERS = {
    "Authorization": WLAUNCH_API_BEARER,
    "Accept": "application/json"
}

def fetch_all_clients():
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ Wlaunch API"""
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ Wlaunch...")
    
    page = 0
    size = 100
    total_pages = 1
    total_clients = 0
    
    while page < total_pages:
        url = f"{WLAUNCH_API_URL}/company/{COMPANY_ID}/client"
        params = {
            "page": page,
            "size": size,
            "sort": "created,desc"
        }
        
        try:
            logger.info(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É {page + 1}...")
            response = requests.get(url, headers=HEADERS, params=params, timeout=15)
            response.raise_for_status()
            data = response.json()
            
            total_pages = data.get("page", {}).get("total_pages", 1)
            clients = data.get("content", [])
            
            logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(clients)} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page + 1}")
            
            for client in clients:
                try:
                    client_id = client.get("id")
                    first_name = client.get("first_name") or ""
                    last_name = client.get("last_name") or ""
                    phone = client.get("phone") or ""
                    
                    if client_id and phone:
                        add_or_update_client(
                            client_id=client_id,
                            first_name=first_name,
                            last_name=last_name,
                            phone=phone
                        )
                        total_clients += 1
                        
                        if total_clients % 50 == 0:
                            logger.info(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {total_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –±–µ–∑ ID –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {client}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ {client.get('id', 'Unknown')}: {e}")
                    
            page += 1
            
        except requests.exceptions.Timeout:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ {page + 1}")
            break
        except requests.exceptions.RequestException as e:
            logger.error(f"üåê –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page + 1}: {e}")
            break
        except Exception as e:
            logger.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page + 1}: {e}")
            break
            
    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–æ–±–ª–µ–Ω–æ {total_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
    return total_clients

def test_wlaunch_connection():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch API"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch API...")
        
        url = f"{WLAUNCH_API_URL}/company/{COMPANY_ID}/client"
        params = {"page": 0, "size": 1}
        
        response = requests.get(url, headers=HEADERS, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        total_elements = data.get("page", {}).get("total_elements", 0)
        
        logger.info(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch –ø—Ä–∞—Ü—é—î. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_elements}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch API: {e}")
        return False

def find_client_by_phone(phone):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    try:
        logger.info(f"üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch –∑–∞ –Ω–æ–º–µ—Ä–æ–º: {phone}")
        
        url = f"{WLAUNCH_API_URL}/company/{COMPANY_ID}/client"
        params = {
            "page": 0,
            "size": 100,
            "search": phone
        }
        
        response = requests.get(url, headers=HEADERS, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        clients = data.get("content", [])
        
        for client in clients:
            client_phone = client.get("phone", "")
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            normalized_search = ''.join(filter(str.isdigit, phone))
            normalized_client = ''.join(filter(str.isdigit, client_phone))
            
            if normalized_search in normalized_client or normalized_client in normalized_search:
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch: {client.get('first_name')} {client.get('last_name')}")
                return client
        
        logger.info(f"‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º {phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Wlaunch")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch: {e}")
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –ø—Ä—è–º–æ–º—É –∑–∞–ø—É—Å–∫—É
    logging.basicConfig(level=logging.INFO)
    
    if test_wlaunch_connection():
        total = fetch_all_clients()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {total} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
    else:
        print("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API")
