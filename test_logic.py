#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –ª–æ–≥—ñ–∫–∏ webhook —Å–∏—Å—Ç–µ–º–∏
–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –±–µ–∑ –ø–æ—Ç—Ä–µ–±–∏ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
"""

import json

def analyze_call_result(disposition, duration, action_type):
    """
    –¢–æ—á–Ω–∞ –∫–æ–ø—ñ—è –ª–æ–≥—ñ–∫–∏ –∑ –Ω–∞—à–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –∫–æ–¥—É
    """
    action_name = action_type.lower()
    if action_name == 'hvirtka':
        device_name = '—Ö–≤—ñ—Ä—Ç–∫–∞'
    elif action_name == 'vorota':
        device_name = '–≤–æ—Ä–æ—Ç–∞'
    else:
        device_name = action_name
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ê –ö–†–ò–¢–ò–ß–ù–ê –õ–û–ì–Ü–ö–ê –£–°–ü–Ü–•–£
    if disposition == 'cancel' and duration > 0:
        return 'success', "‚úÖ {} –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!".format(device_name.capitalize())
    elif disposition == 'busy':
        return 'busy', "‚ùå –ù–æ–º–µ—Ä {} –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.".format(device_name)
    elif disposition in ['no-answer', 'noanswer', 'cancel'] and duration == 0:
        return 'no_answer', "‚ùå –ù–æ–º–µ—Ä {} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.".format(device_name)
    elif disposition == 'answered':
        return 'answered', "üìû –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ {} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∞–ª–µ —Å—Ç–∞—Ç—É—Å –Ω–µ–≤—ñ–¥–æ–º–∏–π.".format(device_name)
    else:
        return 'failed', "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {}. –°—Ç–∞—Ç—É—Å: {}".format(device_name, disposition)

def is_bot_callback(caller_id, called_did):
    """
    –í–∏–∑–Ω–∞—á–∞—î —á–∏ —Ü–µ bot callback —á–∏ IVR –¥–∑–≤—ñ–Ω–æ–∫
    """
    clinic_number = '0733103110'
    device_numbers = ['0637442017', '0930063585']
    
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä–∏
    import re
    caller_clean = re.sub(r'^(\+38|38|8)?0?', '0', caller_id)
    called_clean = re.sub(r'^(\+38|38|8)?0?', '0', called_did)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∑–≤—ñ–Ω–æ–∫ –π–¥–µ –ó –∫–ª—ñ–Ω—ñ–∫–∏ –ù–ê –ø—Ä–∏—Å—Ç—Ä—ñ–π
    from_clinic = (caller_clean == clinic_number)
    to_device = called_clean in device_numbers
    
    return from_clinic and to_device

def determine_action_type(called_did):
    """
    –í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –¥—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞
    """
    if '637442017' in called_did:
        return 'hvirtka', '0637442017'
    elif '930063585' in called_did:
        return 'vorota', '0930063585'
    else:
        return None, None

def run_tests():
    print("üß™ === –õ–û–ö–ê–õ–¨–ù–ò–ô –¢–ï–°–¢ –õ–û–ì–Ü–ö–ò WEBHOOK –°–ò–°–¢–ï–ú–ò ===")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
    test_scenarios = [
        # Bot Callback —Ç–µ—Å—Ç–∏ - –º–∞—é—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        {
            "name": "‚úÖ –•–≤—ñ—Ä—Ç–∫–∞ - –£—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è",
            "caller_id": "0733103110",
            "called_did": "0637442017", 
            "disposition": "cancel",
            "duration": 5,
            "expected_routing": "BOT",
            "expected_status": "success",
            "expected_message": "‚úÖ –•–≤—ñ—Ä—Ç–∫–∞ –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!"
        },
        {
            "name": "‚úÖ –í–æ—Ä–æ—Ç–∞ - –£—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è",
            "caller_id": "0733103110",
            "called_did": "0930063585",
            "disposition": "cancel", 
            "duration": 7,
            "expected_routing": "BOT",
            "expected_status": "success",
            "expected_message": "‚úÖ –í–æ—Ä–æ—Ç–∞ –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!"
        },
        {
            "name": "‚ùå –•–≤—ñ—Ä—Ç–∫–∞ - –ó–∞–π–Ω—è—Ç–æ",
            "caller_id": "0733103110",
            "called_did": "0637442017",
            "disposition": "busy",
            "duration": 0,
            "expected_routing": "BOT", 
            "expected_status": "busy",
            "expected_message": "‚ùå –ù–æ–º–µ—Ä —Ö–≤—ñ—Ä—Ç–∫–∞ –∑–∞–π–Ω—è—Ç–∏–π"
        },
        {
            "name": "‚ùå –í–æ—Ä–æ—Ç–∞ - –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î (cancel+0)",
            "caller_id": "0733103110",
            "called_did": "0930063585",
            "disposition": "cancel",
            "duration": 0,
            "expected_routing": "BOT",
            "expected_status": "no_answer", 
            "expected_message": "‚ùå –ù–æ–º–µ—Ä –≤–æ—Ä–æ—Ç–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        },
        {
            "name": "‚ùå –í–æ—Ä–æ—Ç–∞ - –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î (no-answer)",
            "caller_id": "0733103110",
            "called_did": "0930063585", 
            "disposition": "no-answer",
            "duration": 0,
            "expected_routing": "BOT",
            "expected_status": "no_answer",
            "expected_message": "‚ùå –ù–æ–º–µ—Ä –≤–æ—Ä–æ—Ç–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        },
        {
            "name": "‚ùå –•–≤—ñ—Ä—Ç–∫–∞ - –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞",
            "caller_id": "0733103110",
            "called_did": "0637442017",
            "disposition": "failed",
            "duration": 2,
            "expected_routing": "BOT",
            "expected_status": "failed",
            "expected_message": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ö–≤—ñ—Ä—Ç–∫–∞"
        },
        # IVR —Ç–µ—Å—Ç–∏ - –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ Telegram
        {
            "name": "üîÑ IVR - –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ –∫–ª—ñ–Ω—ñ–∫—É",
            "caller_id": "0501234567",
            "called_did": "0733103110",
            "disposition": "hangup", 
            "duration": 30,
            "expected_routing": "IVR",
            "expected_status": None,
            "expected_message": None
        },
        {
            "name": "üîÑ IVR - –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ –ø—Ä–∏—Å—Ç—Ä—ñ–π",
            "caller_id": "0672345678", 
            "called_did": "0637442017",
            "disposition": "cancel",
            "duration": 5,
            "expected_routing": "IVR",
            "expected_status": None,
            "expected_message": None
        }
    ]
    
    total_tests = len(test_scenarios)
    passed_tests = 0
    failed_tests = 0
    
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"üìã –¢–µ—Å—Ç {i}: {scenario['name']}")
        print(f"   FROM: {scenario['caller_id']} ‚Üí TO: {scenario['called_did']}")
        print(f"   Disposition: {scenario['disposition']}, Duration: {scenario['duration']}")
        
        # 1. –¢–µ—Å—Ç—É—î–º–æ —Ä–æ—É—Ç–∏–Ω–≥
        is_bot = is_bot_callback(scenario['caller_id'], scenario['called_did'])
        actual_routing = "BOT" if is_bot else "IVR"
        
        routing_ok = actual_routing == scenario['expected_routing']
        print(f"   –†–æ—É—Ç–∏–Ω–≥: {actual_routing} ({'‚úÖ' if routing_ok else '‚ùå'})")
        
        if not routing_ok:
            print(f"   ‚ùå FAIL: –û—á—ñ–∫—É–≤–∞–≤—Å—è {scenario['expected_routing']}")
            failed_tests += 1
            print()
            continue
            
        # 2. –Ø–∫—â–æ Bot - —Ç–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if is_bot:
            action_type, target_number = determine_action_type(scenario['called_did'])
            
            if action_type:
                status, message = analyze_call_result(
                    scenario['disposition'],
                    scenario['duration'], 
                    action_type
                )
                
                status_ok = status == scenario['expected_status']
                message_ok = scenario['expected_message'] in message
                
                print(f"   –°—Ç–∞—Ç—É—Å: {status} ({'‚úÖ' if status_ok else '‚ùå'})")
                print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
                print(f"   –û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: {scenario['expected_message']}")
                print(f"   –ó–±—ñ–≥: {'‚úÖ' if message_ok else '‚ùå'}")
                
                if status_ok and message_ok:
                    print(f"   üéØ Telegram –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {message}")
                    passed_tests += 1
                else:
                    print(f"   ‚ùå FAIL: –õ–æ–≥—ñ–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞")
                    failed_tests += 1
            else:
                print(f"   ‚ùå FAIL: –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π")
                failed_tests += 1
        else:
            # IVR - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —è–∫ bot
            print(f"   üîÑ IVR –æ–±—Ä–æ–±–∫–∞ - Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ù–ï –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è")
            passed_tests += 1
            
        print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===")
    print(f"–í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤: {total_tests}")
    print(f"–ü—Ä–æ–π—à–ª–æ: {passed_tests}")
    print(f"–ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {failed_tests}")
    success_rate = (passed_tests * 100) // total_tests
    print(f"–í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ: {success_rate}%")
    
    if failed_tests == 0:
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò! –õ–æ–≥—ñ–∫–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("\n‚úÖ –ì–∞—Ä–∞–Ω—Ç—ñ—ó:")
        print("- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å '‚úÖ –í—ñ–¥—á–∏–Ω–µ–Ω–æ!' –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ")
        print("- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å '‚ùå –ó–∞–π–Ω—è—Ç–æ/–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î' –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö") 
        print("- IVR —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –Ω–µ –ø–æ–ª–∞–º–∞–≤—Å—è")
        print("- Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è bot callbacks")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {failed_tests} –ø—Ä–æ–±–ª–µ–º —É –ª–æ–≥—ñ—Ü—ñ!")
        return False

if __name__ == "__main__":
    success = run_tests()
    exit(0 if success else 1)
