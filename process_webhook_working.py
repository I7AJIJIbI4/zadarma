#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
process_webhook.py - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –æ–±—Ä–æ–±–Ω–∏–∫ webhook-—ñ–≤ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
–í–µ—Ä—Å—ñ—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø–æ—à—É–∫—É –¥–∑–≤—ñ–Ω–∫—ñ–≤
"""

import sys
import json
import logging
import os
import time

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/gomoncli/zadarma')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/gomoncli/zadarma/webhook_processor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('webhook_processor_fixed')

def normalize_phone_number(phone):
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
    if not phone:
        return ""
    
    normalized = ''.join(filter(str.isdigit, str(phone)))
    
    if normalized.startswith('380'):
        normalized = normalized[3:]
    elif normalized.startswith('38'):
        normalized = normalized[2:]
    elif normalized.startswith('0'):
        normalized = normalized[1:]
    
    return normalized

def find_tracked_call_enhanced(pbx_call_id, caller_id, call_tracker):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–æ—à—É–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫—ñ–ª—å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –ø–æ—à—É–∫—É
    """
    logger.info(f"üîç –ü–û–ö–†–ê–©–ï–ù–ò–ô –ø–æ—à—É–∫ –¥–∑–≤—ñ–Ω–∫–∞:")
    logger.info(f"   PBX ID: {pbx_call_id}")
    logger.info(f"   Caller ID: {caller_id}")
    
    current_time = time.time()
    
    # –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –ü–æ—à—É–∫ –ø–æ PBX ID
    if pbx_call_id:
        try:
            call_data = call_tracker.get_call_by_pbx_id(pbx_call_id)
            if call_data:
                logger.info(f"‚úÖ –ó–ù–ê–ô–î–ï–ù–û –ü–û PBX ID: {pbx_call_id}")
                return call_data
        except:
            pass
    
    # –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ê–Ω–∞–ª—ñ–∑ –Ω–æ–º–µ—Ä–∞ –∑ webhook –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –¥–∑–≤—ñ–Ω–∫–∞
    target_numbers = []
    action_type = None
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –¥–∑–≤—ñ–Ω–∫–∞ –ø–æ caller_id
    if '637442017' in caller_id:
        target_numbers = ['0637442017', '637442017', '380637442017']
        action_type = 'hvirtka'
        logger.info("üö™ –¢–∏–ø: –•–≤—ñ—Ä—Ç–∫–∞")
    elif '930063585' in caller_id:
        target_numbers = ['0930063585', '930063585', '380930063585']
        action_type = 'vorota'
        logger.info("üè† –¢–∏–ø: –í–æ—Ä–æ—Ç–∞")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–æ–º–µ—Ä: {caller_id}")
        return None
    
    # –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –ü–æ—à—É–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–∞ —á–∞—Å—É –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    for target_number in target_numbers:
        for time_window in [30, 60, 120, 300, 600]:  # –≤—ñ–¥ 30 —Å–µ–∫—É–Ω–¥ –¥–æ 10 —Ö–≤–∏–ª–∏–Ω
            try:
                if hasattr(call_tracker, 'get_call_by_target_and_time'):
                    call_data = call_tracker.get_call_by_target_and_time(target_number, time_window)
                else:
                    # Fallback –º–µ—Ç–æ–¥
                    call_data = call_tracker.get_call_by_target(target_number, time_window)
                
                if call_data:
                    time_diff = current_time - call_data.get('timestamp', 0)
                    logger.info(f"‚úÖ –ó–ù–ê–ô–î–ï–ù–û –ü–û –ù–û–ú–ï–†–£: {target_number} (—á–∞—Å: {time_diff:.1f}—Å)")
                    return call_data
            except Exception as e:
                logger.debug(f"   –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–æ {target_number}: {e}")
                continue
    
    # –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –ü–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É
    try:
        if hasattr(call_tracker, 'get_recent_calls'):
            recent_calls = call_tracker.get_recent_calls(600)
        else:
            # Fallback
            recent_calls = []
        
        for call in recent_calls:
            if call.get('action_type') == action_type:
                time_diff = current_time - call.get('timestamp', 0)
                if time_diff < 600:  # 10 —Ö–≤–∏–ª–∏–Ω
                    logger.info(f"‚úÖ –ó–ù–ê–ô–î–ï–ù–û –ü–û –¢–ò–ü–£: {call['call_id']} (—á–∞—Å: {time_diff:.1f}—Å)")
                    return call
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –Ω–µ—â–æ–¥–∞–≤–Ω—ñ—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤: {e}")
    
    logger.warning(f"‚ùå –î–∑–≤—ñ–Ω–æ–∫ –ù–ï –ó–ù–ê–ô–î–ï–ù–û –∂–æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
    return None

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ webhook"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ JSON –¥–∞–Ω–Ω—ñ
        if len(sys.argv) < 2:
            logger.error("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ JSON –¥–∞–Ω–Ω—ñ")
            print(json.dumps({"success": False, "message": "No JSON data provided"}))
            sys.exit(1)
        
        json_data = sys.argv[1]
        logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω–Ω—ñ: {json_data}")
        
        # –ü–∞—Ä—Å–∏–º–æ JSON
        try:
            webhook_data = json.loads(json_data)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            print(json.dumps({"success": False, "message": f"JSON parse error: {e}"}))
            sys.exit(1)
        
        event = webhook_data.get('event', '')
        pbx_call_id = webhook_data.get('pbx_call_id', '')
        caller_id = webhook_data.get('caller_id', '').replace('+', '')
        destination = webhook_data.get('destination', '')
        called_did = webhook_data.get('called_did', '')
        disposition = webhook_data.get('disposition', '')
        duration = int(webhook_data.get('duration', 0))
        
        logger.info(f"üîî Webhook –ø–æ–¥—ñ—è: {event}")
        logger.info(f"   PBX ID: {pbx_call_id}")
        logger.info(f"   Caller: {caller_id}")
        logger.info(f"   Destination: {destination}")
        logger.info(f"   Called DID: {called_did}")
        logger.info(f"   Disposition: {disposition}")
        logger.info(f"   Duration: {duration}")
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏
        try:
            from zadarma_api_webhook import send_telegram_message, call_tracker
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ zadarma_api_webhook")
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É zadarma_api_webhook: {e}")
            try:
                from zadarma_api import send_telegram_message, call_tracker
                logger.info("‚úÖ Fallback: —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ zadarma_api")
            except ImportError:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—å –æ–±—Ä–æ–±–∫–∏")
                print(json.dumps({"success": False, "message": "Import error"}))
                sys.exit(1)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–¥—ñ—ó
        if event == 'NOTIFY_END':
            logger.info(f"üìû –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞")
            
            # –ü–û–ö–†–ê–©–ï–ù–ò–ô –ü–û–®–£–ö
            call_data = find_tracked_call_enhanced(pbx_call_id, caller_id, call_tracker)
            
            if call_data:
                logger.info(f"‚úÖ –ó–ù–ê–ô–î–ï–ù–û –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫: {call_data['call_id']}")
                
                action_name = "—Ö–≤—ñ—Ä—Ç–∫—É" if call_data['action_type'] == 'hvirtka' else "–≤–æ—Ä–æ—Ç–∞"
                chat_id = call_data['chat_id']
                
                # –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                message = ""
                status = ""
                
                if disposition == 'cancel' and duration > 0:
                    message = f"‚úÖ {action_name.capitalize()} –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!"
                    status = 'success'
                    logger.info(f"‚úÖ –£–°–ü–Ü–•: {action_name} –≤—ñ–¥–∫—Ä–∏—Ç–æ")
                elif disposition == 'busy':
                    message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É."
                    status = 'busy'
                    logger.warning(f"‚ùå –ó–ê–ô–ù–Ø–¢–û: {action_name}")
                elif disposition in ['no-answer', 'noanswer'] and duration == 0:
                    message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ú–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–≤'—è–∑–∫—É.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'no_answer'
                    logger.warning(f"‚ùå –ù–ï –í–Ü–î–ü–û–í–Ü–î–ê–Ñ: {action_name}")
                elif disposition == 'answered' and duration > 0:
                    message = f"‚ö†Ô∏è –î–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {action_name} –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ.\n–ú–æ–∂–ª–∏–≤–æ, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'answered'
                    logger.error(f"‚ö†Ô∏è –ü–†–ò–ô–ù–Ø–¢–û: {action_name} - –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞")
                    
                    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
                    try:
                        from config import ADMIN_USER_ID
                        admin_message = f"üö® –ü–†–û–ë–õ–ï–ú–ê: –î–∑–≤—ñ–Ω–æ–∫ –Ω–∞ {action_name} ({call_data['target_number']}) –ü–†–ò–ô–ù–Ø–¢–û –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è! –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}s"
                        send_telegram_message(ADMIN_USER_ID, admin_message)
                    except Exception as admin_error:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞: {admin_error}")
                else:
                    message = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {action_name}.\n–°—Ç–∞—Ç—É—Å: {disposition}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}s\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'failed'
                    logger.warning(f"‚ùå –ù–ï–í–î–ê–ß–ê: {action_name} - {disposition}")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                success = send_telegram_message(chat_id, message)
                
                if success:
                    logger.info(f"üì§ –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í–Ü–î–ü–†–ê–í–õ–ï–ù–û –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {status}")
                else:
                    logger.error(f"‚ùå –ù–ï –í–î–ê–õ–û–°–Ø –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
                try:
                    call_tracker.update_call_status(call_data['call_id'], status, pbx_call_id)
                    logger.info(f"üìù –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: {status}")
                except Exception as update_error:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {update_error}")
                
                result = {
                    "success": True, 
                    "status": status, 
                    "message": f"Notification sent to chat {chat_id}",
                    "call_id": call_data['call_id'],
                    "action": action_name
                }
                
            else:

            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î pending IVR –¥–∑–≤—ñ–Ω–∫–∏
            ivr_call = check_pending_ivr_calls(caller_id, disposition, duration)
            if ivr_call:
                logger.info(f"üìû –ó–Ω–∞–π–¥–µ–Ω–æ pending IVR –¥–∑–≤—ñ–Ω–æ–∫: {ivr_call["call_id"]}")
                message, status = process_ivr_webhook_result(ivr_call, disposition, duration)
                logger.info(f"üìã IVR —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {message}")
                print(json.dumps({"success": True, "message": message, "call_id": ivr_call["call_id"], "status": status}))
                return

                logger.warning(f"‚ÑπÔ∏è –î–∑–≤—ñ–Ω–æ–∫ {pbx_call_id} ({caller_id}) –ù–ï –í–Ü–î–°–¢–ï–ñ–£–Ñ–¢–¨–°–Ø")
                
                # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                logger.info("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:")
                logger.info(f"   –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π caller: {normalize_phone_number(caller_id)}")
                
                try:
                    if hasattr(call_tracker, 'get_recent_calls'):
                        recent_calls = call_tracker.get_recent_calls(300)
                        logger.info(f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤: {len(recent_calls)}")
                        for call in recent_calls:
                            age = time.time() - call.get('timestamp', 0)
                            logger.info(f"     - {call['call_id']}: {call['target_number']} ({age:.0f}—Å)")
                except Exception as diag_error:
                    logger.error(f"   –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_error}")
                
                result = {"success": True, "message": "Call not tracked by our system"}
                
        elif event == 'NOTIFY_START':
            logger.info(f"üìû START: PBX {pbx_call_id}, Caller: {caller_id}")
            result = {"success": True, "message": "Start event logged"}
            
        elif event == 'NOTIFY_INTERNAL':
            internal = webhook_data.get('internal', '')
            logger.info(f"üìû INTERNAL: {caller_id} -> {internal}")
            result = {"success": True, "message": "Internal call logged"}
            
        else:
            logger.info(f"‚ÑπÔ∏è –ü–æ–¥—ñ—è {event} —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è")
            result = {"success": True, "message": f"Event {event} ignored"}
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(json.dumps(result, ensure_ascii=False))
        sys.exit(0)
        
    except Exception as e:
        logger.exception(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        print(json.dumps({"success": False, "message": str(e)}, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()
import json
import os
import time

def check_pending_ivr_calls(caller_id, disposition, duration):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î pending IVR –¥–∑–≤—ñ–Ω–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    pending_file = '/tmp/pending_ivr_calls.json'
    
    if not os.path.exists(pending_file):
        return None
    
    try:
        with open(pending_file, 'r') as f:
            data = json.load(f)
    except:
        return None
    
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä
    normalized_caller = caller_id.replace('+', '').replace('380', '0')
    
    # –®—É–∫–∞—î–º–æ pending –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    for call in data:
        if (call['target_number'] == normalized_caller and 
            call['status'] == 'pending' and
            (time.time() - call['timestamp']) <= 120):  # 2 —Ö–≤–∏–ª–∏–Ω–∏
            
            return call
    
    return None

def update_ivr_call_status(call_id, status):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å IVR –¥–∑–≤—ñ–Ω–∫–∞"""
    pending_file = '/tmp/pending_ivr_calls.json'
    
    if not os.path.exists(pending_file):
        return False
    
    try:
        with open(pending_file, 'r') as f:
            data = json.load(f)
        
        for call in data:
            if call['call_id'] == call_id:
                call['status'] = status
                call['completed_at'] = int(time.time())
                break
        
        with open(pending_file, 'w') as f:
            json.dump(data, f, indent=2)
        
        return True
    except:
        return False

def process_ivr_webhook_result(call_data, disposition, duration):
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç IVR webhook —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É"""
    action_name = call_data['action_type']
    call_id = call_data['call_id']
    
    if disposition == 'cancel' and duration > 0:
        message = f"‚úÖ {action_name.capitalize()} –≤—ñ–¥–∫—Ä–∏—Ç–æ!"
        status = 'success'
        update_ivr_call_status(call_id, 'success')
    elif disposition == 'busy':
        message = f"‚ùå {action_name.capitalize()}: –Ω–æ–º–µ—Ä –∑–∞–π–Ω—è—Ç–∏–π"
        status = 'busy'
        update_ivr_call_status(call_id, 'busy')
    elif disposition in ['no-answer', 'noanswer'] and duration == 0:
        message = f"‚ùå {action_name.capitalize()}: –Ω–æ–º–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î"
        status = 'no_answer' 
        update_ivr_call_status(call_id, 'no_answer')
    elif disposition == 'answered' and duration > 0:
        message = f"‚ö†Ô∏è {action_name.capitalize()}: –¥–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)"
        status = 'answered'
        update_ivr_call_status(call_id, 'answered')
    else:
        message = f"‚ùå {action_name.capitalize()}: –Ω–µ–≤–¥–∞—á–∞ ({disposition})"
        status = 'failed'
        update_ivr_call_status(call_id, 'failed')
    
    return message, status

# –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø 2025-08-06: –ó–º—ñ–Ω–µ–Ω–æ –ª–æ–≥—ñ–∫—É —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –¥–∑–≤—ñ–Ω–∫—ñ–≤
# –£—Å–ø—ñ—Ö —Ç–µ–ø–µ—Ä = duration > 0 (–±—É–ª–∏ –≥—É–¥–∫–∏) AND disposition = 'cancel' (—Å–∫–∏–Ω—É–ª–∏)
