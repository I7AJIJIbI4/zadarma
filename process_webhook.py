#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
process_webhook.py - Enhanced webhook processor with improved logic

–û–±—Ä–æ–±–ª—è—î webhook –∑–∞–ø–∏—Ç–∏ –≤—ñ–¥ Zadarma API –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –¥–∑–≤—ñ–Ω–∫—ñ–≤ —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º.
"""

import sys
import json
import logging
import sqlite3
from datetime import datetime
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_file = '/home/gomoncli/zadarma/webhook_processor.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
DB_PATH = '/home/gomoncli/zadarma/call_tracking.db'

def init_call_tracking_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS calls (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                call_id TEXT UNIQUE,
                caller_id TEXT,
                called_number TEXT,
                event TEXT,
                duration INTEGER,
                disposition TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_successful BOOLEAN,
                webhook_data TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö call_tracking —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {}".format(e))
        return False

def is_call_successful(webhook_data):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –¥–∑–≤—ñ–Ω–∫–∞
    
    –î–∑–≤—ñ–Ω–æ–∫ –≤–≤–∞–∂–∞—î—Ç—å—Å—è —É—Å–ø—ñ—à–Ω–∏–º —è–∫—â–æ:
    1. Duration > 0 (–±—É–ª–∞ —Ä–æ–∑–º–æ–≤–∞)
    2. Disposition = 'ANSWERED' 
    3. Event = 'NOTIFY_END' –∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
        duration = int(webhook_data.get('duration', 0))
        if duration > 0:
            logger.info("‚úÖ –î–∑–≤—ñ–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–∏–π: duration = {}".format(duration))
            return True
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
        disposition = webhook_data.get('disposition', '').upper()
        if disposition == 'ANSWERED':
            logger.info("‚úÖ –î–∑–≤—ñ–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–∏–π: disposition = ANSWERED")
            return True
        
        # –î–ª—è IVR –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        event = webhook_data.get('event', '')
        if event == 'NOTIFY_END':
            # –Ø–∫—â–æ —î –±—É–¥—å-—è–∫—ñ –æ–∑–Ω–∞–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó
            pbx_call_id = webhook_data.get('pbx_call_id')
            if pbx_call_id:
                logger.info("‚úÖ –î–∑–≤—ñ–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–∏–π: pbx_call_id –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
                return True
        
        # –î–∑–≤—ñ–Ω–æ–∫ –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π
        logger.info("‚ùå –î–∑–≤—ñ–Ω–æ–∫ –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π: duration={}, disposition={}".format(duration, disposition))
        return False
        
    except Exception as e:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –¥–∑–≤—ñ–Ω–∫–∞: {}".format(e))
        return False

def save_call_data(webhook_data):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        call_id = webhook_data.get('call_id', webhook_data.get('pbx_call_id', ''))
        caller_id = webhook_data.get('caller_id', '')
        called_number = webhook_data.get('called_did', webhook_data.get('internal', ''))
        event = webhook_data.get('event', '')
        duration = int(webhook_data.get('duration', 0))
        disposition = webhook_data.get('disposition', '')
        is_successful = is_call_successful(webhook_data)
        
        cursor.execute('''
            INSERT OR REPLACE INTO calls 
            (call_id, caller_id, called_number, event, duration, disposition, is_successful, webhook_data)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (call_id, caller_id, called_number, event, duration, disposition, is_successful, json.dumps(webhook_data)))
        
        conn.commit()
        conn.close()
        
        logger.info("üíæ –î–∞–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {} -> {} ({} —Å–µ–∫, —É—Å–ø—ñ—à–Ω–∏–π: {})".format(
            caller_id, called_number, duration, is_successful))
        return True
        
    except Exception as e:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞: {}".format(e))
        return False

def process_webhook_data(webhook_json):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ webhook –¥–∞–Ω–∏—Ö"""
    try:
        if not webhook_json:
            logger.error("‚ùå –ü–æ—Ä–æ–∂–Ω—ñ webhook –¥–∞–Ω—ñ")
            return False
            
        webhook_data = json.loads(webhook_json) if isinstance(webhook_json, str) else webhook_json
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        event = webhook_data.get('event', 'UNKNOWN')
        caller = webhook_data.get('caller_id', 'N/A')
        called = webhook_data.get('called_did', webhook_data.get('internal', 'N/A'))
        
        logger.info("üìû Webhook –æ–±—Ä–æ–±–∫–∞: event={}, caller={}, called={}".format(event, caller, called))
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if not os.path.exists(DB_PATH):
            init_call_tracking_db()
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        save_call_data(webhook_data)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –ø–æ–¥—ñ–π
        if event == 'NOTIFY_START':
            logger.info("üü¢ –î–∑–≤—ñ–Ω–æ–∫ –ø–æ—á–∞–≤—Å—è: {} -> {}".format(caller, called))
        elif event == 'NOTIFY_END':
            duration = webhook_data.get('duration', 0)
            success = is_call_successful(webhook_data)
            status = "—É—Å–ø—ñ—à–Ω–∏–π" if success else "–Ω–µ—É—Å–ø—ñ—à–Ω–∏–π"
            logger.info("üî¥ –î–∑–≤—ñ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {} —Å–µ–∫, {}".format(duration, status))
        
        return True
        
    except json.JSONDecodeError as e:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {}".format(e))
        return False
    except Exception as e:
        logger.error("‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {}".format(e))
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∑ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
    if len(sys.argv) < 2:
        logger.error("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python3 process_webhook.py '<json_data>'")
        sys.exit(1)
    
    webhook_json = sys.argv[1]
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ process_webhook.py")
    logger.info("üì® –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ: {}".format(webhook_json[:200] + "..." if len(webhook_json) > 200 else webhook_json))
    
    success = process_webhook_data(webhook_json)
    
    if success:
        logger.info("‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
        print("SUCCESS")
    else:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook")
        print("ERROR")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())
