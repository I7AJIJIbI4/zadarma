#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
process_webhook.py - –û–±—Ä–æ–±–Ω–∏–∫ webhook-—ñ–≤ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º
–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ PHP webhook-–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–¥—ñ–π Zadarma
"""

import sys
import json
import logging
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/gomoncli/zadarma')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/gomoncli/zadarma/webhook_processor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('webhook_processor')

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ webhook"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ JSON –¥–∞–Ω–Ω—ñ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        if len(sys.argv) < 2:
            logger.error("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ JSON –¥–∞–Ω–Ω—ñ")
            sys.exit(1)
        
        json_data = sys.argv[1]
        logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω–Ω—ñ: {json_data}")
        
        # –ü–∞—Ä—Å–∏–º–æ JSON
        try:
            webhook_data = json.loads(json_data)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            sys.exit(1)
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à –º–æ–¥—É–ª—å webhook –æ–±—Ä–æ–±–∫–∏
        try:
            from zadarma_api_webhook import process_webhook_call_status
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É zadarma_api_webhook: {e}")
            # Fallback - –ø—Ä–æ–±—É—î–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ –º–æ–¥—É–ª—è
            try:
                from zadarma_api import process_webhook_call_status
            except ImportError:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ process_webhook_call_status")
                sys.exit(1)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ webhook
        result = process_webhook_call_status(webhook_data)
        
        if result['success']:
            logger.info(f"‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {result.get('message', '')}")
            print(json.dumps(result))  # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è PHP
            sys.exit(0)
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {result.get('message', '')}")
            print(json.dumps(result))
            sys.exit(1)
        
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ process_webhook: {e}")
        error_result = {"success": False, "message": str(e)}
        print(json.dumps(error_result))
        sys.exit(1)

if __name__ == "__main__":
    main()
