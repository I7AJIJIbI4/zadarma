#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô process_webhook.py –¥–ª—è Python 3.6
# ‚úÖ –ö–†–ò–¢–ò–ß–ù–ê –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê: —É—Å–ø—ñ—Ö = duration > 0 + cancel  
# ‚úÖ –ë–µ–∑ f-strings –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Python 3.6
# ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

import sys
import json
import sqlite3
import time
import logging
import requests
import traceback
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/tmp/webhook_processor.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    try:
        with open('config.py', 'r', encoding='utf-8') as f:
            config_content = f.read()
        
        import re
        
        # –í–∏—Ç—è–≥—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        token_match = re.search(r'TELEGRAM_TOKEN\s*=\s*[\'"]([^\'"]+)[\'"]', config_content)
        hvirtka_match = re.search(r'HVIRTKA_NUMBER\s*=\s*[\'"]([^\'"]+)[\'"]', config_content)
        vorota_match = re.search(r'VOROTA_NUMBER\s*=\s*[\'"]([^\'"]+)[\'"]', config_content)
        
        config = {}
        if token_match:
            config['TELEGRAM_TOKEN'] = token_match.group(1)
        if hvirtka_match:
            config['HVIRTKA_NUMBER'] = hvirtka_match.group(1)
        if vorota_match:
            config['VOROTA_NUMBER'] = vorota_match.group(1)
            
        return config
        
    except Exception as e:
        logger.error("Failed to load config: {}".format(e))
        return {}

def send_telegram_message(chat_id, message, config):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""
    try:
        if 'TELEGRAM_TOKEN' not in config:
            logger.error("TELEGRAM_TOKEN not found in config")
            return False
            
        token = config['TELEGRAM_TOKEN']
        url = "https://api.telegram.org/bot{}/sendMessage".format(token)
        
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info("Message sent successfully to chat {}".format(chat_id))
            return True
        else:
            logger.error("Failed to send message: {} - {}".format(response.status_code, response.text))
            return False
            
    except Exception as e:
        logger.error("Telegram error: {}".format(e))
        return False

def find_pending_call(target_number, time_window=120):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –æ—á—ñ–∫—É—é—á–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
    try:
        conn = sqlite3.connect('call_tracking.db')
        cursor = conn.cursor()
        
        current_time = int(time.time())
        time_start = current_time - time_window
        
        # –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º api_success
        cursor.execute('''
            SELECT call_id, user_id, chat_id, action_type, target_number, start_time, status
            FROM call_tracking 
            WHERE target_number = ? AND start_time > ? AND status = 'api_success'
            ORDER BY start_time DESC LIMIT 1
        ''', (target_number, time_start))
        
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'call_id': result[0],
                'user_id': result[1], 
                'chat_id': result[2],
                'action_type': result[3],
                'target_number': result[4],
                'start_time': result[5],
                'status': result[6]
            }
        return None
        
    except Exception as e:
        logger.error("Database error: {}".format(e))
        return None

def update_call_status(call_id, status):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –¥–∑–≤—ñ–Ω–∫–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
    try:
        conn = sqlite3.connect('call_tracking.db')
        cursor = conn.cursor()
        
        cursor.execute(
            'UPDATE call_tracking SET status = ? WHERE call_id = ?',
            (status, call_id)
        )
        
        conn.commit()
        conn.close()
        
        logger.info("Call {} status updated to {}".format(call_id, status))
        return True
        
    except Exception as e:
        logger.error("Failed to update call status: {}".format(e))
        return False

def analyze_call_result(disposition, duration, action_type):
    """
    ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ê –ö–†–ò–¢–ò–ß–ù–ê –õ–û–ì–Ü–ö–ê –£–°–ü–Ü–•–£
    
    –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—é –¥–æ—Å—Ç—É–ø—É:
    - SUCCESS: –±—É–ª–∏ –≥—É–¥–∫–∏ (duration > 0) + —Å–∫–∏–Ω—É–ª–∏ (cancel) = –ø—Ä–∏—Å—Ç—Ä—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–≤ —ñ –≤—ñ–¥–∫—Ä–∏–≤—Å—è
    - BUSY: –∑–∞–π–Ω—è—Ç–æ 
    - NO_ANSWER: –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (duration = 0)
    """
    
    action_name = action_type.lower()
    if action_name == 'hvirtka':
        device_name = '—Ö–≤—ñ—Ä—Ç–∫–∞'
    elif action_name == 'vorota':
        device_name = '–≤–æ—Ä–æ—Ç–∞'
    else:
        device_name = action_name
    
    # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–ê –ó–ú–Ü–ù–ê: —É—Å–ø—ñ—Ö = duration > 0 (–±—É–ª–∏ –≥—É–¥–∫–∏) + cancel (—Å–∫–∏–Ω—É–ª–∏)
    if disposition == 'cancel' and duration > 0:
        return 'success', "‚úÖ {} –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!".format(device_name.capitalize())
        
    elif disposition == 'busy':
        return 'busy', "‚ùå –ù–æ–º–µ—Ä {} –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.".format(device_name)
        
    elif disposition in ['no-answer', 'noanswer', 'cancel'] and duration == 0:
        return 'no_answer', "‚ùå –ù–æ–º–µ—Ä {} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î.".format(device_name)
        
    elif disposition == 'answered':
        return 'answered', "üìû –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ {} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∞–ª–µ —Å—Ç–∞—Ç—É—Å –Ω–µ–≤—ñ–¥–æ–º–∏–π.".format(device_name)
        
    else:
        return 'failed', "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {}. –°—Ç–∞—Ç—É—Å: {}".format(device_name, disposition)

def determine_action_type(called_did, config):
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –¥—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è"""
    
    hvirtka_number = config.get('HVIRTKA_NUMBER', '0637442017')
    vorota_number = config.get('VOROTA_NUMBER', '0930063585')
    
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
    called_clean = called_did.replace('+38', '').replace('+', '').lstrip('0')
    hvirtka_clean = hvirtka_number.replace('+38', '').replace('+', '').lstrip('0')
    vorota_clean = vorota_number.replace('+38', '').replace('+', '').lstrip('0')
    
    if hvirtka_clean in called_clean or hvirtka_number in called_did:
        return 'hvirtka', hvirtka_number
    elif vorota_clean in called_clean or vorota_number in called_did:
        return 'vorota', vorota_number
    else:
        logger.warning("Unknown called_did: {}".format(called_did))
        return None, None

def process_webhook_data(webhook_data):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ webhook –¥–∞–Ω–∏—Ö"""
    
    logger.info("Processing webhook data: {}".format(webhook_data))
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = load_config()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
    event = webhook_data.get('event', '')
    caller_id = webhook_data.get('caller_id', '')
    called_did = webhook_data.get('called_did', '')
    disposition = webhook_data.get('disposition', '')
    duration = int(webhook_data.get('duration', 0))
    
    logger.info("Event: {}, Caller: {}, Called: {}, Disposition: {}, Duration: {}".format(
        event, caller_id, called_did, disposition, duration))
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤
    if event != 'NOTIFY_END':
        logger.info("Ignoring event type: {}".format(event))
        return {'status': 'ignored', 'reason': 'not_notify_end'}
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –¥—ñ—ó
    action_type, target_number = determine_action_type(called_did, config)
    
    if not action_type:
        logger.warning("Cannot determine action type for called_did: {}".format(called_did))
        return {'status': 'error', 'reason': 'unknown_number'}
    
    logger.info("Detected action: {} for number: {}".format(action_type, target_number))
    
    # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    call_data = find_pending_call(target_number)
    
    if not call_data:
        logger.warning("No pending call found for number: {}".format(target_number))
        return {'status': 'error', 'reason': 'call_not_found'}
    
    logger.info("Found call: {} for user: {}".format(call_data['call_id'], call_data['chat_id']))
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∑–≤—ñ–Ω–∫–∞
    result_status, message = analyze_call_result(disposition, duration, action_type)
    
    logger.info("Call result: {} - {}".format(result_status, message))
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    success = send_telegram_message(call_data['chat_id'], message, config)
    
    if not success:
        logger.error("Failed to send Telegram message")
        return {'status': 'error', 'reason': 'telegram_failed'}
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    update_success = update_call_status(call_data['call_id'], result_status)
    
    if not update_success:
        logger.error("Failed to update call status in database")
    
    return {
        'status': 'success',
        'call_id': call_data['call_id'],
        'result_status': result_status,
        'message_sent': success,
        'db_updated': update_success
    }

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    
    if len(sys.argv) < 2:
        logger.error("No webhook data provided")
        logger.error("Usage: python3 process_webhook.py '<json_data>'")
        sys.exit(1)
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ JSON –¥–∞–Ω—ñ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        webhook_json = sys.argv[1]
        webhook_data = json.loads(webhook_json)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ webhook
        result = process_webhook_data(webhook_data)
        
        logger.info("Processing result: {}".format(result))
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
    except json.JSONDecodeError as e:
        logger.error("Invalid JSON data: {}".format(e))
        print(json.dumps({'status': 'error', 'reason': 'invalid_json', 'details': str(e)}))
        sys.exit(1)
        
    except Exception as e:
        logger.error("Unexpected error: {}".format(e))
        logger.error("Traceback: {}".format(traceback.format_exc()))
        print(json.dumps({'status': 'error', 'reason': 'unexpected_error', 'details': str(e)}))
        sys.exit(1)

if __name__ == "__main__":
    main()
