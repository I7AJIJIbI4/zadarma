#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
test_server_functions.py - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä—ñ

–¶–µ–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç—É—î –≤—Å—ñ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.
"""

import sys
import os
import sqlite3
import logging
from datetime import datetime

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_database_connections():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤—Å—ñ—Ö –±–∞–∑ –¥–∞–Ω–∏—Ö"""
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–Ü–î–ö–õ–Æ–ß–ï–ù–¨ –î–û –ë–î")
    print("=" * 40)
    
    databases = [
        ('users.db', '–û—Å–Ω–æ–≤–Ω–∞ –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'),
        ('call_tracking.db', '–ë–î –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤')
    ]
    
    results = {}
    
    for db_file, description in databases:
        try:
            if os.path.exists(db_file):
                conn = sqlite3.connect(db_file)
                cursor = conn.cursor()
                
                if db_file == 'users.db':
                    cursor.execute('SELECT COUNT(*) FROM clients')
                    clients_count = cursor.fetchone()[0]
                    cursor.execute('SELECT COUNT(*) FROM users')  
                    users_count = cursor.fetchone()[0]
                    print(f"‚úÖ {description}: {clients_count} –∫–ª—ñ—î–Ω—Ç—ñ–≤, {users_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
                    results[db_file] = {'status': 'OK', 'clients': clients_count, 'users': users_count}
                    
                elif db_file == 'call_tracking.db':
                    cursor.execute('SELECT COUNT(*) FROM calls')
                    calls_count = cursor.fetchone()[0]
                    print(f"‚úÖ {description}: {calls_count} –¥–∑–≤—ñ–Ω–∫—ñ–≤")
                    results[db_file] = {'status': 'OK', 'calls': calls_count}
                
                conn.close()
            else:
                print(f"‚ö†Ô∏è  {description}: —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î")
                results[db_file] = {'status': 'NOT_FOUND'}
                
        except Exception as e:
            print(f"‚ùå {description}: –ø–æ–º–∏–ª–∫–∞ - {e}")
            results[db_file] = {'status': 'ERROR', 'error': str(e)}
    
    return results

def test_sync_functions():
    """–¢–µ—Å—Ç—É—î –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á")
    print("=" * 40)
    
    results = {}
    
    try:
        from user_db import cleanup_duplicate_phones, get_user_info
        
        # –¢–µ—Å—Ç –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        try:
            duplicates_cleaned = cleanup_duplicate_phones()
            print(f"‚úÖ cleanup_duplicate_phones: –≤–∏–¥–∞–ª–µ–Ω–æ {duplicates_cleaned} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
            results['cleanup_duplicates'] = {'status': 'OK', 'cleaned': duplicates_cleaned}
        except Exception as e:
            print(f"‚ùå cleanup_duplicate_phones: {e}")
            results['cleanup_duplicates'] = {'status': 'ERROR', 'error': str(e)}
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞  
        try:
            test_user_id = 573368771  # –ê–¥–º—ñ–Ω
            user_info = get_user_info(test_user_id)
            if user_info:
                print(f"‚úÖ get_user_info: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {test_user_id}")
                results['get_user_info'] = {'status': 'OK'}
            else:
                print(f"‚ö†Ô∏è  get_user_info: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {test_user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                results['get_user_info'] = {'status': 'NOT_FOUND'}
        except Exception as e:
            print(f"‚ùå get_user_info: {e}")
            results['get_user_info'] = {'status': 'ERROR', 'error': str(e)}
            
    except ImportError as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó: {e}")
        results['import'] = {'status': 'ERROR', 'error': str(e)}
    
    return results

def test_api_connections():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API"""
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø API –ü–Ü–î–ö–õ–Æ–ß–ï–ù–¨")
    print("=" * 40)
    
    results = {}
    
    # –¢–µ—Å—Ç WLaunch API
    try:
        from wlaunch_api import test_wlaunch_connection
        wlaunch_ok = test_wlaunch_connection()
        if wlaunch_ok:
            print("‚úÖ WLaunch API: –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
            results['wlaunch'] = {'status': 'OK'}
        else:
            print("‚ùå WLaunch API: –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î")
            results['wlaunch'] = {'status': 'FAILED'}
    except Exception as e:
        print(f"‚ùå WLaunch API: {e}")
        results['wlaunch'] = {'status': 'ERROR', 'error': str(e)}
    
    # –¢–µ—Å—Ç Zadarma API
    try:
        from zadarma_api import test_zadarma_auth
        zadarma_ok = test_zadarma_auth()
        if zadarma_ok:
            print("‚úÖ Zadarma API: –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
            results['zadarma'] = {'status': 'OK'}
        else:
            print("‚ùå Zadarma API: –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î")
            results['zadarma'] = {'status': 'FAILED'}
    except Exception as e:
        print(f"‚ùå Zadarma API: {e}")
        results['zadarma'] = {'status': 'ERROR', 'error': str(e)}
    
    return results

def test_webhook_logic():
    """–¢–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ webhook"""
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø WEBHOOK –õ–û–ì–Ü–ö–ò")
    print("=" * 40)
    
    results = {}
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    test_cases = [
        {
            'name': 'Successful call',
            'data': '{"event":"NOTIFY_END","duration":"15","disposition":"answered","caller_id":"test"}',
            'expected': True
        },
        {
            'name': 'Failed call',
            'data': '{"event":"NOTIFY_END","duration":"0","disposition":"no_answer","caller_id":"test"}',
            'expected': False
        },
        {
            'name': 'Answered call',
            'data': '{"event":"NOTIFY_END","duration":"30","disposition":"answered","caller_id":"test"}',
            'expected': True
        }
    ]
    
    for test_case in test_cases:
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏
            from process_webhook import process_webhook_data
            import json
            
            webhook_data = json.loads(test_case['data'])
            result = process_webhook_data(webhook_data)
            
            if result == test_case['expected']:
                print(f"‚úÖ {test_case['name']}: {'SUCCESS' if result else 'ERROR'} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
                results[test_case['name']] = {'status': 'OK', 'result': result}
            else:
                print(f"‚ùå {test_case['name']}: {'SUCCESS' if result else 'ERROR'}, –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {'SUCCESS' if test_case['expected'] else 'ERROR'}")
                results[test_case['name']] = {'status': 'WRONG', 'expected': test_case['expected'], 'actual': result}
                
        except Exception as e:
            print(f"‚ùå {test_case['name']}: –ø–æ–º–∏–ª–∫–∞ - {e}")
            results[test_case['name']] = {'status': 'ERROR', 'error': str(e)}
    
    return results

def test_new_bot_commands():
    """–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–û–í–ò–• –ö–û–ú–ê–ù–î –ë–û–¢–ê")
    print("=" * 40)
    
    results = {}
    
    try:
        import sync_management
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
        functions_to_test = [
            'handle_sync_status_command',
            'handle_sync_clean_command', 
            'handle_sync_full_command',
            'handle_sync_test_command',
            'handle_sync_user_command',
            'handle_sync_help_command'
        ]
        
        for func_name in functions_to_test:
            if hasattr(sync_management, func_name):
                print(f"‚úÖ {func_name}: —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞")
                results[func_name] = {'status': 'OK'}
            else:
                print(f"‚ùå {func_name}: —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                results[func_name] = {'status': 'NOT_FOUND'}
                
    except ImportError as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ sync_management: {e}")
        results['sync_management'] = {'status': 'IMPORT_ERROR', 'error': str(e)}
    
    return results

def create_test_report(all_results):
    """–°—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    report_content = f"""
–ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô –°–ï–†–í–ï–†–ê
–î–∞—Ç–∞: {timestamp}
–°–µ—Ä–≤–µ—Ä: {os.uname().nodename if hasattr(os, 'uname') else 'Unknown'}
–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}
Python –≤–µ—Ä—Å—ñ—è: {sys.version}

"""
    
    for test_name, results in all_results.items():
        report_content += f"\nüìã {test_name.upper()}\n"
        report_content += "-" * 40 + "\n"
        
        success_count = 0
        total_count = 0
        
        for item_name, item_result in results.items():
            total_count += 1
            status = item_result.get('status', 'UNKNOWN')
            
            if status in ['OK', 'SUCCESS']:
                success_count += 1
                report_content += f"‚úÖ {item_name}: {status}\n"
            elif status in ['NOT_FOUND', 'FAILED']:
                report_content += f"‚ö†Ô∏è  {item_name}: {status}\n"
            else:
                report_content += f"‚ùå {item_name}: {status}\n"
                if 'error' in item_result:
                    report_content += f"   –ü–æ–º–∏–ª–∫–∞: {item_result['error']}\n"
        
        if total_count > 0:
            success_rate = (success_count / total_count) * 100
            report_content += f"\n–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_count}/{total_count} ({success_rate:.1f}%)\n"
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    report_content += f"""

üéØ –ó–ê–ì–ê–õ–¨–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:

1. –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û:
   - –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞: ps aux | grep bot.py
   - –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏: /sync_status, /hvirtka, /vorota
   - –ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f bot.log

2. –ú–û–ù–Ü–¢–û–†–ò–ù–ì:
   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –ª–æ–≥–∏ webhook_processor.log
   - –°—Ç–µ–∂—Ç–µ –∑–∞ –ø–æ–º–∏–ª–∫–∞–º–∏ –≤ bot.log
   - –ö–æ–Ω—Ç—Ä–æ–ª—é–π—Ç–µ —Ä–æ–∑–º—ñ—Ä –±–∞–∑ –¥–∞–Ω–∏—Ö

3. –ü–Ü–î–¢–†–ò–ú–ö–ê:
   - –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è: +380733103110
   - Backup —Ñ–∞–π–ª–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ /home/gomoncli/backup/
   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: SYNC_IMPROVEMENTS.md

–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–ò: {"üü¢ –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò" if success_rate > 80 else "üü° –ü–û–¢–†–ï–ë–£–Ñ –£–í–ê–ì–ò" if success_rate > 50 else "üî¥ –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò"}
"""
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
    report_file = f"server_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {report_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç: {e}")
    
    return report_content

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    print(f"–ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")
    print()
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏
    all_results = {}
    
    try:
        all_results['database_connections'] = test_database_connections()
        all_results['sync_functions'] = test_sync_functions()
        all_results['api_connections'] = test_api_connections()
        all_results['webhook_logic'] = test_webhook_logic()
        all_results['bot_commands'] = test_new_bot_commands()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return 1
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç
    report = create_test_report(all_results)
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 50)
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
    total_success = 0
    total_tests = 0
    
    for results in all_results.values():
        for result in results.values():
            total_tests += 1
            if result.get('status') in ['OK', 'SUCCESS']:
                total_success += 1
    
    if total_tests > 0:
        overall_success = (total_success / total_tests) * 100
        print(f"üìä –ó–ê–ì–ê–õ–¨–ù–ê –£–°–ü–Ü–®–ù–Ü–°–¢–¨: {total_success}/{total_tests} ({overall_success:.1f}%)")
        
        if overall_success >= 90:
            print("üü¢ –°–ò–°–¢–ï–ú–ê –ü–û–í–ù–Ü–°–¢–Æ –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò")
            return 0
        elif overall_success >= 70:
            print("üü° –°–ò–°–¢–ï–ú–ê –ü–†–ê–¶–Æ–Ñ, –ê–õ–ï –ü–û–¢–†–ï–ë–£–Ñ –£–í–ê–ì–ò")
            return 0
        else:
            print("üî¥ –í–ò–Ø–í–õ–ï–ù–û –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò")
            return 1
    else:
        print("‚ùå –ù–ï –í–î–ê–õ–û–°–Ø –í–ò–ö–û–ù–ê–¢–ò –ñ–û–î–ù–û–ì–û –¢–ï–°–¢–£")
        return 1

if __name__ == "__main__":
    exit(main())
