#!/bin/bash
# python36_ultimate_fix.sh - –û—Å—Ç–∞—Ç–æ—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è Python 3.6

echo "üöÄ –û–°–¢–ê–¢–û–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –î–õ–Ø PYTHON 3.6"
echo "======================================="
echo "üêç Python –≤–µ—Ä—Å—ñ—è: $(python3 --version)"
echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: $(pwd)"
echo ""

cd /home/gomoncli/zadarma || { echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–π—Ç–∏ –¥–æ /home/gomoncli/zadarma"; exit 1; }

# 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö users.db
echo "1Ô∏è‚É£ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
python3 << 'EOF'
import sqlite3
try:
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS clients (
        id TEXT PRIMARY KEY, first_name TEXT, last_name TEXT, phone TEXT UNIQUE)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY, phone TEXT, username TEXT, first_name TEXT)''')
    
    conn.commit()
    cursor.execute('SELECT COUNT(*) FROM clients')
    clients = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM users') 
    users = cursor.fetchone()[0]
    conn.close()
    
    print('‚úÖ –ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞: {} –∫–ª—ñ—î–Ω—Ç—ñ–≤, {} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'.format(clients, users))
except Exception as e:
    print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î: {}'.format(e))
EOF

# 2. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ bot.py
echo "2Ô∏è‚É£ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è bot.py..."

# –°—Ç–≤–æ—Ä—é—î–º–æ backup
cp bot.py bot.py.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null

# –ö–æ–º–µ–Ω—Ç—É—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
sed -i 's/from sync_management import/#from sync_management import/' bot.py 2>/dev/null

# 3. –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π sync_stubs.py
echo "3Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è sync_stubs.py..."
cat > sync_stubs.py << 'EOF'
import sqlite3

def handle_sync_status_command(bot, update):
    user_id = update.effective_user.id
    if user_id not in [573368771, 7930079513]:
        bot.send_message(chat_id=update.message.chat_id, text="‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤")
        return
    
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM clients')
        clients = cursor.fetchone()[0]
        cursor.execute('SELECT COUNT(*) FROM users')
        users = cursor.fetchone()[0]
        conn.close()
        
        status = "üìä –°–¢–ê–¢–£–°\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {}\nüè• –ö–ª—ñ—î–Ω—Ç—ñ–≤: {}\n‚úÖ Python 3.6 —Ä–µ–∂–∏–º".format(users, clients)
        bot.send_message(chat_id=update.message.chat_id, text=status)
    except Exception as e:
        bot.send_message(chat_id=update.message.chat_id, text="‚ùå –ü–æ–º–∏–ª–∫–∞: {}".format(str(e)))

def handle_sync_test_command(bot, update):
    user_id = update.effective_user.id
    if user_id not in [573368771, 7930079513]:
        return
    bot.send_message(chat_id=update.message.chat_id, text="üß™ –¢–ï–°–¢\nüíæ –ë–î: ‚úÖ\nüêç Python 3.6: ‚úÖ\nü§ñ –ë–æ—Ç: ‚úÖ")

def handle_sync_clean_command(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Python 3.6")

def handle_sync_full_command(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Python 3.6")

def handle_sync_user_command(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ Python 3.6")

def handle_sync_help_command(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="üîÑ –ö–û–ú–ê–ù–î–ò\nüìä /sync_status\nüß™ /sync_test\n‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª Python 3.6")
EOF

# 4. –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –¥–æ bot.py
echo "4Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É –¥–æ bot.py..."
if ! grep -q "from sync_stubs import" bot.py; then
    echo "" >> bot.py
    echo "# Python 3.6 sync functions" >> bot.py
    echo "from sync_stubs import (" >> bot.py
    echo "    handle_sync_status_command, handle_sync_test_command, handle_sync_help_command," >> bot.py
    echo "    handle_sync_clean_command, handle_sync_full_command, handle_sync_user_command" >> bot.py
    echo ")" >> bot.py
    echo "‚úÖ –Ü–º–ø–æ—Ä—Ç –¥–æ–¥–∞–Ω–æ"
else
    echo "‚úÖ –Ü–º–ø–æ—Ä—Ç –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π"
fi

# 5. –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ process_webhook.py
echo "5Ô∏è‚É£ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è process_webhook.py..."
cat > process_webhook.py << 'EOF'
#!/usr/bin/env python3
import sys
import json
import logging

logging.basicConfig(filename='/home/gomoncli/zadarma/webhook_processor.log', level=logging.INFO, 
                   format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def main():
    if len(sys.argv) < 2:
        print("ERROR")
        return 1
    
    try:
        data = json.loads(sys.argv[1])
        duration = int(data.get('duration', 0))
        disposition = data.get('disposition', '').upper()
        
        if duration > 0 or disposition == 'ANSWERED':
            logger.info('–£—Å–ø—ñ—à–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫: duration={}, disposition={}'.format(duration, disposition))
            print("SUCCESS")
            return 0
        else:
            logger.info('–ù–µ—É—Å–ø—ñ—à–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫: duration={}, disposition={}'.format(duration, disposition))
            print("ERROR") 
            return 1
    except Exception as e:
        logger.error('–ü–æ–º–∏–ª–∫–∞: {}'.format(e))
        print("ERROR")
        return 1

if __name__ == "__main__":
    exit(main())
EOF
chmod +x process_webhook.py

# 6. –¢–µ—Å—Ç—É—î–º–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
echo "6Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É..."
python3 -m py_compile bot.py && echo "‚úÖ bot.py OK" || echo "‚ùå bot.py –º–∞—î –ø–æ–º–∏–ª–∫–∏"
python3 -m py_compile sync_stubs.py && echo "‚úÖ sync_stubs.py OK" || echo "‚ùå sync_stubs.py –º–∞—î –ø–æ–º–∏–ª–∫–∏"
python3 -m py_compile process_webhook.py && echo "‚úÖ process_webhook.py OK" || echo "‚ùå process_webhook.py –º–∞—î –ø–æ–º–∏–ª–∫–∏"

# 7. –¢–µ—Å—Ç—É—î–º–æ process_webhook
echo "7Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è process_webhook..."
echo "–¢–µ—Å—Ç SUCCESS:"
python3 process_webhook.py '{"duration":"10","disposition":"answered"}'
echo "–¢–µ—Å—Ç ERROR:"
python3 process_webhook.py '{"duration":"0","disposition":"no_answer"}'

# 8. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
echo "8Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
pkill -f "python3.*bot.py" 2>/dev/null || true
sleep 2

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
nohup python3 bot.py > bot_startup.log 2>&1 &
sleep 3

if pgrep -f "python3.*bot.py" > /dev/null; then
    bot_pid=$(pgrep -f "python3.*bot.py")
    echo "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ (PID: $bot_pid)"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥–∏ –Ω–∞ –ø–æ–º–∏–ª–∫–∏
    if [ -f "bot_startup.log" ]; then
        if grep -q "ERROR\|Exception\|Traceback" bot_startup.log; then
            echo "‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ –≤ –ª–æ–≥–∞—Ö –∑–∞–ø—É—Å–∫—É:"
            tail -5 bot_startup.log
        else
            echo "‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–≤—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫"
        fi
    fi
else
    echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    echo "üîç –õ–æ–≥ –∑–∞–ø—É—Å–∫—É:"
    [ -f "bot_startup.log" ] && cat bot_startup.log | tail -10
fi

# 9. –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
echo "9Ô∏è‚É£ –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞..."
echo "Python –º–æ–¥—É–ª—ñ:"
python3 -c "import sync_stubs; print('‚úÖ sync_stubs')" 2>/dev/null || echo "‚ùå sync_stubs"
python3 -c "import sqlite3; print('‚úÖ sqlite3')" 2>/dev/null || echo "‚ùå sqlite3"

echo "–§–∞–π–ª–∏:"
[ -f "users.db" ] && echo "‚úÖ users.db" || echo "‚ùå users.db"
[ -f "sync_stubs.py" ] && echo "‚úÖ sync_stubs.py" || echo "‚ùå sync_stubs.py"
[ -f "process_webhook.py" ] && echo "‚úÖ process_webhook.py" || echo "‚ùå process_webhook.py"

echo ""
echo "üéâ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!"
echo "========================"
echo ""
echo "üìä –°–¢–ê–¢–£–°:"
if pgrep -f "python3.*bot.py" > /dev/null; then
    echo "ü§ñ –ë–æ—Ç: ‚úÖ –ü—Ä–∞—Ü—é—î (PID: $(pgrep -f 'python3.*bot.py'))"
else
    echo "ü§ñ –ë–æ—Ç: ‚ùå –ù–µ –ø—Ä–∞—Ü—é—î"
fi
echo "üêç Python: ‚úÖ 3.6 (—Å—É–º—ñ—Å–Ω–∏–π —Ä–µ–∂–∏–º)"
echo "üíæ –ë–î: ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞"
echo ""
echo "üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í TELEGRAM:"
echo "‚Ä¢ /sync_status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"
echo "‚Ä¢ /sync_test - —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω—å"  
echo "‚Ä¢ /hvirtka - —Ç–µ—Å—Ç –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞–ª–∏—Ç–∫–∏"
echo ""
echo "üìã –ú–û–ù–Ü–¢–û–†–ò–ù–ì:"
echo "‚Ä¢ tail -f bot.log"
echo "‚Ä¢ tail -f webhook_processor.log"
echo "‚Ä¢ ps aux | grep bot.py"
echo ""
echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏ –Ω–∞ Python 3.6!"
