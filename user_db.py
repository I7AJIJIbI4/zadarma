# user_db.py - Enhanced version with logging
import sqlite3
import threading
import logging

logger = logging.getLogger(__name__)

DB_PATH = "/home/gomoncli/zadarma/users.db"
_lock = threading.Lock()

def init_db():
    logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    with _lock:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS clients (
                    id TEXT PRIMARY KEY,
                    first_name TEXT,
                    last_name TEXT,
                    phone TEXT UNIQUE
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    telegram_id INTEGER PRIMARY KEY,
                    phone TEXT,
                    username TEXT,
                    first_name TEXT
                )
            ''')
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            raise

def normalize_phone(phone):
    normalized = ''.join(filter(str.isdigit, phone))
    logger.debug(f"üìû –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É: '{phone}' ‚Üí '{normalized}'")
    return normalized

def add_or_update_client(client_id, first_name, last_name, phone):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –æ–Ω–æ–≤–ª–µ–Ω—å"""
    logger.info(f"üë§ –î–æ–¥–∞–≤–∞–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {client_id} ({first_name} {last_name}), —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    
    with _lock:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            phone_norm = normalize_phone(phone)
            
            # –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º ID
            cursor.execute('SELECT phone FROM clients WHERE id = ?', (client_id,))
            existing_by_id = cursor.fetchone()
            
            # –ö–†–û–ö 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
            cursor.execute('SELECT id, first_name, last_name FROM clients WHERE phone = ?', (phone_norm,))
            existing_by_phone = cursor.fetchone()
            
            if existing_by_id and existing_by_phone:
                # –í–∏–ø–∞–¥–æ–∫: —î –∑–∞–ø–∏—Å–∏ –∑ —Ç–∏–º –∂–µ ID —ñ –∑ —Ç–∏–º –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                if existing_by_id[0] == phone_norm:
                    # –¶–µ —Ç–æ–π –∂–µ –∫–ª—ñ—î–Ω—Ç - –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ
                    cursor.execute('''
                        UPDATE clients SET first_name=?, last_name=?, phone=? WHERE id=?
                    ''', (first_name, last_name, phone_norm, client_id))
                    logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}")
                else:
                    # –ö–ª—ñ—î–Ω—Ç –∑–º—ñ–Ω–∏–≤ –Ω–æ–º–µ—Ä - –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                    cursor.execute('DELETE FROM clients WHERE phone = ? AND id != ?', (phone_norm, client_id))
                    cursor.execute('''
                        UPDATE clients SET first_name=?, last_name=?, phone=? WHERE id=?
                    ''', (first_name, last_name, phone_norm, client_id))
                    logger.info(f"üîÑ –ö–ª—ñ—î–Ω—Ç {client_id} –∑–º—ñ–Ω–∏–≤ –Ω–æ–º–µ—Ä: {existing_by_id[0]} ‚Üí {phone_norm}")
                    
            elif existing_by_id:
                # –Ü—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º ID, –∞–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ–Ω—à–∏–π
                old_phone = existing_by_id[0]
                cursor.execute('''
                    UPDATE clients SET first_name=?, last_name=?, phone=? WHERE id=?
                ''', (first_name, last_name, phone_norm, client_id))
                logger.info(f"üìû –ö–ª—ñ—î–Ω—Ç {client_id} –æ–Ω–æ–≤–∏–≤ —Ç–µ–ª–µ—Ñ–æ–Ω: {old_phone} ‚Üí {phone_norm}")
                
            elif existing_by_phone:
                # –Ü—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, –∞–ª–µ ID —ñ–Ω—à–∏–π
                old_id = existing_by_phone[0]
                cursor.execute('DELETE FROM clients WHERE phone = ?', (phone_norm,))
                cursor.execute('''
                    INSERT INTO clients (id, first_name, last_name, phone)
                    VALUES (?, ?, ?, ?)
                ''', (client_id, first_name, last_name, phone_norm))
                logger.info(f"üÜî –¢–µ–ª–µ—Ñ–æ–Ω {phone_norm} –ø–µ—Ä–µ–π—à–æ–≤ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {old_id} –¥–æ {client_id}")
                
            else:
                # –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç
                cursor.execute('''
                    INSERT INTO clients (id, first_name, last_name, phone)
                    VALUES (?, ?, ?, ?)
                ''', (client_id, first_name, last_name, phone_norm))
                logger.info(f"üÜï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}")
            
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ö–ª—ñ—î–Ω—Ç {client_id} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")
            raise

def find_client_by_phone(phone):
    logger.info(f"üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º: {phone}")
    with _lock:
        try:
            conn = sqlite3.connect(DB_PATH, timeout=10.0)  # –î–æ–¥–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
            cursor = conn.cursor()
            phone_norm = normalize_phone(phone)
            search_pattern = f'%{phone_norm[-9:]}%'
            logger.info(f"üîç –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä: {phone_norm}")
            logger.info(f"üîç –®—É–∫–∞—î–º–æ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º: {search_pattern}")
            
            # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–¥–∏–≤–∏–º–æ—Å—è, —Å–∫—ñ–ª—å–∫–∏ –≤–∑–∞–≥–∞–ª—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ –±–∞–∑—ñ
            cursor.execute('SELECT COUNT(*) FROM clients')
            total_clients = cursor.fetchone()[0]
            logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ –±–∞–∑—ñ: {total_clients}")
            
            if total_clients == 0:
                logger.warning("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—è clients –ø—É—Å—Ç–∞!")
                conn.close()
                return None
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
            logger.info(f"üîç –®—É–∫–∞—î–º–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ –¥–ª—è: {phone_norm}")
            cursor.execute('''
                SELECT id, first_name, last_name, phone FROM clients
                WHERE phone = ?
                LIMIT 1
            ''', (phone_norm,))
            exact_match = cursor.fetchone()
            
            if exact_match:
                result = {
                    "id": exact_match[0],
                    "first_name": exact_match[1],
                    "last_name": exact_match[2],
                    "phone": exact_match[3]
                }
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥: {result}")
                conn.close()
                return result
            
            # –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ –∑–±—ñ–≥—É –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º
            logger.info(f"üîç –¢–æ—á–Ω–æ–≥–æ –∑–±—ñ–≥—É –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º: {search_pattern}")
            cursor.execute('''
                SELECT id, first_name, last_name, phone FROM clients
                WHERE phone LIKE ?
                LIMIT 1
            ''', (search_pattern,))
            row = cursor.fetchone()
            
            if row:
                result = {
                    "id": row[0],
                    "first_name": row[1],
                    "last_name": row[2],
                    "phone": row[3]
                }
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –ø–∞—Ç–µ—Ä–Ω–æ–º: {result}")
                conn.close()
                return result
            else:
                # –ü–æ–∫–∞–∂–µ–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –Ω–æ–º–µ—Ä—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                cursor.execute('SELECT phone FROM clients LIMIT 5')
                sample_phones = cursor.fetchall()
                logger.info(f"üìã –ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–æ–º–µ—Ä—ñ–≤ –≤ –±–∞–∑—ñ: {[p[0] for p in sample_phones]}")
                
                logger.info(f"‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {phone} (–ø–∞—Ç–µ—Ä–Ω {search_pattern}) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                conn.close()
                return None
                
        except sqlite3.OperationalError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SQL –æ–ø–µ—Ä–∞—Ü—ñ—ó: {e}")
            if 'database is locked' in str(e):
                logger.error("üîí –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞! –ú–æ–∂–ª–∏–≤–æ, —ñ–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è.")
            return None
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º {phone}: {e}")
            return None

def store_user(telegram_id, phone, username, first_name):
    logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id} (@{username}, {first_name}), —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    with _lock:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            phone_norm = normalize_phone(phone)

            # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é users
            cursor.execute('''
                INSERT OR REPLACE INTO users (telegram_id, phone, username, first_name)
                VALUES (?, ?, ?, ?)
            ''', (telegram_id, phone_norm, username, first_name))
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—é users")

            # —à—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            search_pattern = f'%{phone_norm[-9:]}%'
            cursor.execute('''
                SELECT id FROM clients WHERE phone LIKE ?
                LIMIT 1
            ''', (search_pattern,))
            row = cursor.fetchone()

            # —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ telegram_id —è–∫ id –∫–ª—ñ—î–Ω—Ç–∞
            if row:
                client_id = telegram_id
                cursor.execute('''
                    UPDATE clients
                    SET id = ?
                    WHERE phone LIKE ?
                ''', (client_id, search_pattern))
                logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ ID –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞ {client_id} –¥–ª—è –Ω–æ–º–µ—Ä—É {phone}")
            else:
                logger.info(f"‚ÑπÔ∏è  –ö–ª—ñ—î–Ω—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º {phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ")

            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π")
            
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            raise

def update_clients(clients):
    logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è {len(clients)} –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
    with _lock:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            updated_count = 0
            
            for client in clients:
                client_id = client.get("id")
                first_name = client.get("first_name", "")
                last_name = client.get("last_name", "")
                phone = normalize_phone(client.get("phone", ""))
                
                cursor.execute('''
                    INSERT INTO clients(id, first_name, last_name, phone)
                    VALUES (?, ?, ?, ?)
                    ON CONFLICT(id) DO UPDATE SET
                        first_name=excluded.first_name,
                        last_name=excluded.last_name,
                        phone=excluded.phone
                ''', (client_id, first_name, last_name, phone))
                updated_count += 1
                
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
            
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
            raise

def is_authorized_user_simple(telegram_id):
    """–°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –ø–æ—à—É–∫—ñ–≤"""
    logger.info(f"üîç –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id}")
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ–≤ –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É!
    try:
        from config import ADMIN_USER_IDS
        admin_list = ADMIN_USER_IDS
    except ImportError:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        from config import ADMIN_USER_ID
        admin_list = [ADMIN_USER_ID]
    
    if telegram_id in admin_list:
        logger.info(f"üëë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} —î –ê–î–ú–Ü–ù–û–ú - –¥–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ")
        return True
    
    try:
        conn = sqlite3.connect(DB_PATH, timeout=3.0)
        cursor = conn.cursor()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute('SELECT phone FROM users WHERE telegram_id = ?', (telegram_id,))
        user_row = cursor.fetchone()
        
        if not user_row:
            logger.info(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            conn.close()
            return False
            
        phone = normalize_phone(user_row[0])
        logger.info(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {phone}")
        
        # –®—É–∫–∞—î–º–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        cursor.execute('SELECT id, first_name, last_name FROM clients WHERE phone = ?', (phone,))
        client_row = cursor.fetchone()
        
        conn.close()
        
        if client_row:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: {client_row[1]} {client_row[2]}")
            return True
        else:
            logger.info(f"‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º {phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return False

def is_authorized_user(telegram_id):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ fallback"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π –º–µ—Ç–æ–¥
        return is_authorized_user_simple(telegram_id)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return False

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
def get_user_info(telegram_id):
    """–û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info(f"‚ÑπÔ∏è  –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id}")
    
    with _lock:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ —Ç–∞–±–ª–∏—Ü—ñ users
            cursor.execute('''
                SELECT telegram_id, phone, username, first_name FROM users 
                WHERE telegram_id = ?
            ''', (telegram_id,))
            user_row = cursor.fetchone()
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤
            cursor.execute('SELECT COUNT(*) FROM clients')
            clients_count = cursor.fetchone()[0]
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute('SELECT COUNT(*) FROM users')
            users_count = cursor.fetchone()[0]
            
            conn.close()
            
            info = {
                "user_in_db": user_row is not None,
                "user_data": user_row,
                "clients_count": clients_count,
                "users_count": users_count
            }
            
            logger.info(f"‚ÑπÔ∏è  –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {info}")
            return info
            
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
            return None

def add_test_client(telegram_id, phone):
    """–î–æ–¥–∞—î —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info(f"üß™ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {telegram_id}, {phone}")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        with _lock:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT first_name, username FROM users WHERE telegram_id = ?
            ''', (telegram_id,))
            user_row = cursor.fetchone()
            
            if user_row:
                first_name = user_row[0]
                username = user_row[1]
                
                # –î–æ–¥–∞—î–º–æ —è–∫ –∫–ª—ñ—î–Ω—Ç–∞
                phone_norm = normalize_phone(phone)
                cursor.execute('''
                    INSERT OR REPLACE INTO clients (id, first_name, last_name, phone)
                    VALUES (?, ?, ?, ?)
                ''', (telegram_id, first_name, f"Test_{username}", phone_norm))
                
                conn.commit()
                logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç {telegram_id} –¥–æ–¥–∞–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è  –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ users")
                
            conn.close()
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {e}")
        raise

def force_full_sync():
    """–ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –æ—á–∏—â–µ–Ω–Ω—è–º –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –¥–∞–Ω–∏—Ö"""
    logger.info("üîÑ –ü–†–ò–ú–£–°–û–í–ê –ü–û–í–ù–ê –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø")
    
    try:
        # –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é
        with _lock:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ backup –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS clients_backup AS 
                SELECT * FROM clients WHERE 1=0
            ''')
            cursor.execute('DELETE FROM clients_backup')
            cursor.execute('INSERT INTO clients_backup SELECT * FROM clients')
            
            # –û—á–∏—â—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ç–∞–±–ª–∏—Ü—é
            cursor.execute('DELETE FROM clients')
            conn.commit()
            conn.close()
            
            logger.info("üóëÔ∏è –°—Ç–∞—Ä–∞ —Ç–∞–±–ª–∏—Ü—è clients –æ—á–∏—â–µ–Ω–∞, —Å—Ç–≤–æ—Ä–µ–Ω–æ backup")
        
        # –ö—Ä–æ–∫ 2: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
        from wlaunch_api import fetch_all_clients
        new_count = fetch_all_clients()
        
        # –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with _lock:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM clients')
            current_count = cursor.fetchone()[0]
            conn.close()
        
        if current_count > 0:
            logger.info(f"‚úÖ –ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞: {current_count} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
            # –í–∏–¥–∞–ª—è—î–º–æ backup
            with _lock:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute('DROP TABLE clients_backup')
                conn.commit()
                conn.close()
            return True
        else:
            # –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ - –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑ backup
            logger.error("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑ backup")
            with _lock:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                cursor.execute('DELETE FROM clients')
                cursor.execute('INSERT INTO clients SELECT * FROM clients_backup')
                cursor.execute('DROP TABLE clients_backup')
                conn.commit()
                conn.close()
            return False
            
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–æ–≤–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
        return False

def cleanup_duplicate_phones():
    """–û—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–æ–º–µ—Ä—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"""
    logger.info("üßπ –û—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –Ω–æ–º–µ—Ä—ñ–≤")
    
    with _lock:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            cursor.execute('''
                SELECT phone, COUNT(*) as count 
                FROM clients 
                GROUP BY phone 
                HAVING count > 1
            ''')
            
            duplicates = cursor.fetchall()
            cleaned_count = 0
            
            for phone, count in duplicates:
                logger.info(f"üìû –ó–Ω–∞–π–¥–µ–Ω–æ {count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}")
                
                # –ó–∞–ª–∏—à–∞—î–º–æ –∑–∞–ø–∏—Å –∑ –Ω–∞–π–º–µ–Ω—à–∏–º rowid (–Ω–∞–π—Å—Ç–∞—Ä—à–∏–π)
                cursor.execute('''
                    DELETE FROM clients 
                    WHERE phone = ? AND rowid NOT IN (
                        SELECT MIN(rowid) FROM clients WHERE phone = ?
                    )
                ''', (phone, phone))
                
                cleaned_count += cursor.rowcount
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {cleaned_count} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤")
            return cleaned_count
            
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {e}")
            return 0

def sync_specific_client(client_id, phone):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ WLaunch API"""
    logger.info(f"üéØ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: {client_id}, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    
    try:
        from wlaunch_api import find_client_by_phone
        
        # –®—É–∫–∞—î–º–æ –≤ WLaunch
        wlaunch_data = find_client_by_phone(phone)
        
        if wlaunch_data:
            # –û–Ω–æ–≤–ª—é—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –±–∞–∑—ñ
            add_or_update_client(
                client_id=wlaunch_data.get('id', client_id),
                first_name=wlaunch_data.get('first_name', ''),
                last_name=wlaunch_data.get('last_name', ''),
                phone=wlaunch_data.get('phone', phone)
            )
            logger.info(f"‚úÖ –ö–ª—ñ—î–Ω—Ç {client_id} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ WLaunch")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç –∑ –Ω–æ–º–µ—Ä–æ–º {phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ WLaunch")
            return False
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")
        return False