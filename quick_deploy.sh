#!/bin/bash

echo "üöÄ –®–í–ò–î–ö–ï –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø ZADARMA BOT –ó GITHUB"
echo "=========================================="

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_DIR="/home/gomoncli/zadarma"

echo -e "${BLUE}üìÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ: $PROJECT_DIR${NC}"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø—Ä–æ—î–∫—Ç
if [ ! -d "$PROJECT_DIR" ]; then
    echo -e "${RED}‚ùå –ü–û–ú–ò–õ–ö–ê: –ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ $PROJECT_DIR${NC}"
    echo -e "${YELLOW}–ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É –∫–ª–æ–Ω—É–≤–∞—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π${NC}"
    exit 1
fi

cd "$PROJECT_DIR" || exit 1

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå –ü–û–ú–ò–õ–ö–ê: –¶–µ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π${NC}"
    exit 1
fi

echo -e "${YELLOW}1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –∑ GitHub...${NC}"

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ —è–∫—â–æ —î
CHANGED_FILES=$(git status --porcelain | wc -l)
if [ "$CHANGED_FILES" -gt 0 ]; then
    echo -e "${YELLOW}   üìã –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏...${NC}"
    git stash push -m "Auto stash before quick deploy $(date)"
fi

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏
echo -e "${BLUE}   üì• git fetch origin main...${NC}"
git fetch origin main

# –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ
COMMITS_BEHIND=$(git rev-list --count HEAD..origin/main 2>/dev/null || echo "0")
if [ "$COMMITS_BEHIND" -gt 0 ]; then
    echo -e "${BLUE}   üÜï –î–æ—Å—Ç—É–ø–Ω–æ $COMMITS_BEHIND –Ω–æ–≤–∏—Ö –∫–æ–º–º—ñ—Ç—ñ–≤:${NC}"
    git log --oneline HEAD..origin/main | head -3
    
    echo -e "${YELLOW}   üîÑ git pull origin main...${NC}"
    git pull origin main
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}   ‚úÖ –ö–æ–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ${NC}"
    else
        echo -e "${RED}   ‚ùå –ü–û–ú–ò–õ–ö–ê: Git pull –Ω–µ –≤–¥–∞–≤—Å—è${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}   ‚úÖ –ö–æ–¥ –≤–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π (–Ω–æ–≤–∏—Ö –∫–æ–º–º—ñ—Ç—ñ–≤ –Ω–µ–º–∞—î)${NC}"
fi

echo ""
echo -e "${YELLOW}2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...${NC}"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î update.sh
if [ ! -f "update.sh" ]; then
    echo -e "${RED}‚ùå –ü–û–ú–ò–õ–ö–ê: update.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
    exit 1
fi

# –†–æ–±–∏–º–æ update.sh –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–º
chmod +x update.sh

echo -e "${BLUE}   üîß –ó–∞–ø—É—Å–∫–∞—î–º–æ ./update.sh...${NC}"
echo ""

# –ó–∞–ø—É—Å–∫–∞—î–º–æ update.sh
./update.sh

UPDATE_EXIT_CODE=$?

echo ""
echo -e "${BLUE}üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –®–í–ò–î–ö–û–ì–û –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø:${NC}"

if [ $UPDATE_EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –®–í–ò–î–ö–ï –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –£–°–ü–Ü–®–ù–ï!${NC}"
    echo -e "${GREEN}   - Git pull –≤–∏–∫–æ–Ω–∞–Ω–æ${NC}"
    echo -e "${GREEN}   - Update.sh —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π${NC}"
    echo ""
    echo -e "${BLUE}üß™ –¢–ï–°–¢–£–ô–¢–ï –°–ò–°–¢–ï–ú–£:${NC}"
    echo -e "   üì± Telegram: /hvirtka –∞–±–æ /vorota"
    echo -e "   üìû IVR: –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä"
    echo -e "   üìã –õ–æ–≥–∏: tail -f bot.log"
else
    echo -e "${RED}‚ùå –®–í–ò–î–ö–ï –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –ù–ï –í–î–ê–õ–û–°–Ø!${NC}"
    echo -e "${YELLOW}   Exit code: $UPDATE_EXIT_CODE${NC}"
    echo ""
    echo -e "${BLUE}üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:${NC}"
    echo -e "   üìã –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ"
    echo -e "   üîß –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–µ —Ä—É—á–Ω–µ –≤—Ç—Ä—É—á–∞–Ω–Ω—è"
    echo -e "   üìû –ê–±–æ –∑–∞–ø—É—Å—Ç—ñ—Ç—å update.sh –æ–∫—Ä–µ–º–æ"
fi

echo ""
echo -e "${BLUE}üìÅ –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: $(pwd)${NC}"
echo -e "${BLUE}ü§ñ Bot PID: $(pgrep -f "python3.*bot.py" || echo "–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")${NC}"
