# zadarma_api.py - Based on official GitHub implementation
import logging
import hashlib
import hmac
import base64
import requests
from urllib.parse import urlencode
from collections import OrderedDict
from config import (
    ZADARMA_API_KEY,
    ZADARMA_API_SECRET,
    ZADARMA_SIP_ACCOUNT,
    HVIRTKA_NUMBER,
    VOROTA_NUMBER,
    ADMIN_USER_ID,
    TELEGRAM_TOKEN
)

logger = logging.getLogger(__name__)

class ZadarmaAPI:
    def __init__(self, key, secret, is_sandbox=False):
        self.key = key
        self.secret = secret
        self.is_sandbox = is_sandbox
        self.__url_api = 'https://api.zadarma.com'
        if is_sandbox:
            self.__url_api = 'https://api-sandbox.zadarma.com'

    def call(self, method, params={}, request_type='GET', format='json', is_auth=True):
        """
        Function for send API request - —Ç–æ—á–Ω–∞ –∫–æ–ø—ñ—è –∑ GitHub
        """
        logger.info(f"üì° Zadarma API call: {method}, params: {params}")
        
        request_type = request_type.upper()
        if request_type not in ['GET', 'POST', 'PUT', 'DELETE']:
            request_type = 'GET'
        
        params['format'] = format
        auth_str = None
        
        # –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ query string
        params_string = urlencode(OrderedDict(sorted(params.items())))
        logger.info(f"üîê Params string: {params_string}")

        if is_auth:
            auth_str = self.__get_auth_string_for_header(method, params_string)
            logger.info(f"üîê Auth header: {auth_str}")

        url = self.__url_api + method
        logger.info(f"üåê Request URL: {url}")

        if request_type == 'GET':
            if params_string:
                url += '?' + params_string
            result = requests.get(url, headers={'Authorization': auth_str})
        elif request_type == 'POST':
            result = requests.post(url, headers={'Authorization': auth_str}, data=params)
        elif request_type == 'PUT':
            result = requests.put(url, headers={'Authorization': auth_str}, data=params)
        elif request_type == 'DELETE':
            result = requests.delete(url, headers={'Authorization': auth_str}, data=params)

        logger.info(f"üì° Response status: {result.status_code}")
        logger.info(f"üì° Response: {result.text}")
        
        return result

    def __get_auth_string_for_header(self, method, params_string):
        """
        –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ GitHub
        """
        # –ö—Ä–æ–∫ 1: —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
        data = method + params_string + hashlib.md5(params_string.encode('utf8')).hexdigest()
        logger.info(f"üîê String to sign: {data}")
        
        # –ö—Ä–æ–∫ 2: HMAC SHA1
        hmac_h = hmac.new(self.secret.encode('utf8'), data.encode('utf8'), hashlib.sha1)
        
        # –ö—Ä–æ–∫ 3: –í–ê–ñ–õ–ò–í–û! –°–ø–æ—á–∞—Ç–∫—É hexdigest, –ø–æ—Ç—ñ–º base64
        hex_digest = hmac_h.hexdigest()
        logger.info(f"üîê HMAC hex digest: {hex_digest}")
        
        bts = bytes(hex_digest, 'utf8')
        signature = base64.b64encode(bts).decode()
        logger.info(f"üîê Final signature: {signature}")
        
        # –ö—Ä–æ–∫ 4: —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        auth = self.key + ':' + signature
        return auth

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä API
zadarma_api = ZadarmaAPI(ZADARMA_API_KEY, ZADARMA_API_SECRET)

def send_error_to_admin(message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": ADMIN_USER_ID, "text": message}
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logger.info(f"üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É (–∫–æ–¥ {response.status_code})")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

def make_zadarma_call(to_number: str) -> bool:
    """–†–æ–±–∏—Ç—å callback –¥–∑–≤—ñ–Ω–æ–∫ —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π API"""
    logger.info(f"üìû –†–æ–±–∏–º–æ –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä: {to_number}")
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    from config import ZADARMA_MAIN_PHONE, format_phone_for_zadarma
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    formatted_to = format_phone_for_zadarma(to_number)
    logger.info(f"üìû –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä TO: {formatted_to}")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä —è–∫–∏–π –ø—Ä–∞—Ü—é—î
    from_number = ZADARMA_MAIN_PHONE
    logger.info(f"üìû –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FROM –Ω–æ–º–µ—Ä: {from_number}")
    
    try:
        params = {
            "from": from_number,
            "to": formatted_to,
        }
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π API
        response = zadarma_api.call('/v1/request/callback/', params, 'GET')
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        import json
        try:
            result = json.loads(response.text)
        except:
            result = {"status": "error", "message": f"Invalid JSON: {response.text}"}
        
        if result.get("status") == "success":
            logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –∑ {from_number} –Ω–∞ {formatted_to}")
            logger.info(f"üìã –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")
            return True
        else:
            error_msg = result.get("message", "Unknown error")
            logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∑–≤—ñ–Ω–∫–∞: {error_msg}")
            return False
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É API: {e}")
        return False

def test_phone_formats():
    """–¢–µ—Å—Ç—É—î —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –Ω–æ–º–µ—Ä—ñ–≤ –¥–ª—è Zadarma API"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –Ω–æ–º–µ—Ä—ñ–≤...")
    
    test_numbers = [
        "380933297777",
        "+380933297777", 
        "0933297777",
        "933297777"
    ]
    
    from config import format_phone_for_zadarma
    
    for number in test_numbers:
        formatted = format_phone_for_zadarma(number)
        logger.info(f"üìû {number} ‚Üí {formatted}")
    
    return True

def test_zadarma_auth():
    """–¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º API...")
    
    try:
        response = zadarma_api.call('/v1/sip/', {}, 'GET')
        
        import json
        result = json.loads(response.text)
        
        if result.get("status") == "success":
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î: {result}")
            return True
        else:
            logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î: {result}")
            return False
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return False

def check_zadarma_sip():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SIP —Å—Ç–∞—Ç—É—Å—É"""
    logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Zadarma SIP...")
    
    try:
        if not test_zadarma_auth():
            raise Exception("–ë–∞–∑–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î")
        
        response = zadarma_api.call('/v1/sip/', {}, 'GET')
        result = json.loads(response.text)
        
        if result.get("status") != "success":
            raise Exception(f"Zadarma SIP status not success: {result}")
            
        logger.info("‚úÖ Zadarma SIP –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ")
        logger.info(f"üìã SIP —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {result}")
        
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Zadarma SIP: {e}")
        send_error_to_admin(f"‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Zadarma SIP: {e}")
        raise

# –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º
def make_zadarma_call_handler(target_number, label):
    def handler(bot, update):
        user_id = update.message.chat_id
        logger.info(f"üîë –í–∏–∫–ª–∏–∫–∞–Ω–æ {label} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
        try:
            bot.send_message(chat_id=user_id, text="üîë –ü—ñ–¥–±–∏—Ä–∞—î–º–æ –∫–ª—é—á—ñ...")
            success = make_zadarma_call(target_number)
            
            if success:
                bot.send_message(chat_id=user_id, text=f"‚úÖ {label} –±—É–¥–µ –≤—ñ–¥—á–∏–Ω–µ–Ω–æ –∑–∞ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.")
                logger.info(f"‚úÖ {label} —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è {user_id}")
            else:
                raise Exception("Zadarma API call returned unsuccessful result.")
                
        except Exception as e:
            logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É {label}: {e}")
            bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑, –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º 073-310-31-10")
            send_error_to_admin(f"‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É Zadarma ({label}): {e}")
            
    return handler

# –û–∫—Ä–µ–º—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
handle_gate_command = make_zadarma_call_handler(VOROTA_NUMBER, "–í–æ—Ä–æ—Ç–∞")
handle_door_command = make_zadarma_call_handler(HVIRTKA_NUMBER, "–•–≤—ñ—Ä—Ç–∫—É")