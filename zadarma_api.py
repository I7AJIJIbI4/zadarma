# zadarma_api.py - Enhanced version with call status tracking
import logging
import hashlib
import hmac
import base64
import requests
import json
import time
import threading
from urllib.parse import urlencode
from collections import OrderedDict
from datetime import datetime
from config import (
    ZADARMA_API_KEY,
    ZADARMA_API_SECRET,
    ZADARMA_MAIN_PHONE,
    ADMIN_USER_ID,
    TELEGRAM_TOKEN,
    format_phone_for_zadarma,
    validate_phone_number
)

logger = logging.getLogger(__name__)

class ZadarmaAPI:
    def __init__(self, key, secret, is_sandbox=False):
        self.key = key
        self.secret = secret
        self.is_sandbox = is_sandbox
        self.__url_api = 'https://api.zadarma.com'
        if is_sandbox:
            self.__url_api = 'https://api-sandbox.zadarma.com'

    def call(self, method, params={}, request_type='GET', format='json', is_auth=True):
        """
        Function for send API request - —Ç–æ—á–Ω–∞ –∫–æ–ø—ñ—è –∑ GitHub
        """
        logger.info(f"üì° Zadarma API call: {method}, params: {params}")
        
        request_type = request_type.upper()
        if request_type not in ['GET', 'POST', 'PUT', 'DELETE']:
            request_type = 'GET'
        
        params['format'] = format
        auth_str = None
        
        # –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ query string
        params_string = urlencode(OrderedDict(sorted(params.items())))
        logger.info(f"üîê Params string: {params_string}")

        if is_auth:
            auth_str = self.__get_auth_string_for_header(method, params_string)
            logger.info(f"üîê Auth header: {auth_str}")

        url = self.__url_api + method
        logger.info(f"üåê Request URL: {url}")

        try:
            if request_type == 'GET':
                if params_string:
                    url += '?' + params_string
                result = requests.get(url, headers={'Authorization': auth_str}, timeout=10)
            elif request_type == 'POST':
                result = requests.post(url, headers={'Authorization': auth_str}, data=params, timeout=10)
            elif request_type == 'PUT':
                result = requests.put(url, headers={'Authorization': auth_str}, data=params, timeout=10)
            elif request_type == 'DELETE':
                result = requests.delete(url, headers={'Authorization': auth_str}, data=params, timeout=10)

            logger.info(f"üì° Response status: {result.status_code}")
            logger.info(f"üì° Response: {result.text}")
            
            return result
            
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–æ Zadarma API")
            raise
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Zadarma API: {e}")
            raise

    def __get_auth_string_for_header(self, method, params_string):
        """
        –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ GitHub
        """
        # –ö—Ä–æ–∫ 1: —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
        data = method + params_string + hashlib.md5(params_string.encode('utf8')).hexdigest()
        logger.debug(f"üîê String to sign: {data}")
        
        # –ö—Ä–æ–∫ 2: HMAC SHA1
        hmac_h = hmac.new(self.secret.encode('utf8'), data.encode('utf8'), hashlib.sha1)
        
        # –ö—Ä–æ–∫ 3: –í–ê–ñ–õ–ò–í–û! –°–ø–æ—á–∞—Ç–∫—É hexdigest, –ø–æ—Ç—ñ–º base64
        hex_digest = hmac_h.hexdigest()
        logger.debug(f"üîê HMAC hex digest: {hex_digest}")
        
        bts = bytes(hex_digest, 'utf8')
        signature = base64.b64encode(bts).decode()
        logger.debug(f"üîê Final signature: {signature}")
        
        # –ö—Ä–æ–∫ 4: —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        auth = self.key + ':' + signature
        return auth

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä API
zadarma_api = ZadarmaAPI(ZADARMA_API_KEY, ZADARMA_API_SECRET)

class CallStatusTracker:
    """–ö–ª–∞—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–∑–≤—ñ–Ω–∫—ñ–≤"""
    
    def __init__(self):
        self.active_calls = {}
        self.call_history = []
        
    def register_call(self, call_id, user_id, chat_id, action_type, target_number):
        """–†–µ—î—Å—Ç—Ä—É—î –Ω–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è"""
        call_info = {
            'call_id': call_id,
            'user_id': user_id,
            'chat_id': chat_id,
            'action_type': action_type,  # 'hvirtka' –∞–±–æ 'vorota'
            'target_number': target_number,
            'start_time': time.time(),
            'status': 'initiated'
        }
        
        self.active_calls[call_id] = call_info
        logger.info(f"üìã –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è: {call_id}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=self._monitor_call, args=(call_id,))
        thread.daemon = True
        thread.start()
        
    def _monitor_call(self, call_id):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞"""
        if call_id not in self.active_calls:
            logger.warning(f"‚ö†Ô∏è –î–∑–≤—ñ–Ω–æ–∫ {call_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
            return
            
        call_info = self.active_calls[call_id]
        max_wait_time = 30  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        check_interval = 3   # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∫–æ–∂–Ω—ñ 3 —Å–µ–∫—É–Ω–¥–∏
        
        logger.info(f"üîç –ü–æ—á–∞—Ç–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–∑–≤—ñ–Ω–∫–∞ {call_id}")
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∑–≤—ñ–Ω–∫–∞
                response = zadarma_api.call(f'/v1/statistics/', 
                                          {'start': call_info['start_time'], 'end': time.time()}, 
                                          'GET')
                result = json.loads(response.text)
                
                if result.get('status') == 'success':
                    # –®—É–∫–∞—î–º–æ –Ω–∞—à –¥–∑–≤—ñ–Ω–æ–∫ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ
                    calls = result.get('calls', [])
                    our_call = None
                    
                    for call in calls:
                        if (call.get('to') == call_info['target_number'] and 
                            call.get('from') == ZADARMA_MAIN_PHONE):
                            our_call = call
                            break
                    
                    if our_call:
                        disposition = our_call.get('disposition', '')
                        call_status = our_call.get('status', '')
                        
                        logger.info(f"üìû –°—Ç–∞—Ç—É—Å –¥–∑–≤—ñ–Ω–∫–∞ {call_id}: {call_status}, disposition: {disposition}")
                        
                        if disposition == 'rejected':
                            # ‚úÖ –£–°–ü–Ü–•: –î–∑–≤—ñ–Ω–æ–∫ —Å–∫–∏–Ω—É—Ç–æ –ø—ñ—Å–ª—è –≥—É–¥–∫—ñ–≤ - –≤–æ—Ä–æ—Ç–∞/—Ö–≤—ñ—Ä—Ç–∫–∞ –≤—ñ–¥–∫—Ä–∏—é—Ç—å—Å—è!
                            self._handle_call_rejected(call_id)
                            return
                        elif disposition in ['busy', 'failed', 'no-answer', 'cancel']:
                            # ‚ùå –ù–ï–í–î–ê–ß–ê: –î–∑–≤—ñ–Ω–æ–∫ –Ω–µ –¥—ñ–π—à–æ–≤ –∞–±–æ –Ω–æ–º–µ—Ä –∑–∞–π–Ω—è—Ç–∏–π
                            self._handle_call_failed(call_id, disposition)
                            return
                        elif disposition == 'answered':
                            # ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –î–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                            self._handle_call_answered(call_id)
                            return
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –¥–∑–≤—ñ–Ω–∫–∞ {call_id}: {e}")
            
            time.sleep(check_interval)
        
        # –¢–∞–π–º–∞—É—Ç - —Å—Ç–∞—Ç—É—Å –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π
        self._handle_call_timeout(call_id)
        
    def _handle_call_rejected(self, call_id):
        """–û–±—Ä–æ–±–ª—è—î —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–∏–π –¥–∑–≤—ñ–Ω–æ–∫ - –¶–ï –£–°–ü–Ü–•!"""
        call_info = self.active_calls.get(call_id)
        if not call_info:
            return
            
        logger.info(f"‚úÖ –î–∑–≤—ñ–Ω–æ–∫ {call_id} —Å–∫–∏–Ω—É—Ç–æ –ø—ñ—Å–ª—è –≥—É–¥–∫—ñ–≤ - {call_info['action_type']} –±—É–¥–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ!")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
        action_name = "—Ö–≤—ñ—Ä—Ç–∫—É" if call_info['action_type'] == 'hvirtka' else "–≤–æ—Ä–æ—Ç–∞"
        success_message = f"‚úÖ {action_name.capitalize()} –±—É–¥–µ –≤—ñ–¥—á–∏–Ω–µ–Ω–æ –∑–∞ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥."
        
        send_telegram_message(call_info['chat_id'], success_message)
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        call_info['status'] = 'success'
        call_info['disposition'] = 'rejected'
        call_info['end_time'] = time.time()
        self.call_history.append(call_info)
        del self.active_calls[call_id]
        
    def _handle_call_failed(self, call_id, disposition):
        """–û–±—Ä–æ–±–ª—è—î –Ω–µ–≤–¥–∞–ª–∏–π –¥–∑–≤—ñ–Ω–æ–∫ - –≤–æ—Ä–æ—Ç–∞ –ù–ï –≤—ñ–¥–∫—Ä–∏—é—Ç—å—Å—è"""
        call_info = self.active_calls.get(call_id)
        if not call_info:
            return
            
        logger.warning(f"‚ùå –î–∑–≤—ñ–Ω–æ–∫ {call_id} –Ω–µ –≤–¥–∞–≤—Å—è: {disposition} - –≤–æ—Ä–æ—Ç–∞ –ù–ï –≤—ñ–¥–∫—Ä–∏—é—Ç—å—Å—è")
        
        action_name = "—Ö–≤—ñ—Ä—Ç–∫—É" if call_info['action_type'] == 'hvirtka' else "–≤–æ—Ä–æ—Ç–∞"
        
        # –†—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–º–∏–ª–∫–∏
        if disposition == 'busy':
            error_message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É."
        elif disposition == 'no-answer':
            error_message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ú–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–≤'—è–∑–∫—É."
        elif disposition == 'failed':
            error_message = f"‚ùå –î–∑–≤—ñ–Ω–æ–∫ –Ω–∞ {action_name} –Ω–µ –ø—Ä–æ–π—à–æ–≤. –ü—Ä–æ–±–ª–µ–º–∏ –∑–≤'—è–∑–∫—É."
        else:
            error_message = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {action_name}. –ü—Ä–∏—á–∏–Ω–∞: {disposition}"
        
        error_message += f"\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º <a href=\"tel:+380733103110\">+380733103110</a>"
        
        send_telegram_message(call_info['chat_id'], error_message)
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        call_info['status'] = 'failed'
        call_info['disposition'] = disposition
        call_info['end_time'] = time.time()
        self.call_history.append(call_info)
        del self.active_calls[call_id]
        
    def _handle_call_answered(self, call_id):
        """–û–±—Ä–æ–±–ª—è—î –ø—Ä–∏–π–Ω—è—Ç–∏–π –¥–∑–≤—ñ–Ω–æ–∫ - —Ü–µ –ü–†–û–ë–õ–ï–ú–ê –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö!"""
        call_info = self.active_calls.get(call_id)
        if not call_info:
            return
            
        logger.error(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –î–∑–≤—ñ–Ω–æ–∫ {call_id} –±—É–ª–æ –ü–†–ò–ô–ù–Ø–¢–û –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è!")
        
        action_name = "—Ö–≤—ñ—Ä—Ç–∫—É" if call_info['action_type'] == 'hvirtka' else "–≤–æ—Ä–æ—Ç–∞"
        warning_message = (
            f"‚ö†Ô∏è –î–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {action_name} –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ.\n"
            f"–ú–æ–∂–ª–∏–≤–æ, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n"
            f"–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: <a href=\"tel:+380733103110\">+380733103110</a>"
        )
        
        send_telegram_message(call_info['chat_id'], warning_message)
        
        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö
        admin_alert = f"üö® –ü–†–û–ë–õ–ï–ú–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø: –î–∑–≤—ñ–Ω–æ–∫ –Ω–∞ {action_name} ({call_info['target_number']}) –±—É–ª–æ –ü–†–ò–ô–ù–Ø–¢–û –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—é."
        send_telegram_message(ADMIN_USER_ID, admin_alert)
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        call_info['status'] = 'answered'
        call_info['disposition'] = 'answered'
        call_info['end_time'] = time.time()
        self.call_history.append(call_info)
        del self.active_calls[call_id]
        
    def _handle_call_timeout(self, call_id):
        """–û–±—Ä–æ–±–ª—è—î —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É - –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        call_info = self.active_calls.get(call_id)
        if not call_info:
            return
            
        logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–∑–≤—ñ–Ω–∫–∞ {call_id} - —Å—Ç–∞—Ç—É—Å –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π")
        
        action_name = "—Ö–≤—ñ—Ä—Ç–∫—É" if call_info['action_type'] == 'hvirtka' else "–≤–æ—Ä–æ—Ç–∞"
        timeout_message = (
            f"‚è∞ –°—Ç–∞—Ç—É—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {action_name} –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ—ñ–∑–∏—á–Ω–æ.\n\n"
            f"–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ: <a href=\"tel:+380733103110\">+380733103110</a>"
        )
        
        send_telegram_message(call_info['chat_id'], timeout_message)
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        call_info['status'] = 'timeout'
        call_info['end_time'] = time.time()
        self.call_history.append(call_info)
        del self.active_calls[call_id]

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä —Å—Ç–∞—Ç—É—Å—É –¥–∑–≤—ñ–Ω–∫—ñ–≤
call_tracker = CallStatusTracker()

def send_telegram_message(chat_id, message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –∑ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id, 
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logger.info(f"üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∫–æ–¥ {response.status_code})")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def send_error_to_admin(message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–¥–º—ñ–Ω—É"""
    send_telegram_message(ADMIN_USER_ID, f"üîß ADMIN: {message}")

def make_zadarma_call_with_tracking(to_number: str, user_id: int, chat_id: int, action_type: str) -> dict:
    """
    –†–æ–±–∏—Ç—å callback –¥–∑–≤—ñ–Ω–æ–∫ —á–µ—Ä–µ–∑ API –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º —Å—Ç–∞—Ç—É—Å—É
    
    Args:
        to_number: –Ω–æ–º–µ—Ä –¥–ª—è –¥–∑–≤—ñ–Ω–∫–∞
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        chat_id: ID —á–∞—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        action_type: 'hvirtka' –∞–±–æ 'vorota'
        
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ –ø–æ–ª—è–º–∏ success, call_id, message
    """
    logger.info(f"üìû –†–æ–±–∏–º–æ –¥–∑–≤—ñ–Ω–æ–∫ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º –Ω–∞ –Ω–æ–º–µ—Ä: {to_number}")
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É
    if not validate_phone_number(to_number):
        error_msg = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É: {to_number}"
        logger.error(f"‚ùå {error_msg}")
        return {"success": False, "message": error_msg}
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    formatted_to = format_phone_for_zadarma(to_number)
    logger.info(f"üìû –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä TO: {formatted_to}")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä
    from_number = ZADARMA_MAIN_PHONE
    logger.info(f"üìû –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FROM –Ω–æ–º–µ—Ä: {from_number}")
    
    try:
        params = {
            "from": from_number,
            "to": formatted_to,
        }
        
        # –†–æ–±–∏–º–æ API –∑–∞–ø–∏—Ç
        response = zadarma_api.call('/v1/request/callback/', params, 'GET')
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        try:
            result = json.loads(response.text)
        except json.JSONDecodeError:
            error_msg = f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å API: {response.text}"
            logger.error(f"‚ùå {error_msg}")
            return {"success": False, "message": error_msg}
        
        logger.info("üîç CRITICAL: Before status check in zadarma_api.py")
        logger.info("üîç CRITICAL: result content: " + str(result))
        if result.get("status") == "success":
            logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç –¥–∑–≤—ñ–Ω–∫–∞ –∑ {from_number} –Ω–∞ {formatted_to}")
            logger.info(f"üìã –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
            # (Zadarma –Ω–µ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î call_id –≤ callback API)
            call_id = f"{user_id}_{int(time.time())}"
            
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
            call_tracker.register_call(call_id, user_id, chat_id, action_type, formatted_to)
            
            return {
                "success": True, 
                "call_id": call_id,
                "message": "–î–∑–≤—ñ–Ω–æ–∫ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ, –æ—á—ñ–∫—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."
            }
        else:
            error_msg = result.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
            logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API –¥–∑–≤—ñ–Ω–∫–∞: {error_msg}")
            return {"success": False, "message": error_msg}
            
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É API: {str(e)}"
        logger.exception(f"‚ùå {error_msg}")
        return {"success": False, "message": error_msg}

def make_zadarma_call(to_number: str) -> bool:
    """
    –°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    –†–æ–±–∏—Ç—å –¥–∑–≤—ñ–Ω–æ–∫ –±–µ–∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
    """
    result = make_zadarma_call_with_tracking(to_number, 0, 0, "legacy")
    return result["success"]

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
def test_zadarma_auth():
    """–¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º API...")
    
    try:
        response = zadarma_api.call('/v1/info/balance/', {}, 'GET')
        result = json.loads(response.text)
        
        if result.get("status") == "success":
            balance = result.get("balance", "–Ω–µ–≤—ñ–¥–æ–º–æ")
            currency = result.get("currency", "")
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î. –ë–∞–ª–∞–Ω—Å: {balance} {currency}")
            return True
        else:
            logger.error(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î: {result}")
            return False
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}")
        return False

def get_call_statistics(hours=24):
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –≥–æ–¥–∏–Ω–∏"""
    try:
        end_time = time.time()
        start_time = end_time - (hours * 3600)
        
        params = {
            'start': int(start_time),
            'end': int(end_time)
        }
        
        response = zadarma_api.call('/v1/statistics/', params, 'GET')
        result = json.loads(response.text)
        
        if result.get("status") == "success":
            calls = result.get('calls', [])
            logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {len(calls)} –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–∞ {hours} –≥–æ–¥–∏–Ω")
            return calls
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result}")
            return []
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∑–≤—ñ–Ω–∫—ñ–≤: {e}")
        return []

def cleanup_old_calls():
    """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—É —ñ—Å—Ç–æ—Ä—ñ—é –¥–∑–≤—ñ–Ω–∫—ñ–≤ (–∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100)"""
    if len(call_tracker.call_history) > 100:
        old_count = len(call_tracker.call_history) - 100
        call_tracker.call_history = call_tracker.call_history[-100:]
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {old_count} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–∑–≤—ñ–Ω–∫—ñ–≤")

# –ó–∞–ø—É—Å–∫ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
def start_cleanup_scheduler():
    """–ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è"""
    import threading
    
    def cleanup_loop():
        while True:
            time.sleep(6 * 3600)  # 6 –≥–æ–¥–∏–Ω
            cleanup_old_calls()
    
    thread = threading.Thread(target=cleanup_loop)
    thread.daemon = True
    thread.start()
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ–æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–∑–≤—ñ–Ω–∫—ñ–≤")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if __name__ != "__main__":
    start_cleanup_scheduler()
