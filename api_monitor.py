#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
api_monitor.py - –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ API –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±–∞–ª–∞–Ω—Å–∏
"""

import requests
import json
import logging
import time
from config import (
    ZADARMA_API_KEY, ZADARMA_API_SECRET,
    WLAUNCH_API_KEY, COMPANY_ID
)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Telegram —Å–ø–æ–≤—ñ—â—É–≤–∞—á
try:
    from telegram_notifier import TelegramNotifier
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ö†Ô∏è Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class APIMonitor:
    def __init__(self, enable_notifications=True):
        self.results = {}
        self.notifier = TelegramNotifier() if TELEGRAM_AVAILABLE and enable_notifications else None
    
    def test_zadarma_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Zadarma API –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –±–∞–ª–∞–Ω—Å—É"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ zadarma_api –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            from zadarma_api import zadarma_api
            
            response = zadarma_api.call('/v1/info/balance/', {}, 'GET')
            result = json.loads(response.text)
            
            if result.get("status") == "success":
                balance = result.get("balance", "–Ω–µ–≤—ñ–¥–æ–º–æ")
                currency = result.get("currency", "")
                
                # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —É SMS Fly
                balance_msg = f"–ë–∞–ª–∞–Ω—Å: {balance} {currency}" if currency else f"–ë–∞–ª–∞–Ω—Å: {balance}"
                
                self.results['zadarma'] = {
                    'status': 'OK', 
                    'message': balance_msg,
                    'balance': balance,
                    'currency': currency
                }
                logger.info(f"‚úÖ Zadarma API –ø—Ä–∞—Ü—é—î. {balance_msg}")
                return True
            else:
                error_msg = result.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
                self.results['zadarma'] = {'status': 'ERROR', 'message': f'API –ø–æ–º–∏–ª–∫–∞: {error_msg}'}
                logger.error(f"‚ùå Zadarma API –ø–æ–º–∏–ª–∫–∞: {error_msg}")
                return False
                
        except Exception as e:
            error_msg = str(e)
            self.results['zadarma'] = {'status': 'ERROR', 'message': f'–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {error_msg}'}
            logger.error(f"‚ùå Zadarma API –≤–∏–∫–ª—é—á–µ–Ω–Ω—è: {error_msg}")
            return False
    
    def test_wlaunch_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WLaunch API –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
        try:
            url = f"https://api.wlaunch.net/v1/company/{COMPANY_ID}/branch/"
            params = {
                'active': 'true',
                'sort': 'ordinal',
                'page': '0',
                'size': '20'
            }
            headers = {
                'Authorization': f'Bearer {WLAUNCH_API_KEY}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'content' in data:
                    branches = len(data['content'])
                    total = data.get('page', {}).get('total_elements', 0)
                    
                    if data['content']:
                        branch_name = data['content'][0]['name']
                        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                        active_branches = sum(1 for b in data['content'] if b.get('active', False))
                        
                        message = f"–§—ñ–ª—ñ–π: {branches} ({active_branches} –∞–∫—Ç–∏–≤–Ω–∏—Ö) - {branch_name}"
                    else:
                        message = f"–§—ñ–ª—ñ–π: {branches} (–ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫)"
                    
                    self.results['wlaunch'] = {
                        'status': 'OK', 
                        'message': message,
                        'branches_count': branches,
                        'active_branches': active_branches if data['content'] else 0
                    }
                    return True
            
            self.results['wlaunch'] = {
                'status': 'ERROR', 
                'message': f'HTTP {response.status_code}'
            }
            return False
            
        except Exception as e:
            self.results['wlaunch'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_sms_fly_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è SMS Fly API v2 –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
        try:
            try:
                from config import SMS_FLY_PASSWORD
            except ImportError:
                self.results['sms_fly'] = {'status': 'NOT_CONFIGURED', 'message': 'SMS Fly –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}
                return None
            
            url = "https://sms-fly.ua/api/v2/api.php"
            headers = {'Content-Type': 'application/json'}
            
            payload = {
                "auth": {
                    "key": SMS_FLY_PASSWORD
                },
                "action": "GETBALANCE",
                "data": {}
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=10)
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if data.get('success') == 1:
                        balance = data.get('data', {}).get('balance', '–Ω–µ–≤—ñ–¥–æ–º–æ')
                        
                        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä—ñ–≤–µ–Ω—å –±–∞–ª–∞–Ω—Å—É
                        try:
                            balance_float = float(balance)
                            if balance_float < 10:
                                balance_status = "‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å"
                            elif balance_float < 50:
                                balance_status = "üü° –ü–æ–º—ñ—Ä–Ω–∏–π –±–∞–ª–∞–Ω—Å"
                            else:
                                balance_status = "‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—ñ–π –±–∞–ª–∞–Ω—Å"
                        except:
                            balance_status = ""
                        
                        message = f"–ë–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω {balance_status}".strip()
                        
                        self.results['sms_fly'] = {
                            'status': 'OK', 
                            'message': message,
                            'balance': balance,
                            'currency': '–≥—Ä–Ω'
                        }
                        return True
                    else:
                        error_info = data.get('error', {})
                        error_code = error_info.get('code', 'Unknown')
                        self.results['sms_fly'] = {'status': 'ERROR', 'message': f'API –ø–æ–º–∏–ª–∫–∞: {error_code}'}
                        return False
                except json.JSONDecodeError:
                    self.results['sms_fly'] = {'status': 'ERROR', 'message': '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å'}
                    return False
            
            self.results['sms_fly'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['sms_fly'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_telegram_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram Bot API –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
        try:
            from config import TELEGRAM_TOKEN
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    bot_info = data['result']
                    bot_name = bot_info.get("first_name", "Unknown")
                    username = bot_info.get("username", "")
                    
                    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ username —è–∫—â–æ —î
                    if username:
                        message = f"–ë–æ—Ç: {bot_name} (@{username})"
                    else:
                        message = f"–ë–æ—Ç: {bot_name}"
                    
                    self.results['telegram'] = {
                        'status': 'OK', 
                        'message': message,
                        'bot_name': bot_name,
                        'username': username
                    }
                    return True
            
            self.results['telegram'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['telegram'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def get_financial_summary(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –±–∞–ª–∞–Ω—Å—ñ–≤"""
        financial_info = []
        
        # Zadarma –±–∞–ª–∞–Ω—Å
        if 'zadarma' in self.results and self.results['zadarma']['status'] == 'OK':
            zadarma_data = self.results['zadarma']
            if 'balance' in zadarma_data:
                balance = zadarma_data['balance']
                currency = zadarma_data.get('currency', '')
                financial_info.append(f"üìû Zadarma: {balance} {currency}")
        
        # SMS Fly –±–∞–ª–∞–Ω—Å
        if 'sms_fly' in self.results and self.results['sms_fly']['status'] == 'OK':
            sms_data = self.results['sms_fly']
            if 'balance' in sms_data:
                balance = sms_data['balance']
                currency = sms_data.get('currency', '')
                financial_info.append(f"üì± SMS Fly: {balance} {currency}")
        
        if financial_info:
            return "üí∞ –§–Ü–ù–ê–ù–°–û–í–ò–ô –°–¢–ê–¢–£–°:\n" + "\n".join(f"   {info}" for info in financial_info)
        
        return ""
    
    def run_all_tests(self, send_notifications=True):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤ API –∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏"""
        logger.info("üîç –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API...")
        
        tests = [
            ('Zadarma API', self.test_zadarma_api),
            ('WLaunch API', self.test_wlaunch_api),
            ('SMS Fly API', self.test_sms_fly_api),
            ('Telegram API', self.test_telegram_api)
        ]
        
        for name, test_func in tests:
            logger.info(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {name}...")
            try:
                test_func()
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {name}: {e}")
                self.results[name.lower().replace(' ', '_')] = {'status': 'ERROR', 'message': str(e)}
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        if send_notifications and self.notifier:
            try:
                notifications = self.notifier.process_api_results(self.results)
                if notifications:
                    logger.info(f"üì± –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {', '.join(notifications)}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")
        
        return self.results
    
    def get_summary(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if not self.results:
            return "‚ùì –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å"
        
        ok_count = sum(1 for r in self.results.values() if r['status'] == 'OK')
        error_count = sum(1 for r in self.results.values() if r['status'] == 'ERROR')
        not_configured = sum(1 for r in self.results.values() if r['status'] == 'NOT_CONFIGURED')
        
        total = len(self.results)
        
        if error_count == 0 and ok_count == total:
            return f"üèÜ –í–°–Ü API –ü–†–ê–¶–Æ–Æ–¢–¨ –Ü–î–ï–ê–õ–¨–ù–û! ({ok_count}/{total})"
        elif error_count == 0:
            return f"‚úÖ –í—Å—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ API –ø—Ä–∞—Ü—é—é—Ç—å ({ok_count}/{total})"
        elif error_count <= 1:
            return f"‚ö†Ô∏è –ù–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ API ({ok_count}/{total} –ø—Ä–∞—Ü—é—é—Ç—å)"
        else:
            return f"‚ùå –°–µ—Ä–π–æ–∑–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ API ({error_count}/{total} –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å)"
    
    def get_detailed_report(self):
        """–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–æ–∂–Ω–æ–º—É API"""
        if not self.results:
            return "–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
        
        report = []
        for api_name, result in self.results.items():
            status_emoji = {
                'OK': '‚úÖ',
                'ERROR': '‚ùå', 
                'NOT_CONFIGURED': '‚öôÔ∏è'
            }.get(result['status'], '‚ùì')
            
            report.append(f"{status_emoji} {api_name.upper()}: {result['message']}")
        
        return "\n".join(report)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è CLI –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    monitor = APIMonitor()
    results = monitor.run_all_tests()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø API:")
    print("=" * 50)
    print(monitor.get_detailed_report())
    print("=" * 50)
    
    # –î–æ–¥–∞—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫
    financial_summary = monitor.get_financial_summary()
    if financial_summary:
        print(financial_summary)
        print("=" * 50)
    
    print(monitor.get_summary())
    print("=" * 50)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É
    error_count = sum(1 for r in results.values() if r['status'] == 'ERROR')
    return min(error_count, 10)

if __name__ == "__main__":
    exit(main())