#!/bin/bash
# –î–û–î–ê–í–ê–ù–ù–Ø –ü–ï–†–ï–í–Ü–†–ö–ò API –î–û –°–ò–°–¢–ï–ú–ò –û–ë–°–õ–£–ì–û–í–£–í–ê–ù–ù–Ø

cd /home/gomoncli/zadarma

echo "üöÄ –ó–ê–ü–û–ß–ê–¢–ö–û–í–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ API..."
echo "=============================================="

# 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–æ–¥—É–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API
echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è api_monitor.py..."
cat > api_monitor.py << 'EOD'
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
api_monitor.py - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö API —Å–µ—Ä–≤—ñ—Å—ñ–≤
"""

import requests
import json
import logging
import time
from config import (
    ZADARMA_API_KEY, ZADARMA_API_SECRET,
    WLAUNCH_API_KEY, COMPANY_ID
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class APIMonitor:
    def __init__(self):
        self.results = {}
    
    def test_zadarma_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Zadarma API"""
        try:
            from zadarma_api import test_zadarma_auth
            if test_zadarma_auth():
                self.results['zadarma'] = {'status': 'OK', 'message': 'API –ø—Ä–∞—Ü—é—î'}
                return True
            else:
                self.results['zadarma'] = {'status': 'ERROR', 'message': '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó'}
                return False
        except Exception as e:
            self.results['zadarma'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_wlaunch_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WLaunch API"""
        try:
            url = "https://wlaunch.wlapi.net/api/v1/companies"
            headers = {
                'Authorization': f'Bearer {WLAUNCH_API_KEY}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'data' in data:
                    self.results['wlaunch'] = {'status': 'OK', 'message': f'API –ø—Ä–∞—Ü—é—î, –∫–æ–º–ø–∞–Ω—ñ–π: {len(data["data"])}'}
                    return True
            
            self.results['wlaunch'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['wlaunch'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_sms_fly_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è SMS Fly API"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î SMS Fly –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
            try:
                from config import SMS_FLY_LOGIN, SMS_FLY_PASSWORD
            except ImportError:
                self.results['sms_fly'] = {'status': 'NOT_CONFIGURED', 'message': 'SMS Fly –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}
                return None
            
            url = "http://sms-fly.ua/api/api.php"
            params = {
                'login': SMS_FLY_LOGIN,
                'password': SMS_FLY_PASSWORD,
                'action': 'getbalance'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                result = response.text.strip()
                if result.replace('.', '').isdigit():
                    balance = float(result)
                    self.results['sms_fly'] = {'status': 'OK', 'message': f'–ë–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω'}
                    return True
                else:
                    self.results['sms_fly'] = {'status': 'ERROR', 'message': f'–í—ñ–¥–ø–æ–≤—ñ–¥—å: {result}'}
                    return False
            
            self.results['sms_fly'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['sms_fly'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def test_telegram_api(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram Bot API"""
        try:
            from config import TELEGRAM_TOKEN
            
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    bot_info = data['result']
                    self.results['telegram'] = {'status': 'OK', 'message': f'–ë–æ—Ç: {bot_info["first_name"]}'}
                    return True
            
            self.results['telegram'] = {'status': 'ERROR', 'message': f'HTTP {response.status_code}'}
            return False
            
        except Exception as e:
            self.results['telegram'] = {'status': 'ERROR', 'message': str(e)}
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤ API"""
        logger.info("üîç –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API...")
        
        tests = [
            ('Zadarma API', self.test_zadarma_api),
            ('WLaunch API', self.test_wlaunch_api),
            ('SMS Fly API', self.test_sms_fly_api),
            ('Telegram API', self.test_telegram_api)
        ]
        
        for name, test_func in tests:
            logger.info(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {name}...")
            try:
                test_func()
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {name}: {e}")
                self.results[name.lower().replace(' ', '_')] = {'status': 'ERROR', 'message': str(e)}
        
        return self.results
    
    def get_summary(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if not self.results:
            return "‚ùì –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å"
        
        ok_count = sum(1 for r in self.results.values() if r['status'] == 'OK')
        error_count = sum(1 for r in self.results.values() if r['status'] == 'ERROR')
        not_configured = sum(1 for r in self.results.values() if r['status'] == 'NOT_CONFIGURED')
        
        total = len(self.results)
        
        if error_count == 0:
            return f"‚úÖ –í—Å—ñ API –ø—Ä–∞—Ü—é—é—Ç—å ({ok_count}/{total})"
        elif error_count <= 1:
            return f"‚ö†Ô∏è –ù–µ–∑–Ω–∞—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ API ({ok_count}/{total} –ø—Ä–∞—Ü—é—é—Ç—å)"
        else:
            return f"‚ùå –°–µ—Ä–π–æ–∑–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ API ({error_count}/{total} –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å)"
    
    def get_detailed_report(self):
        """–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–æ–∂–Ω–æ–º—É API"""
        if not self.results:
            return "–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
        
        report = []
        for api_name, result in self.results.items():
            status_emoji = {
                'OK': '‚úÖ',
                'ERROR': '‚ùå', 
                'NOT_CONFIGURED': '‚öôÔ∏è'
            }.get(result['status'], '‚ùì')
            
            report.append(f"{status_emoji} {api_name.upper()}: {result['message']}")
        
        return "\n".join(report)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è CLI –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    monitor = APIMonitor()
    results = monitor.run_all_tests()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø API:")
    print("=" * 40)
    print(monitor.get_detailed_report())
    print("=" * 40)
    print(monitor.get_summary())
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É
    error_count = sum(1 for r in results.values() if r['status'] == 'ERROR')
    return min(error_count, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 –¥–ª—è exit code

if __name__ == "__main__":
    exit(main())
EOD

chmod +x api_monitor.py
echo "‚úÖ api_monitor.py —Å—Ç–≤–æ—Ä–µ–Ω–æ"

# 2. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–º—ñ–Ω–∏ config.py - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ª–∞—à—Ç—É—î –≤—Ä—É—á–Ω—É
echo "‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è config.py (–∑—Ä–æ–±–ª–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º)"

# 3. –û–Ω–æ–≤–∏—Ç–∏ daily_maintenance.sh –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—è API –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
echo "üîß –î–æ–¥–∞–≤–∞–Ω–Ω—è API –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –¥–æ daily_maintenance.sh..."

# –°—Ç–≤–æ—Ä–∏—Ç–∏ backup
cp daily_maintenance.sh daily_maintenance.sh.backup.$(date +%Y%m%d_%H%M%S)

# –î–æ–¥–∞—Ç–∏ API —Å–µ–∫—Ü—ñ—é –¥–æ daily_maintenance.sh
cat >> daily_maintenance.sh << 'EOD'

# ============================================
# –ß–ê–°–¢–ò–ù–ê 6: –ú–û–ù–Ü–¢–û–†–ò–ù–ì API –°–ï–†–í–Ü–°–Ü–í
# ============================================

log_message "üåê –ú–û–ù–Ü–¢–û–†–ò–ù–ì API –°–ï–†–í–Ü–°–Ü–í"
log_message "========================="

cd "$ZADARMA_DIR"

# 6.1 –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
log_message "1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
if python3 api_monitor.py > /tmp/api_test_output.txt 2>&1; then
    API_EXIT_CODE=$?
    log_message "‚úÖ API —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–∫–æ–¥: $API_EXIT_CODE)"
    
    # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    while IFS= read -r line; do
        log_message "   $line"
    done < /tmp/api_test_output.txt
    
    # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏ API - –¥–æ–¥–∞—î–º–æ –¥–æ –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    if [ "$API_EXIT_CODE" -gt 0 ]; then
        ERROR_COUNT=$((ERROR_COUNT + API_EXIT_CODE))
        log_message "‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ $API_EXIT_CODE –ø—Ä–æ–±–ª–µ–º –∑ API"
    fi
else
    log_message "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É API —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
    ERROR_COUNT=$((ERROR_COUNT + 5))
fi

# 6.2 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö API –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
log_message "2Ô∏è‚É£ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API..."

# Zadarma –±–∞–ª–∞–Ω—Å (—è–∫—â–æ API –ø—Ä–∞—Ü—é—î)
if python3 -c "from zadarma_api import test_zadarma_auth; exit(0 if test_zadarma_auth() else 1)" 2>/dev/null; then
    log_message "‚úÖ Zadarma API –¥–æ—Å—Ç—É–ø–Ω–∏–π"
else
    log_message "‚ùå Zadarma API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
fi

# WLaunch –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
WLAUNCH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://wlaunch.wlapi.net/api/v1/companies" \
    -H "Authorization: Bearer $(python3 -c "from config import WLAUNCH_API_KEY; print(WLAUNCH_API_KEY)" 2>/dev/null)" 2>/dev/null || echo "000")

if [ "$WLAUNCH_STATUS" = "200" ]; then
    log_message "‚úÖ WLaunch API –¥–æ—Å—Ç—É–ø–Ω–∏–π (HTTP: $WLAUNCH_STATUS)"
else
    log_message "‚ùå WLaunch API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (HTTP: $WLAUNCH_STATUS)"
fi

rm -f /tmp/api_test_output.txt
EOD

echo "‚úÖ daily_maintenance.sh –æ–Ω–æ–≤–ª–µ–Ω–æ"

# 4. –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç—ñ–ª—å–∫–∏ API
echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è api_check.sh..."

cat > api_check.sh << 'EOD'
#!/bin/bash
# –®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê –í–°–Ü–• API

echo "üåê –ü–ï–†–ï–í–Ü–†–ö–ê API –°–ï–†–í–Ü–°–Ü–í $(date '+%Y-%m-%d %H:%M:%S')"
echo "=================================="

cd /home/gomoncli/zadarma

if [ -f "api_monitor.py" ]; then
    python3 api_monitor.py
else
    echo "‚ùå api_monitor.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    exit 1
fi
EOD

chmod +x api_check.sh
echo "‚úÖ api_check.sh —Å—Ç–≤–æ—Ä–µ–Ω–æ"

# 5. –î–æ–¥–∞—Ç–∏ API –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–æ cron (–∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏)
echo "‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫..."

# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤–∂–µ —î –∑–∞–ø–∏—Å –≤ crontab
CRON_EXISTS=$(crontab -l 2>/dev/null | grep -c "api_check.sh" || echo "0")

if [ "$CRON_EXISTS" -eq 0 ]; then
    # –î–æ–¥–∞—Ç–∏ –¥–æ crontab
    (crontab -l 2>/dev/null; echo "0 */2 * * * /home/gomoncli/zadarma/api_check.sh >> /home/gomoncli/api_monitor.log 2>&1") | crontab -
    echo "‚úÖ Cron –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏"
else
    echo "‚ÑπÔ∏è Cron –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è API –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫"
fi

# 6. –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–≤—ñ—Ç
echo "üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É..."
python3 api_monitor.py > initial_api_report.txt 2>&1
echo "‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ initial_api_report.txt"

echo ""
echo "üéâ –°–ò–°–¢–ï–ú–ê –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ API –°–¢–í–û–†–ï–ù–ê!"
echo "====================================="
echo ""
echo "üìã –ù–û–í–Ü –ö–û–ú–ê–ù–î–ò:"
echo "   ./api_monitor.py           - –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö API"
echo "   ./api_check.sh            - –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ API"
echo ""
echo "‚è∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–Ü –ü–ï–†–ï–í–Ü–†–ö–ò:"
echo "   –ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏           - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö API"
echo "   –©–æ–¥–Ω—è –æ 06:00            - API –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ —Å–∫–ª–∞–¥—ñ –ø–æ–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"
echo ""
echo "üìä –ü–ï–†–ï–í–Ü–†–ò–¢–ò –ó–ê–†–ê–ó:"
echo "   python3 api_monitor.py"
echo ""
echo "‚öôÔ∏è –î–õ–Ø –ü–û–í–ù–û–ì–û –§–£–ù–ö–¶–Ü–û–ù–£–í–ê–ù–ù–Ø –î–û–î–ê–ô–¢–ï –í config.py:"
echo "   # SMS Fly API"
echo "   SMS_FLY_LOGIN = \"–≤–∞—à_–ª–æ–≥—ñ–Ω\""
echo "   SMS_FLY_PASSWORD = \"–≤–∞—à_–ø–∞—Ä–æ–ª—å\""
echo "   SMS_FLY_SENDER = \"INFO\""
echo ""
echo "   # Telegram Bot API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"
echo "   TELEGRAM_TOKEN = \"–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞\""
echo "   TELEGRAM_CHAT_ID = \"–≤–∞—à_chat_id\""
echo ""
echo "üìÅ –§–ê–ô–õ–ò –õ–û–ì–Ü–í:"
echo "   /home/gomoncli/api_monitor.log        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
echo "   ./initial_api_report.txt              - –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–≤—ñ—Ç"
echo ""
echo "üîç –ó–ê–ü–£–°–¢–ò–¢–ò –ü–ï–†–®–ò–ô –¢–ï–°–¢:"
echo "   ./api_check.sh"
