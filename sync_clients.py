# sync_clients.py - Unified version with logging
import requests
import logging
import os
from datetime import datetime, timedelta
from user_db import update_clients, add_or_update_client
from config import COMPANY_ID, WLAUNCH_API_KEY, ADMIN_USER_ID, TELEGRAM_TOKEN

logger = logging.getLogger(__name__)

API_BASE = "https://api.wlaunch.net/v1"
FIRST_SYNC_FLAG_FILE = "/home/gomoncli/zadarma/.first_sync_done"

def get_clients(created_start=None, created_end=None, page=0, size=1000):
    """–û—Ç—Ä–∏–º—É—î –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ API –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó"""
    headers = {
        "Authorization": f"Bearer {WLAUNCH_API_KEY}",
        "Accept": "application/json"
    }
    params = {
        "sort": "created,desc",
        "page": page,
        "size": size,
    }
    
    if created_start and created_end:
        params["createdStart"] = created_start
        params["createdEnd"] = created_end
        
    logger.info(f"üåê –ó–∞–ø–∏—Ç –¥–æ API: page={page}, size={size}, period={created_start} to {created_end}")
    
    try:
        response = requests.get(f"{API_BASE}/company/{COMPANY_ID}/client", headers=headers, params=params, timeout=30)
        response.raise_for_status()
        data = response.json()
        
        content = data.get("content", [])
        page_info = data.get("page", {})
        total_pages = page_info.get("total_pages", 1)
        current_page = page_info.get("number", 0)
        
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(content)} –∫–ª—ñ—î–Ω—Ç—ñ–≤ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page + 1}/{total_pages})")
        
        return {
            "content": content,
            "total_pages": total_pages,
            "current_page": current_page,
            "total_elements": page_info.get("total_elements", 0)
        }
        
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API –∑–∞–ø–∏—Ç—É: {e}")
        send_admin_error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ wlaunch: {e}")
        return {"content": [], "total_pages": 0, "current_page": 0, "total_elements": 0}

def fetch_all_clients_first_time():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É"""
    logger.info("üîÑ –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
    
    try:
        page = 0
        size = 100  # –ú–µ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
        total_clients = 0
        
        while True:
            result = get_clients(page=page, size=size)
            clients = result["content"]
            total_pages = result["total_pages"]
            
            if not clients:
                break
                
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ
            for client in clients:
                try:
                    add_or_update_client(
                        client_id=client.get("id"),
                        first_name=client.get("first_name") or "",
                        last_name=client.get("last_name") or "",
                        phone=client.get("phone") or ""
                    )
                    total_clients += 1
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ {client.get('id')}: {e}")
            
            logger.info(f"üì• –û–±—Ä–æ–±–ª–µ–Ω–æ {len(clients)} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page + 1}/{total_pages}")
            
            page += 1
            if page >= total_pages:
                break
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –ø–µ—Ä—à–∏–π —Å–∏–Ω–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ
        with open(FIRST_SYNC_FLAG_FILE, 'w') as f:
            f.write(datetime.now().isoformat())
            
        logger.info(f"‚úÖ –ü–µ—Ä—à–∏–π —Å–∏–Ω–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        send_admin_error(f"‚úÖ –ü–µ—Ä—à–∏–π —Å–∏–Ω–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {total_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Å–∏–Ω–∫—É: {e}")
        send_admin_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Å–∏–Ω–∫—É: {e}")

def fetch_recent_clients():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É"""
    logger.info("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É...")
    
    try:
        now = datetime.utcnow()
        yesterday = now - timedelta(days=1)
        created_start = yesterday.strftime('%Y-%m-%dT%H:%M:%S.000Z')
        created_end = now.strftime('%Y-%m-%dT%H:%M:%S.999Z')
        
        logger.info(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {created_start} - {created_end}")
        
        page = 0
        total_new_clients = 0
        
        while True:
            result = get_clients(created_start, created_end, page=page, size=100)
            clients = result["content"]
            total_pages = result["total_pages"]
            
            if not clients:
                break
                
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
            for client in clients:
                try:
                    add_or_update_client(
                        client_id=client.get("id"),
                        first_name=client.get("first_name") or "",
                        last_name=client.get("last_name") or "",
                        phone=client.get("phone") or ""
                    )
                    total_new_clients += 1
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ {client.get('id')}: {e}")
            
            page += 1
            if page >= total_pages:
                break
        
        if total_new_clients > 0:
            logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {total_new_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É")
            send_admin_error(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {total_new_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É")
        else:
            logger.info("‚ÑπÔ∏è  –ù–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
        send_admin_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")

def is_first_sync_done():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–∏–∫–æ–Ω—É–≤–∞–≤—Å—è –ø–µ—Ä—à–∏–π —Å–∏–Ω–∫"""
    return os.path.exists(FIRST_SYNC_FLAG_FILE)

def send_admin_error(message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": ADMIN_USER_ID, "text": message}
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logger.info(f"üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É (–∫–æ–¥ {response.status_code})")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

def sync_clients():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
    
    try:
        if not is_first_sync_done():
            logger.info("üÜï –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤")
            fetch_all_clients_first_time()
        else:
            logger.info("üîÑ –ó–≤–∏—á–∞–π–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤")
            fetch_recent_clients()
            
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
        send_admin_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")

def force_full_sync():
    """–ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)"""
    logger.info("üîÑ –ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...")
    
    if os.path.exists(FIRST_SYNC_FLAG_FILE):
        os.remove(FIRST_SYNC_FLAG_FILE)
        logger.info("üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–ª–∞–≥ –ø–µ—Ä—à–æ–≥–æ —Å–∏–Ω–∫—É")
    
    sync_clients()

if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    sync_clients()