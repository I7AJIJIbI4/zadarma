# wlaunch_api.py - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
import requests
import logging
from config import WLAUNCH_API_KEY, COMPANY_ID
from user_db import add_or_update_client

logger = logging.getLogger("wlaunch_api")

# Wlaunch API –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –í–ò–ü–†–ê–í–õ–ï–ù–û –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
WLAUNCH_API_URL = "https://api.wlaunch.net/v1"  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–æ–º–µ–Ω —Ç–∞ –≤–µ—Ä—Å—ñ—è
WLAUNCH_API_BEARER = f"Bearer {WLAUNCH_API_KEY}"

HEADERS = {
    "Authorization": WLAUNCH_API_BEARER,
    "Accept": "application/json"
}

def fetch_all_clients():
    """–û—Ç—Ä–∏–º—É—î –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ Wlaunch API - –í–ò–ü–†–ê–í–õ–ï–ù–û –∑–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é"""
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ Wlaunch...")
    
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—ñ–π
        logger.info("üì• –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—ñ–π...")
        branches_url = f"{WLAUNCH_API_URL}/company/{COMPANY_ID}/branch/"
        branches_params = {
            "active": "true",
            "sort": "ordinal",
            "page": 0,
            "size": 100
        }
        
        response = requests.get(branches_url, headers=HEADERS, params=branches_params, timeout=15)
        response.raise_for_status()
        branches_data = response.json()
        
        logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(branches_data.get('content', []))} —Ñ—ñ–ª—ñ–π")
        
        total_clients = 0
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω—É —Ñ—ñ–ª—ñ—é
        for branch in branches_data.get("content", []):
            branch_id = branch.get("id")
            branch_name = branch.get("name")
            
            logger.info(f"üè¢ –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ—ñ–ª—ñ—é: {branch_name} ({branch_id})")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ notification_settings —Ü—ñ—î—ó —Ñ—ñ–ª—ñ—ó
            notification_settings = branch.get("notification_settings", {})
            telegram_contacts = notification_settings.get("telegram", [])
            
            logger.info(f"üì± –ó–Ω–∞–π–¥–µ–Ω–æ {len(telegram_contacts)} Telegram –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")
            
            # –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω Telegram –∫–æ–Ω—Ç–∞–∫—Ç —è–∫ –∫–ª—ñ—î–Ω—Ç–∞
            for contact in telegram_contacts:
                try:
                    chat_id = contact.get("chat_id")
                    phone = contact.get("phone")
                    
                    if chat_id and phone:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ chat_id —è–∫ client_id
                        add_or_update_client(
                            client_id=chat_id,
                            first_name="–ö–ª—ñ—î–Ω—Ç",  # –Ü–º'—è –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ API
                            last_name=f"–≤—ñ–¥ {branch_name}",
                            phone=phone
                        )
                        total_clients += 1
                        
                        logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: {chat_id} ({phone})")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –±–µ–∑ chat_id –∞–±–æ phone: {contact}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É {contact}: {e}")
            
            # –¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ (appointments) –¥–ª—è –±—ñ–ª—å—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            # –∞–ª–µ —Ü–µ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —á–∞—Å—É
            
        logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–æ–±–ª–µ–Ω–æ {total_clients} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        return total_clients
        
    except requests.exceptions.Timeout:
        logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –¥–æ Wlaunch API")
        return 0
    except requests.exceptions.RequestException as e:
        logger.error(f"üåê –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ Wlaunch API: {e}")
        return 0
    except Exception as e:
        logger.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
        return 0

def test_wlaunch_connection():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch API - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch API...")
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—ñ–π
        url = f"{WLAUNCH_API_URL}/company/{COMPANY_ID}/branch/"
        params = {"page": 0, "size": 1, "active": "true"}
        
        response = requests.get(url, headers=HEADERS, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        total_elements = data.get("page", {}).get("total_elements", 0)
        
        logger.info(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch –ø—Ä–∞—Ü—é—î. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—ñ–π: {total_elements}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä—à—É —Ñ—ñ–ª—ñ—é
        if data.get("content"):
            branch = data["content"][0]
            branch_name = branch.get("name")
            telegram_contacts = branch.get("notification_settings", {}).get("telegram", [])
            logger.info(f"üè¢ –ü–µ—Ä—à–∞ —Ñ—ñ–ª—ñ—è: {branch_name}, Telegram –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤: {len(telegram_contacts)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Wlaunch API: {e}")
        return False

def find_client_by_phone(phone):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
    try:
        logger.info(f"üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch –∑–∞ –Ω–æ–º–µ—Ä–æ–º: {phone}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—ñ–π
        url = f"{WLAUNCH_API_URL}/company/{COMPANY_ID}/branch/"
        params = {
            "page": 0,
            "size": 100,
            "active": "true"
        }
        
        response = requests.get(url, headers=HEADERS, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        branches = data.get("content", [])
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        normalized_search = ''.join(filter(str.isdigit, phone))
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö —Ñ—ñ–ª—ñ—è—Ö
        for branch in branches:
            notification_settings = branch.get("notification_settings", {})
            telegram_contacts = notification_settings.get("telegram", [])
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω Telegram –∫–æ–Ω—Ç–∞–∫—Ç
            for contact in telegram_contacts:
                contact_phone = contact.get("phone", "")
                # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                normalized_contact = ''.join(filter(str.isdigit, contact_phone))
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å—Ç–∫–æ–≤—ñ –∑–±—ñ–≥–∏
                if (normalized_search in normalized_contact or 
                    normalized_contact in normalized_search or
                    normalized_search[-9:] == normalized_contact[-9:]):  # –û—Å—Ç–∞–Ω–Ω—ñ 9 —Ü–∏—Ñ—Ä
                    
                    logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch: {contact.get('chat_id')} ({contact_phone})")
                    
                    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Å—Ö–æ–∂–æ–º—É –Ω–∞ —Å—Ç–∞—Ä–∏–π API
                    return {
                        "id": contact.get("chat_id"),
                        "first_name": "–ö–ª—ñ—î–Ω—Ç",
                        "last_name": f"–≤—ñ–¥ {branch.get('name', '')}",
                        "phone": contact_phone,
                        "branch_name": branch.get("name")
                    }
        
        logger.info(f"‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –∑ –Ω–æ–º–µ—Ä–æ–º {phone} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Wlaunch")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –≤ Wlaunch: {e}")
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –ø—Ä—è–º–æ–º—É –∑–∞–ø—É—Å–∫—É
    logging.basicConfig(level=logging.INFO)
    
    if test_wlaunch_connection():
        total = fetch_all_clients()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {total} –∫–ª—ñ—î–Ω—Ç—ñ–≤")
    else:
        print("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API")
