#!/usr/bin/env python3
# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π webhook –ø—Ä–æ—Ü–µ—Å–æ—Ä –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —á–∏—Ç–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö
import sys
import json
import sqlite3
import time
import requests
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    filename='/home/gomoncli/zadarma/webhook_processor.log',
    level=logging.INFO,
    format='%(asctime)s - webhook_processor - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def send_telegram(chat_id, message):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram —á–µ—Ä–µ–∑ –±–æ—Ç API"""
    logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id}")
    try:
        # –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω –∑ config
        with open('config.py', 'r') as f:
            config_content = f.read()
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ TELEGRAM_TOKEN
        import re
        token_match = re.search(r'TELEGRAM_TOKEN\s*=\s*[\'"]([^\'"]+)[\'"]', config_content)
        if not token_match:
            logger.error("‚ùå Cannot find TELEGRAM_TOKEN in config.py")
            return False
            
        token = token_match.group(1)
        
        # Telegram API URL
        url = "https://api.telegram.org/bot{}/sendMessage".format(token)
        data = {
            "chat_id": chat_id, 
            "text": message, 
            "parse_mode": "HTML"
        }
        
        response = requests.post(url, data=data, timeout=10)
        success = response.status_code == 200
        if success:
            logger.info("‚úÖ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram API: {response.status_code}")
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Telegram error: {e}")
        return False

def find_call_in_db(target_number, time_window=600):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –¥–∑–≤—ñ–Ω–æ–∫ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
    logger.info(f"üîç –ü–æ—à—É–∫ –¥–∑–≤—ñ–Ω–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä—É {target_number}")
    try:
        conn = sqlite3.connect('call_tracking.db')
        cursor = conn.cursor()
        
        current_time = int(time.time())
        time_start = current_time - time_window
        
        cursor.execute('''
            SELECT call_id, user_id, chat_id, action_type, target_number, start_time, status
            FROM call_tracking 
            WHERE target_number = ? AND start_time > ? AND status IN ('api_success', 'no_answer')
            ORDER BY start_time DESC LIMIT 1
        ''', (target_number, time_start))
        
        result = cursor.fetchone()
        
        if result:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∑–≤—ñ–Ω–æ–∫: {result[0]}")
        else:
            logger.info(f"‚ùå –î–∑–≤—ñ–Ω–æ–∫ –¥–ª—è {target_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        
        if result:
            return {
                'call_id': result[0],
                'user_id': result[1],
                'chat_id': result[2], 
                'action_type': result[3],
                'target_number': result[4],
                'start_time': result[5],
                'status': result[6]
            }
        return None
        
    except Exception as e:
        logger.error(f"‚ùå DB error: {e}")
        return None

def main():
    logger.info("üîî Webhook –≤–∏–∫–ª–∏–∫–∞–Ω–æ")
    
    # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    webhook_data = None
    
    # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ sys.argv (—è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ PHP)
    if len(sys.argv) > 1:
        try:
            webhook_data = json.loads(sys.argv[1])
            logger.info("üì• –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ sys.argv")
        except:
            pass
    
    # –Ø–∫—â–æ –Ω–µ –≤–∏–π—à–ª–æ, —á–∏—Ç–∞—î–º–æ –∑ stdin
    if not webhook_data:
        try:
            input_data = sys.stdin.read().strip()
            if input_data:
                webhook_data = json.loads(input_data)
                logger.info("üì• –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ stdin")
        except:
            pass
    
    # –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö
    if not webhook_data:
        logger.error("‚ùå –ù–µ–º–∞—î webhook –¥–∞–Ω–∏—Ö (–Ω—ñ argv, –Ω—ñ stdin)")
        return
    
    try:
        logger.info(f"üìã Webhook –¥–∞–Ω—ñ: {webhook_data}")
        
        # –í–∏—Ç—è–≥—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        event = webhook_data.get('event', '')
        caller_id = webhook_data.get('caller_id', '')
        called_did = webhook_data.get('called_did', '') 
        disposition = webhook_data.get('disposition', '')
        duration = int(webhook_data.get('duration', 0))
        
        logger.info(f"üìû Event: {event}, From: {caller_id}, To: {called_did}")
        logger.info(f"üìä Status: {disposition}, Duration: {duration}s")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤
        if event == 'NOTIFY_END':
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –¥–∑–≤—ñ–Ω–∫–∞
            target_number = None
            action_name = None
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ callback –≤—ñ–¥ –±–æ—Ç–∞
            clinic_numbers = ['0733103110', '733103110']
            is_from_clinic = any(clinic_num in called_did for clinic_num in clinic_numbers)
            
            if is_from_clinic:
                logger.info("ü§ñ –î–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ bot callback")
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –ø–æ caller_id
                if '637442017' in caller_id:
                    target_number = '0637442017'
                    action_name = '—Ö–≤—ñ—Ä—Ç–∫–∞'
                    logger.info("üö™ –î–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ —Ö–≤—ñ—Ä—Ç–∫—É")
                elif '930063585' in caller_id:
                    target_number = '0930063585' 
                    action_name = '–≤–æ—Ä–æ—Ç–∞'
                    logger.info("üö™ –î–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–æ –≤–æ—Ä–æ—Ç–∞")
                
                if target_number and action_name:
                    # –®—É–∫–∞—î–º–æ –¥–∑–≤—ñ–Ω–æ–∫ –≤ –±–∞–∑—ñ
                    call_data = find_call_in_db(target_number)
                    
                    if call_data:
                        logger.info(f"üìã –û–±—Ä–æ–±–∫–∞ call_id: {call_data['call_id']}")
                        
                        # –ü–†–ê–í–ò–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó Zadarma)
                        if disposition == 'cancel' and duration == 0:
                            if action_name == '—Ö–≤—ñ—Ä—Ç–∫–∞':
                                message = "‚úÖ –•–≤—ñ—Ä—Ç–∫–∞ –≤—ñ–¥—á–∏–Ω–µ–Ω–∞!"
                            elif action_name == '–≤–æ—Ä–æ—Ç–∞':
                                message = "‚úÖ –í–æ—Ä–æ—Ç–∞ –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!"
                            else:
                                message = f"‚úÖ {action_name.capitalize()} –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!"
                            status = 'success'
                            logger.info("üéâ SUCCESS: –°–∫–∏–Ω—É–ª–∏ –≤—ñ–¥—Ä–∞–∑—É = –≤—ñ–¥–∫—Ä–∏—Ç–æ!")
                        elif disposition == 'busy':
                            message = f"‚ùå {action_name.capitalize()} –∑–∞–π–Ω—è—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É."
                            status = 'busy'
                            logger.warning("‚ö†Ô∏è BUSY: –ù–æ–º–µ—Ä –∑–∞–π–Ω—è—Ç–∏–π")
                        elif disposition == 'cancel' and duration > 0:
                            message = f"‚ùå –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ {action_name}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                            status = 'technical_error'
                            logger.warning(f"‚ö†Ô∏è TECH_ERROR: duration={duration}s, –ø–æ—Ç—ñ–º cancel")
                        elif disposition == 'answered':
                            message = f"‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {action_name} –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
                            status = 'config_error'
                            logger.error("‚ùå CONFIG_ERROR: –î–∑–≤—ñ–Ω–æ–∫ –ü–†–ò–ô–ù–Ø–õ–ò –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è!")
                        else:
                            message = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {action_name}. –°—Ç–∞—Ç—É—Å: {disposition}"
                            status = 'failed'
                            logger.warning(f"‚ùå FAILED: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å {disposition}")
                        
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                        chat_id = call_data['chat_id']
                        logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç {chat_id}: {status}")
                        
                        success = send_telegram(chat_id, message)
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
                        try:
                            conn = sqlite3.connect('call_tracking.db')
                            cursor = conn.cursor()
                            cursor.execute('UPDATE call_tracking SET status = ? WHERE call_id = ?', 
                                         (status, call_data['call_id']))
                            conn.commit()
                            conn.close()
                            logger.info(f"üìù –°—Ç–∞—Ç—É—Å –≤ –ë–î –æ–Ω–æ–≤–ª–µ–Ω–æ: {status}")
                        except Exception as e:
                            logger.error(f"‚ùå DB update error: {e}")
                    else:
                        logger.warning(f"‚ùå –î–∑–≤—ñ–Ω–æ–∫ –¥–ª—è {target_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                else:
                    logger.info(f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –≤ caller_id: {caller_id}")
            else:
                logger.info(f"‚ÑπÔ∏è –ù–µ bot callback - called_did: {called_did}")
        else:
            logger.info(f"‚ÑπÔ∏è –Ü–≥–Ω–æ—Ä—É—î–º–æ event: {event}")
        
        logger.info("‚úÖ Webhook –æ–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    main()
