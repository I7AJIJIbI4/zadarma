#!/usr/bin/env python3
# test_webhook.py - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook –æ–±—Ä–æ–±–∫–∏
import sys
import json
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_simple_webhook():
    """–¢–µ—Å—Ç—É—î simple_webhook.py"""
    print("=== –¢–ï–°–¢–£–í–ê–ù–ù–Ø SIMPLE WEBHOOK ===")
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ webhook
    test_cases = [
        {
            "name": "–£—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤–æ—Ä—ñ—Ç",
            "data": {
                "event": "NOTIFY_END",
                "caller_id": "0930063585",
                "called_did": "0733103110", 
                "disposition": "cancel",
                "duration": 3
            }
        },
        {
            "name": "–£—Å–ø—ñ—à–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ö–≤—ñ—Ä—Ç–∫–∏",
            "data": {
                "event": "NOTIFY_END",
                "caller_id": "0637442017",
                "called_did": "0733103110",
                "disposition": "cancel", 
                "duration": 2
            }
        },
        {
            "name": "–ù–æ–º–µ—Ä –∑–∞–π–Ω—è—Ç–∏–π",
            "data": {
                "event": "NOTIFY_END",
                "caller_id": "0930063585",
                "called_did": "0733103110",
                "disposition": "busy",
                "duration": 0
            }
        },
        {
            "name": "–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î",
            "data": {
                "event": "NOTIFY_END", 
                "caller_id": "0637442017",
                "called_did": "0733103110",
                "disposition": "no-answer",
                "duration": 0
            }
        }
    ]
    
    for test_case in test_cases:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_case['name']}")
        test_data = json.dumps(test_case['data'])
        print(f"üìã –î–∞–Ω—ñ: {test_data}")
        
        try:
            import subprocess
            result = subprocess.run([
                'python3', 'simple_webhook.py', test_data
            ], capture_output=True, text=True, timeout=30)
            
            print(f"üîç –ö–æ–¥ –≤–∏—Ö–æ–¥—É: {result.returncode}")
            if result.stdout:
                print(f"üì§ –í–∏–≤—ñ–¥: {result.stdout.strip()}")
            if result.stderr:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {result.stderr.strip()}")
                
        except subprocess.TimeoutExpired:
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")

def create_test_call_in_db():
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –≤ –±–∞–∑—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ webhook"""
    print("\n=== –°–¢–í–û–†–ï–ù–ù–Ø –¢–ï–°–¢–û–í–û–ì–û –î–ó–í–Ü–ù–ö–ê ===")
    
    try:
        import sqlite3
        import time
        
        conn = sqlite3.connect('call_tracking.db')
        cursor = conn.cursor()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS call_tracking (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                call_id TEXT UNIQUE,
                user_id INTEGER,
                chat_id INTEGER,
                action_type TEXT,
                target_number TEXT,
                start_time INTEGER,
                status TEXT DEFAULT 'initiated',
                pbx_call_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤–æ—Ä—ñ—Ç
        test_call_id = f"test_{int(time.time())}"
        cursor.execute('''
            INSERT INTO call_tracking 
            (call_id, user_id, chat_id, action_type, target_number, start_time, status)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (test_call_id, 573368771, 573368771, 'vorota', '0930063585', int(time.time()), 'api_success'))
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –¥–ª—è —Ö–≤—ñ—Ä—Ç–∫–∏
        test_call_id2 = f"test_hvirtka_{int(time.time())}"
        cursor.execute('''
            INSERT INTO call_tracking 
            (call_id, user_id, chat_id, action_type, target_number, start_time, status)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (test_call_id2, 573368771, 573368771, 'hvirtka', '0637442017', int(time.time()), 'api_success'))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∑–≤—ñ–Ω–∫–∏: {test_call_id}, {test_call_id2}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤: {e}")
        return False

def check_call_tracking_db():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –±–∞–∑–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤"""
    print("\n=== –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–ó–ò –í–Ü–î–°–¢–ï–ñ–ï–ù–ù–Ø –î–ó–í–Ü–ù–ö–Ü–í ===")
    
    try:
        import sqlite3
        
        conn = sqlite3.connect('call_tracking.db')
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='call_tracking'")
        table_exists = cursor.fetchone()
        
        if not table_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü—è call_tracking –Ω–µ —ñ—Å–Ω—É—î")
            conn.close()
            return False
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
        cursor.execute("SELECT COUNT(*) FROM call_tracking")
        total_calls = cursor.fetchone()[0]
        print(f"üìä –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_calls}")
        
        # –û—Å—Ç–∞–Ω–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏
        cursor.execute('''
            SELECT call_id, action_type, target_number, status, created_at 
            FROM call_tracking 
            ORDER BY created_at DESC 
            LIMIT 5
        ''')
        recent_calls = cursor.fetchall()
        
        print("üìû –û—Å—Ç–∞–Ω–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏:")
        for call in recent_calls:
            print(f"  {call[0]} - {call[1]} - {call[2]} - {call[3]} - {call[4]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–∑–∏: {e}")
        return False

def main():
    print("üîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø WEBHOOK –°–ò–°–¢–ï–ú–ò")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    if not check_call_tracking_db():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–∑–æ—é –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∑–≤—ñ–Ω–∫–∏
    if create_test_call_in_db():
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∑–≤—ñ–Ω–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ webhook
        test_simple_webhook()
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∑–≤—ñ–Ω–∫–∏")
    
    print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è webhook –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
