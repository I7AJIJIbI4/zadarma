#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
telegram_notifier.py - –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π Telegram —Å–ø–æ–≤—ñ—â—É–≤–∞—á –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±–∞–ª–∞–Ω—Å–∏
"""

import requests
import json
import logging
import os
from datetime import datetime
from config import TELEGRAM_TOKEN, ADMIN_USER_ID

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.admin_id = ADMIN_USER_ID
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö
        self.state_file = "api_states.json"
    
    def send_message(self, message, parse_mode="HTML"):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                'chat_id': self.admin_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
            return False
    
    def load_previous_states(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–∞–Ω–∏ API"""
        try:
            if os.path.exists(self.state_file):
                with open(self.state_file, 'r') as f:
                    return json.load(f)
        except:
            pass
        return {}
    
    def save_states(self, states):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç–∞–Ω–∏ API"""
        try:
            with open(self.state_file, 'w') as f:
                json.dump(states, f)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤: {e}")
    
    def notify_critical_error(self, api_name, error_message):
        """–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API"""
        message = f"""
üö® <b>–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê API</b>

üì° <b>API:</b> {api_name.upper()}
‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {error_message}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö° <b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–µ–≥–∞–π–Ω–∞ —É–≤–∞–≥–∞!</b>
        """
        return self.send_message(message.strip())
    
    def notify_api_recovery(self, api_name):
        """API –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ"""
        message = f"""
‚úÖ <b>API –í–Ü–î–ù–û–í–õ–ï–ù–û</b>

üì° <b>API:</b> {api_name.upper()}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üòä –í—Å–µ –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
        """
        return self.send_message(message.strip())
    
    def notify_regular_error(self, api_name, error_message):
        """–ó–≤–∏—á–∞–π–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API"""
        message = f"""
‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ API</b>

üì° <b>API:</b> {api_name.upper()}
‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {error_message}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        return self.send_message(message.strip())
    
    def send_daily_summary(self, results):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏"""
        ok_count = sum(1 for r in results.values() if r['status'] == 'OK')
        total = len(results)
        
        status_emoji = "‚úÖ" if ok_count == total else "‚ö†Ô∏è" if ok_count >= total//2 else "‚ùå"
        
        message = f"""
üìä <b>–©–û–î–ï–ù–ù–ò–ô –ó–í–Ü–¢ API</b>

{status_emoji} <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> {ok_count}/{total} API –ø—Ä–∞—Ü—é—é—Ç—å

<b>üì° –î–µ—Ç–∞–ª—å–Ω–æ –ø–æ API:</b>
"""
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ API
        for api_name, result in results.items():
            emoji = "‚úÖ" if result['status'] == 'OK' else "‚ùå" if result['status'] == 'ERROR' else "‚öôÔ∏è"
            message += f"{emoji} <b>{api_name.upper()}:</b> {result['message']}\n"
        
        # –î–æ–¥–∞—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É —Å–µ–∫—Ü—ñ—é
        financial_info = []
        
        # Zadarma –±–∞–ª–∞–Ω—Å
        if 'zadarma' in results and results['zadarma']['status'] == 'OK':
            zadarma_data = results['zadarma']
            if 'balance' in zadarma_data:
                balance = zadarma_data['balance']
                currency = zadarma_data.get('currency', '')
                
                # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –Ω–∏–∑—å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
                try:
                    balance_float = float(balance)
                    if balance_float < 50:
                        warning = " ‚ö†Ô∏è <i>–ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å!</i>"
                    else:
                        warning = ""
                except:
                    warning = ""
                
                financial_info.append(f"üìû <b>Zadarma:</b> {balance} {currency}{warning}")
        
        # SMS Fly –±–∞–ª–∞–Ω—Å
        if 'sms_fly' in results and results['sms_fly']['status'] == 'OK':
            sms_data = results['sms_fly']
            if 'balance' in sms_data:
                balance = sms_data['balance']
                currency = sms_data.get('currency', '')
                
                # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –Ω–∏–∑—å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
                try:
                    balance_float = float(balance)
                    if balance_float < 10:
                        warning = " ‚ö†Ô∏è <i>–ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–∏–π!</i>"
                    elif balance_float < 50:
                        warning = " ‚ö†Ô∏è <i>–ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å!</i>"
                    else:
                        warning = ""
                except:
                    warning = ""
                
                financial_info.append(f"üì± <b>SMS Fly:</b> {balance} {currency}{warning}")
        
        # –î–æ–¥–∞—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —è–∫—â–æ —î
        if financial_info:
            message += f"\nüí∞ <b>–ë–ê–õ–ê–ù–°–ò:</b>\n"
            for info in financial_info:
                message += f"{info}\n"
        
        # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        message += f"\nüïê <b>–ß–∞—Å –∑–≤—ñ—Ç—É:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏
        if ok_count < total:
            message += f"\n\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b> –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ñ API —Ç–∞ –ø–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ."
        
        return self.send_message(message.strip())
    
    def notify_low_balance(self, api_name, balance, currency, threshold=50):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å"""
        message = f"""
‚ö†Ô∏è <b>–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ù–ò–ó–¨–ö–ò–ô –ë–ê–õ–ê–ù–°</b>

üí∞ <b>API:</b> {api_name.upper()}
üí≥ <b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {balance} {currency}
üìâ <b>–ü–æ—Ä—ñ–≥:</b> {threshold} {currency}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b> –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –±–µ–∑–ø–µ—Ä–µ–±—ñ–π–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤—ñ—Å—É.
        """
        return self.send_message(message.strip())
    
    def process_api_results(self, current_results):
        """–û–±—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ API —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        previous_states = self.load_previous_states()
        notifications_sent = []
        
        critical_apis = ['zadarma', 'telegram']
        
        for api_name, result in current_results.items():
            current_status = result['status']
            previous_status = previous_states.get(api_name, 'UNKNOWN')
            
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏
            if current_status == 'ERROR' and previous_status != 'ERROR':
                if api_name in critical_apis:
                    self.notify_critical_error(api_name, result['message'])
                    notifications_sent.append(f"CRITICAL: {api_name}")
                else:
                    self.notify_regular_error(api_name, result['message'])
                    notifications_sent.append(f"ERROR: {api_name}")
            
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            elif current_status == 'OK' and previous_status == 'ERROR':
                self.notify_api_recovery(api_name)
                notifications_sent.append(f"RECOVERY: {api_name}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∏–∑—å–∫–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ API –ø—Ä–∞—Ü—é—î)
            elif current_status == 'OK' and 'balance' in result:
                try:
                    balance = float(result['balance'])
                    currency = result.get('currency', '')
                    
                    # –†—ñ–∑–Ω—ñ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö API
                    thresholds = {
                        'zadarma': 50,    # UAH
                        'sms_fly': 10     # –≥—Ä–Ω
                    }
                    
                    threshold = thresholds.get(api_name, 50)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±–∞–ª–∞–Ω—Å —Å—Ç–∞–≤ –Ω–∏–∑—å–∫–∏–º
                    previous_balance = previous_states.get(f"{api_name}_balance", float('inf'))
                    
                    if balance < threshold and previous_balance >= threshold:
                        self.notify_low_balance(api_name, balance, currency, threshold)
                        notifications_sent.append(f"LOW_BALANCE: {api_name}")
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
                    previous_states[f"{api_name}_balance"] = balance
                    
                except (ValueError, TypeError):
                    pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —è–∫—â–æ –±–∞–ª–∞–Ω—Å –Ω–µ —á–∏—Å–ª–æ
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç–∞–Ω–∏ (–≤–∫–ª—é—á–∞—é—á–∏ –±–∞–ª–∞–Ω—Å–∏)
        current_states = {api: result['status'] for api, result in current_results.items()}
        current_states.update({k: v for k, v in previous_states.items() if k.endswith('_balance')})
        self.save_states(current_states)
        
        return notifications_sent

def test_notifier():
    """–¢–µ—Å—Ç —Å–ø–æ–≤—ñ—â—É–≤–∞—á–∞ –∑ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—î—é –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    notifier = TelegramNotifier()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏
    test_results = {
        'zadarma': {'status': 'OK', 'message': '–ë–∞–ª–∞–Ω—Å: 85.94 UAH', 'balance': '85.94', 'currency': 'UAH'},
        'sms_fly': {'status': 'OK', 'message': '–ë–∞–ª–∞–Ω—Å: 15.5 –≥—Ä–Ω', 'balance': '15.5', 'currency': '–≥—Ä–Ω'},
        'wlaunch': {'status': 'OK', 'message': '–§—ñ–ª—ñ–π: 1 (1 –∞–∫—Ç–∏–≤–Ω–∏—Ö)'},
        'telegram': {'status': 'OK', 'message': '–ë–æ—Ç: DrGomonConcierge (@your_bot)'}
    }
    
    success = notifier.send_daily_summary(test_results)
    return success

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ Telegram —Å–ø–æ–≤—ñ—â—É–≤–∞—á–∞...")
    success = test_notifier()
    print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!" if success else "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏!")