#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
telegram_notifier.py - Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
"""

import requests
import json
import logging
import os
from datetime import datetime
from config import TELEGRAM_TOKEN, ADMIN_USER_ID

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.admin_id = ADMIN_USER_ID
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        self.state_file = "/home/gomoncli/zadarma/api_states.json"
    
    def send_message(self, message, parse_mode="HTML"):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                'chat_id': self.admin_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
            return False
    
    def load_previous_states(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–∞–Ω–∏ API"""
        try:
            if os.path.exists(self.state_file):
                with open(self.state_file, 'r') as f:
                    return json.load(f)
        except:
            pass
        return {}
    
    def save_states(self, states):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç–∞–Ω–∏ API"""
        try:
            with open(self.state_file, 'w') as f:
                json.dump(states, f)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤: {e}")
    
    def notify_critical_error(self, api_name, error_message):
        """–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API"""
        message = f"""
üö® <b>–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê API</b>

üì° <b>API:</b> {api_name.upper()}
‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {error_message}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö° <b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–µ–≥–∞–π–Ω–∞ —É–≤–∞–≥–∞!</b>
        """
        return self.send_message(message.strip())
    
    def notify_api_recovery(self, api_name):
        """API –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ"""
        message = f"""
‚úÖ <b>API –í–Ü–î–ù–û–í–õ–ï–ù–û</b>

üì° <b>API:</b> {api_name.upper()}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üòä –í—Å–µ –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
        """
        return self.send_message(message.strip())
    
    def notify_regular_error(self, api_name, error_message):
        """–ó–≤–∏—á–∞–π–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API"""
        message = f"""
‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ API</b>

üì° <b>API:</b> {api_name.upper()}
‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {error_message}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        return self.send_message(message.strip())
    
    def send_daily_summary(self, results):
        """–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç"""
        ok_count = sum(1 for r in results.values() if r['status'] == 'OK')
        total = len(results)
        
        status_emoji = "‚úÖ" if ok_count == total else "‚ö†Ô∏è" if ok_count >= total//2 else "‚ùå"
        
        message = f"""
üìä <b>–©–û–î–ï–ù–ù–ò–ô –ó–í–Ü–¢ API</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {ok_count}/{total} API –ø—Ä–∞—Ü—é—é—Ç—å

<b>–î–µ—Ç–∞–ª—å–Ω–æ:</b>
"""
        
        for api_name, result in results.items():
            emoji = "‚úÖ" if result['status'] == 'OK' else "‚ùå"
            message += f"{emoji} <b>{api_name.upper()}:</b> {result['message']}\n"
        
        message += f"\nüïê <b>–ß–∞—Å –∑–≤—ñ—Ç—É:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        return self.send_message(message.strip())
    
    def process_api_results(self, current_results):
        """–û–±—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ API —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        previous_states = self.load_previous_states()
        notifications_sent = []
        
        critical_apis = ['zadarma', 'telegram']
        
        for api_name, result in current_results.items():
            current_status = result['status']
            previous_status = previous_states.get(api_name, 'UNKNOWN')
            
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏
            if current_status == 'ERROR' and previous_status != 'ERROR':
                if api_name in critical_apis:
                    self.notify_critical_error(api_name, result['message'])
                    notifications_sent.append(f"CRITICAL: {api_name}")
                else:
                    self.notify_regular_error(api_name, result['message'])
                    notifications_sent.append(f"ERROR: {api_name}")
            
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
            elif current_status == 'OK' and previous_status == 'ERROR':
                self.notify_api_recovery(api_name)
                notifications_sent.append(f"RECOVERY: {api_name}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Å—Ç–∞–Ω–∏
        current_states = {api: result['status'] for api, result in current_results.items()}
        self.save_states(current_states)
        
        return notifications_sent

def test_notifier():
    """–¢–µ—Å—Ç —Å–ø–æ–≤—ñ—â—É–≤–∞—á–∞"""
    notifier = TelegramNotifier()
    return notifier.send_message("üß™ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò –°–ü–û–í–Ü–©–ï–ù–¨</b>\n\n‚úÖ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è API –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–∞—Ü—é—é—Ç—å!")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å...")
    success = test_notifier()
    print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!" if success else "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏!")
