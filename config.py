# config.py - Fixed version with proper validation

import logging
import re

logger = logging.getLogger(__name__)

# Telegram
TELEGRAM_TOKEN = "8030228734:AAGYMKVWYfNT5h-UJlVWmmWmul8-KhdaOk4"
ADMIN_USER_ID = 573368771  # –¢–≤—ñ–π Telegram user_id

# Zadarma API
ZADARMA_API_KEY = "322168f1b94be856f0de"
ZADARMA_API_SECRET = "ae4b189367a9f6de88b3"
ZADARMA_SIP_ACCOUNT = "107122"  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 107122 –∞–±–æ +380733103110
ZADARMA_MAIN_PHONE = "0733103110"

# Wlaunch API
WLAUNCH_API_KEY = "d5_Js-ZJX_8bJxCxg2ekWTV0Z8c"
COMPANY_ID = "3f3027ca-0b21-11ed-8355-65920565acdd"

# –®–ª—è—Ö –¥–æ –ë–î
DB_PATH = "/home/gomoncli/zadarma/users.db"

<<<<<<< Updated upstream
# –ù–æ–º–µ—Ä–∏ –¥–ª—è –≤–∏–∫–ª–∏–∫—ñ–≤ - –í–ò–ü–†–ê–í–õ–ï–ù–û –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª–æ–≥—ñ–≤
HVIRTKA_NUMBER = "0637442017"  # –†–µ–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∑ –ª–æ–≥—ñ–≤
VOROTA_NUMBER = "0930063585"   # –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ –±—É–ª–æ
=======
# –ù–æ–º–µ—Ä–∏ –¥–ª—è –≤–∏–∫–ª–∏–∫—ñ–≤
HVIRTKA_NUMBER = "0637442017"  # –ø—Ä–∏–∫–ª–∞–¥: +380991234567
VOROTA_NUMBER = "0930063585"   # –ø—Ä–∏–∫–ª–∞–¥: +380991234568
>>>>>>> Stashed changes

# URLs –¥–ª—è –±–æ—Ç–∞
MAP_URL = "https://maps.app.goo.gl/vf1EzwWPNdCqZDvx9"
SCHEME_URL = "https://ibb.co/6JZ9VHw"
SUPPORT_PHONE = "0733103110"

def format_phone_for_zadarma(phone):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç Zadarma API
    –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä—ñ–∑–Ω—ñ –≤—Ö—ñ–¥–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —Ç–∞ –ª–æ–≥—É—î –ø—Ä–æ—Ü–µ—Å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    
    Args:
        phone (str): –í—Ö—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä —É –±—É–¥—å-—è–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        
    Returns:
        str: –ù–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ 0XXXXXXXXX –¥–ª—è Zadarma API
        
    Examples:
        "+380991234567" -> "0991234567"
        "380991234567" -> "0991234567" 
        "0991234567" -> "0991234567"
        "991234567" -> "0991234567"
    """
    logger.debug(f"üìû –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—É: –≤—Ö—ñ–¥ = '{phone}'")
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
    clean_phone = re.sub(r'\D', '', phone)
    logger.debug(f"üìû –ü—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è: '{clean_phone}'")
    
    # –ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
    if clean_phone.startswith('380'):
        # +380XXXXXXXXX –∞–±–æ 380XXXXXXXXX -> 0XXXXXXXXX
        if len(clean_phone) == 12:  # 380 + 9 —Ü–∏—Ñ—Ä
            result = '0' + clean_phone[3:]
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∑–≤–∏—á–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –Ω–æ–º–µ—Ä—É –∑ 380: {len(clean_phone)}")
            result = clean_phone
            
    elif len(clean_phone) == 9:
        # XXXXXXXXX -> 0XXXXXXXXX (–¥–æ–¥–∞—î–º–æ 0 –Ω–∞ –ø–æ—á–∞—Ç–æ–∫)
        result = '0' + clean_phone
        
    elif len(clean_phone) == 10 and clean_phone.startswith('0'):
        # 0XXXXXXXXX -> –∑–∞–ª–∏—à–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç)
        result = clean_phone
        
    elif len(clean_phone) == 10 and not clean_phone.startswith('0'):
        # –ù–æ–º–µ—Ä –∑ 10 —Ü–∏—Ñ—Ä –∞–ª–µ –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0 - –º–æ–∂–ª–∏–≤–æ –ø–æ–º–∏–ª–∫–∞
        logger.warning(f"‚ö†Ô∏è –ù–æ–º–µ—Ä –∑ 10 —Ü–∏—Ñ—Ä –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0: {clean_phone}")
        result = clean_phone
        
    else:
        # –Ü–Ω—à—ñ –≤–∏–ø–∞–¥–∫–∏ - –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î –∞–ª–µ –ª–æ–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        logger.warning(f"‚ö†Ô∏è –ù–µ–∑–≤–∏—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É: {phone} -> {clean_phone} (–¥–æ–≤–∂–∏–Ω–∞: {len(clean_phone)})")
        result = clean_phone
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    if len(result) != 10:
        logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É: '{result}' (–¥–æ–≤–∂–∏–Ω–∞: {len(result)})")
    elif not result.startswith('0'):
        logger.warning(f"‚ö†Ô∏è –£–í–ê–ì–ê: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0: '{result}'")
    
    logger.info(f"üìû –§—ñ–Ω–∞–ª—å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: '{phone}' -> '{result}'")
    return result

def validate_phone_number(phone):
    """
    –í–∞–ª—ñ–¥—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è Zadarma API
    
    Args:
        phone (str): –ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        
    Returns:
        bool: True —è–∫—â–æ –Ω–æ–º–µ—Ä –≤–∞–ª—ñ–¥–Ω–∏–π
    """
    if not phone:
        return False
        
    # –ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä —ñ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 0
    if len(phone) != 10:
        return False
        
    if not phone.startswith('0'):
        return False
        
    if not phone.isdigit():
        return False
        
    return True

def validate_config():
    """
    –í–∞–ª—ñ–¥—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ –≤—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω—ñ
    """
    errors = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä—ñ–≤
    if not validate_phone_number(HVIRTKA_NUMBER):
        errors.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç HVIRTKA_NUMBER: '{HVIRTKA_NUMBER}' (–º–∞—î –±—É—Ç–∏ 0XXXXXXXXX)")
        
    if not validate_phone_number(VOROTA_NUMBER):
        errors.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç VOROTA_NUMBER: '{VOROTA_NUMBER}' (–º–∞—î –±—É—Ç–∏ 0XXXXXXXXX)")
        
    if not validate_phone_number(ZADARMA_MAIN_PHONE):
        errors.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ZADARMA_MAIN_PHONE: '{ZADARMA_MAIN_PHONE}' (–º–∞—î –±—É—Ç–∏ 0XXXXXXXXX)")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤
    if not ZADARMA_API_KEY or len(ZADARMA_API_KEY) < 10:
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ZADARMA_API_KEY")
        
    if not ZADARMA_API_SECRET or len(ZADARMA_API_SECRET) < 10:
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ZADARMA_API_SECRET")
        
    if not TELEGRAM_TOKEN or len(TELEGRAM_TOKEN) < 20:
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π TELEGRAM_TOKEN")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —à–ª—è—Ö—ñ–≤
    import os
    db_dir = os.path.dirname(DB_PATH)
    if not os.path.exists(db_dir):
        errors.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –ë–î –Ω–µ —ñ—Å–Ω—É—î: {db_dir}")
    
    if errors:
        error_msg = "‚ùå –ü–û–ú–ò–õ–ö–ò –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á:\n" + "\n".join(f"  ‚Ä¢ {error}" for error in errors)
        logger.error(error_msg)
        raise ValueError(error_msg)
    else:
        logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é")
        logger.info(f"üìû HVIRTKA_NUMBER: {HVIRTKA_NUMBER}")
        logger.info(f"üö™ VOROTA_NUMBER: {VOROTA_NUMBER}")
        logger.info(f"üì± ZADARMA_MAIN_PHONE: {ZADARMA_MAIN_PHONE}")

# –¢–µ—Å—Ç–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def test_phone_formatting():
    """–¢–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤"""
    test_cases = [
        ("+380991234567", "0991234567"),
        ("380991234567", "0991234567"),
        ("0991234567", "0991234567"),
        ("991234567", "0991234567"),
        ("+380 99 123 45 67", "0991234567"),
        ("38(099)123-45-67", "0991234567"),
    ]
    
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤...")
    
    for input_phone, expected in test_cases:
        result = format_phone_for_zadarma(input_phone)
        status = "‚úÖ" if result == expected else "‚ùå"
        logger.info(f"{status} '{input_phone}' -> '{result}' (–æ—á—ñ–∫—É—î—Ç—å—Å—è: '{expected}')")
        
        if result != expected:
            logger.error(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–®–û–í: {input_phone} -> {result}, –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è {expected}")

if __name__ == "__main__":
    # –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É - —Ç–µ—Å—Ç—É—î–º–æ
    logging.basicConfig(level=logging.INFO)
    test_phone_formatting()
    validate_config()
