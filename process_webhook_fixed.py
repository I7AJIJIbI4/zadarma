#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
process_webhook_fixed.py - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –æ–±—Ä–æ–±–Ω–∏–∫ webhook-—ñ–≤
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à—É–∫—É –¥–∑–≤—ñ–Ω–∫—ñ–≤ —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ —á–∞—Å
"""

import sys
import json
import logging
import os
import time
from datetime import datetime, timedelta

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/gomoncli/zadarma')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/gomoncli/zadarma/webhook_processor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('webhook_processor')

def normalize_phone_number(phone):
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
    if not phone:
        return ""
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
    normalized = ''.join(filter(str.isdigit, str(phone)))
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∏
    if normalized.startswith('380'):
        normalized = normalized[3:]
    elif normalized.startswith('38'):
        normalized = normalized[2:]
    elif normalized.startswith('0'):
        normalized = normalized[1:]
    
    return normalized

def find_tracked_call(pbx_call_id, caller_id, call_tracker, time_window=300):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–æ—à—É–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–æ–≥–æ –¥–∑–≤—ñ–Ω–∫–∞
    
    Args:
        pbx_call_id: PBX ID –∑ webhook
        caller_id: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ webhook
        call_tracker: –û–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤
        time_window: –í—ñ–∫–Ω–æ —á–∞—Å—É –¥–ª—è –ø–æ—à—É–∫—É (—Å–µ–∫—É–Ω–¥–∏)
    
    Returns:
        call_data –∞–±–æ None
    """
    logger.info(f"üîç –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –¥–∑–≤—ñ–Ω–∫–∞...")
    logger.info(f"   PBX ID: {pbx_call_id}")
    logger.info(f"   Caller ID: {caller_id}")
    
    # 1. –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø–æ PBX ID
    if pbx_call_id:
        call_data = call_tracker.get_call_by_pbx_id(pbx_call_id)
        if call_data:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ PBX ID: {pbx_call_id}")
            return call_data
        logger.info(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ PBX ID: {pbx_call_id}")
    
    # 2. –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä –∑ webhook
    normalized_caller = normalize_phone_number(caller_id)
    logger.info(f"üî¢ –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä: '{caller_id}' -> '{normalized_caller}'")
    
    # 3. –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—ñ –Ω–æ–º–µ—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É
    target_numbers = []
    
    # –ù–∞—à—ñ –Ω–æ–º–µ—Ä–∏ —Ö–≤—ñ—Ä—Ç–∫–∏ —Ç–∞ –≤–æ—Ä—ñ—Ç
    hvirtka_variations = ['637442017', '0637442017', '380637442017']
    vorota_variations = ['930063585', '0930063585', '380930063585']
    
    # –Ø–∫—â–æ caller_id –º—ñ—Å—Ç–∏—Ç—å –Ω–∞—à –Ω–æ–º–µ—Ä, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –≤–∞—Ä—ñ–∞—Ü—ñ—ó
    if any(num in caller_id for num in ['637442017', '930063585']):
        if '637442017' in caller_id:
            target_numbers.extend(hvirtka_variations)
            logger.info("üö™ –í–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫ –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ —Ö–≤—ñ—Ä—Ç–∫—É")
        elif '930063585' in caller_id:
            target_numbers.extend(vorota_variations)
            logger.info("üè† –í–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫ –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ –≤–æ—Ä–æ—Ç–∞")
    
    # 4. –®—É–∫–∞—î–º–æ –ø–æ —Ü—ñ–ª—å–æ–≤–∏—Ö –Ω–æ–º–µ—Ä–∞—Ö –∑ —á–∞—Å–æ–≤–∏–º –≤—ñ–∫–Ω–æ–º
    current_time = time.time()
    
    for target_number in target_numbers:
        logger.info(f"üîç –ü–æ—à—É–∫ –ø–æ –Ω–æ–º–µ—Ä—É: {target_number}")
        
        # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —á–∞—Å–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
        for time_range in [60, 120, 300, 600]:  # 1, 2, 5, 10 —Ö–≤–∏–ª–∏–Ω
            call_data = call_tracker.get_call_by_target_and_time(target_number, time_range)
            if call_data:
                call_time_diff = current_time - call_data.get('timestamp', 0)
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∑–≤—ñ–Ω–æ–∫ –ø–æ –Ω–æ–º–µ—Ä—É {target_number} (—Ä—ñ–∑–Ω–∏—Ü—è —á–∞—Å—É: {call_time_diff:.1f}—Å)")
                return call_data
    
    # 5. –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å - –ø–æ—à—É–∫ –ø–æ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–∑–≤—ñ–Ω–∫–∞—Ö
    logger.info("üîç –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å - –ø–æ—à—É–∫ —Å–µ—Ä–µ–¥ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        all_calls = call_tracker.get_recent_calls(600)
        
        for call in all_calls:
            call_target = normalize_phone_number(call.get('target_number', ''))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—à –Ω–æ–º–µ—Ä
            if call_target in ['637442017', '930063585']:
                call_time_diff = current_time - call.get('timestamp', 0)
                
                # –Ø–∫—â–æ –¥–∑–≤—ñ–Ω–æ–∫ –±—É–≤ –Ω–µ—â–æ–¥–∞–≤–Ω–æ
                if call_time_diff < time_window:
                    logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ —á–∞—Å—É: {call['call_id']} (—Ä—ñ–∑–Ω–∏—Ü—è: {call_time_diff:.1f}—Å)")
                    return call
                    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤: {e}")
    
    logger.warning(f"‚ùå –î–∑–≤—ñ–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
    return None

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ webhook"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ JSON –¥–∞–Ω–Ω—ñ –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        if len(sys.argv) < 2:
            logger.error("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ JSON –¥–∞–Ω–Ω—ñ")
            print(json.dumps({"success": False, "message": "No JSON data provided"}))
            sys.exit(1)
        
        json_data = sys.argv[1]
        logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω–Ω—ñ: {json_data}")
        
        # –ü–∞—Ä—Å–∏–º–æ JSON
        try:
            webhook_data = json.loads(json_data)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            print(json.dumps({"success": False, "message": f"JSON parse error: {e}"}))
            sys.exit(1)
        
        event = webhook_data.get('event', '')
        pbx_call_id = webhook_data.get('pbx_call_id', '')
        caller_id = webhook_data.get('caller_id', '').replace('+', '')
        destination = webhook_data.get('destination', '')
        called_did = webhook_data.get('called_did', '')
        disposition = webhook_data.get('disposition', '')
        duration = int(webhook_data.get('duration', 0))
        
        logger.info(f"üîî Webhook –ø–æ–¥—ñ—è: {event}")
        logger.info(f"   PBX ID: {pbx_call_id}")
        logger.info(f"   Caller: {caller_id}")
        logger.info(f"   Destination: {destination}")
        logger.info(f"   Called DID: {called_did}")
        logger.info(f"   Disposition: {disposition}")
        logger.info(f"   Duration: {duration}")
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à –º–æ–¥—É–ª—å webhook –æ–±—Ä–æ–±–∫–∏
        try:
            from zadarma_api_webhook import process_webhook_call_status, send_telegram_message, call_tracker
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ zadarma_api_webhook")
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É zadarma_api_webhook: {e}")
            try:
                from zadarma_api import process_webhook_call_status, send_telegram_message, call_tracker
                logger.info("‚úÖ Fallback: —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ zadarma_api")
            except ImportError:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–∏–π –º–æ–¥—É–ª—å webhook –æ–±—Ä–æ–±–∫–∏")
                print(json.dumps({"success": False, "message": "Import error"}))
                sys.exit(1)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π
        if event == 'NOTIFY_END':
            logger.info(f"üìû –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞")
            
            # –ü–û–ö–†–ê–©–ï–ù–ò–ô –ü–û–®–£–ö –î–ó–í–Ü–ù–ö–ê
            call_data = find_tracked_call(pbx_call_id, caller_id, call_tracker)
            
            if call_data:
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫: {call_data['call_id']}")
                
                action_name = "—Ö–≤—ñ—Ä—Ç–∫—É" if call_data['action_type'] == 'hvirtka' else "–≤–æ—Ä–æ—Ç–∞"
                chat_id = call_data['chat_id']
                
                # –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–∑–≤—ñ–Ω–∫–∞
                message = ""
                status = ""
                
                if disposition == 'cancel' and duration == 0:
                    # ‚úÖ –£–°–ü–Ü–•: –î–∑–≤—ñ–Ω–æ–∫ —Å–∫–∏–Ω—É—Ç–æ –ø—ñ—Å–ª—è –≥—É–¥–∫—ñ–≤ (—Å–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ —ñ —Å–∫–∏–Ω—É–ª–∞)
                    message = f"‚úÖ {action_name.capitalize()} –≤—ñ–¥—á–∏–Ω–µ–Ω–æ!"
                    status = 'success'
                    logger.info(f"‚úÖ SUCCESS: {action_name} –≤—ñ–¥–∫—Ä–∏—Ç–æ —É—Å–ø—ñ—à–Ω–æ")
                    
                elif disposition == 'busy':
                    # ‚ùå –ó–ê–ô–ù–Ø–¢–û  
                    message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –∑–∞–π–Ω—è—Ç–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É."
                    status = 'busy'
                    logger.warning(f"‚ùå BUSY: {action_name} –∑–∞–π–Ω—è—Ç–æ")
                    
                elif disposition in ['no-answer', 'noanswer'] and duration == 0:
                    # ‚ùå –ù–ï –í–Ü–î–ü–û–í–Ü–î–ê–Ñ
                    message = f"‚ùå –ù–æ–º–µ—Ä {action_name} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ú–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑–≤'—è–∑–∫—É.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'no_answer'
                    logger.warning(f"‚ùå NO_ANSWER: {action_name} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
                    
                elif disposition == 'answered' and duration > 0:
                    # ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –î–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è
                    message = f"‚ö†Ô∏è –î–∑–≤—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è {action_name} –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–æ.\n–ú–æ–∂–ª–∏–≤–æ, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'answered'
                    logger.error(f"‚ö†Ô∏è ANSWERED: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞ {action_name} –ø—Ä–∏–π–Ω—è—Ç–æ")
                    
                    # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É
                    try:
                        from config import ADMIN_USER_ID
                        admin_message = f"üö® –ü–†–û–ë–õ–ï–ú–ê: –î–∑–≤—ñ–Ω–æ–∫ –Ω–∞ {action_name} ({call_data['target_number']}) –±—É–ª–æ –ü–†–ò–ô–ù–Ø–¢–û –∑–∞–º—ñ—Å—Ç—å —Å–∫–∏–¥–∞–Ω–Ω—è! –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}s. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏."
                        send_telegram_message(ADMIN_USER_ID, admin_message)
                    except Exception as admin_error:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {admin_error}")
                    
                else:
                    # ‚ùå –Ü–ù–®–ê –ü–û–ú–ò–õ–ö–ê
                    message = f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {action_name}.\n–°—Ç–∞—Ç—É—Å: {disposition}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration}s\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º <a href=\"tel:+380733103110\">+380733103110</a>"
                    status = 'failed'
                    logger.warning(f"‚ùå FAILED: {action_name} - {disposition}")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                success = send_telegram_message(chat_id, message)
                
                if success:
                    logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ —á–∞—Ç {chat_id}: {status}")
                else:
                    logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ —á–∞—Ç {chat_id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
                call_tracker.update_call_status(call_data['call_id'], status, pbx_call_id)
                
                result = {
                    "success": True, 
                    "status": status, 
                    "message": f"Notification sent to chat {chat_id}",
                    "call_id": call_data['call_id'],
                    "action": action_name
                }
                
            else:
                logger.info(f"‚ÑπÔ∏è –î–∑–≤—ñ–Ω–æ–∫ {pbx_call_id} ({caller_id}) –Ω–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è –Ω–∞—à–æ—é —Å–∏—Å—Ç–µ–º–æ—é")
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                logger.info("üîç –î–û–î–ê–¢–ö–û–í–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê:")
                logger.info(f"   –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π caller_id: {normalize_phone_number(caller_id)}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                try:
                    recent_calls = call_tracker.get_recent_calls(300)
                    logger.info(f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–∞ 5 —Ö–≤: {len(recent_calls)}")
                    for call in recent_calls:
                        call_age = time.time() - call.get('timestamp', 0)
                        logger.info(f"     - {call['call_id']}: {call['target_number']} ({call_age:.1f}—Å —Ç–æ–º—É)")
                except Exception as diag_error:
                    logger.error(f"   –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_error}")
                
                result = {"success": True, "message": "Call not tracked by our system"}
                
        elif event == 'NOTIFY_START':
            # –î–ª—è –ø–æ—á–∞—Ç–∫—É –¥–∑–≤—ñ–Ω–∫–∞ –ª–æ–≥—É—î–º–æ
            logger.info(f"üìû START: PBX ID {pbx_call_id}, Caller: {caller_id}")
            result = {"success": True, "message": "Start event logged"}
            
        elif event == 'NOTIFY_INTERNAL':
            # –õ–æ–≥—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏
            internal = webhook_data.get('internal', '')
            logger.info(f"üìû INTERNAL: Caller {caller_id} -> Internal {internal}")
            result = {"success": True, "message": "Internal call logged"}
            
        else:
            logger.info(f"‚ÑπÔ∏è –ü–æ–¥—ñ—è {event} –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –æ–±—Ä–æ–±–∫–∏")
            result = {"success": True, "message": f"Event {event} ignored"}
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è PHP
        print(json.dumps(result, ensure_ascii=False))
        sys.exit(0)
        
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ process_webhook: {e}")
        error_result = {"success": False, "message": str(e)}
        print(json.dumps(error_result, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()