#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
test_improved_sync.py - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó

–¶–µ–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç—É—î –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç—ñ–≤,
–ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ —Ä—ñ–∑–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω—å —Ç–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤.
"""

import sys
import os
import logging
import sqlite3
import tempfile
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def create_test_db():
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—É –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
    temp_db.close()
    
    conn = sqlite3.connect(temp_db.name)
    cursor = conn.cursor()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
    cursor.execute('''
        CREATE TABLE clients (
            id TEXT PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            phone TEXT UNIQUE
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE users (
            telegram_id INTEGER PRIMARY KEY,
            phone TEXT,
            username TEXT,
            first_name TEXT
        )
    ''')
    
    conn.commit()
    conn.close()
    
    logger.info(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞ –ë–î: {temp_db.name}")
    return temp_db.name

def normalize_phone(phone):
    """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    return ''.join(filter(str.isdigit, phone))

def add_or_update_client_improved(db_path, client_id, first_name, last_name, phone):
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –æ–Ω–æ–≤–ª–µ–Ω—å"""
    logger.info(f"üë§ –î–æ–¥–∞–≤–∞–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {client_id} ({first_name} {last_name}), —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        phone_norm = normalize_phone(phone)
        
        # –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º ID
        cursor.execute('SELECT phone FROM clients WHERE id = ?', (client_id,))
        existing_by_id = cursor.fetchone()
        
        # –ö–†–û–ö 2: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        cursor.execute('SELECT id, first_name, last_name FROM clients WHERE phone = ?', (phone_norm,))
        existing_by_phone = cursor.fetchone()
        
        if existing_by_id and existing_by_phone:
            # –í–∏–ø–∞–¥–æ–∫: —î –∑–∞–ø–∏—Å–∏ –∑ —Ç–∏–º –∂–µ ID —ñ –∑ —Ç–∏–º –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
            if existing_by_id[0] == phone_norm:
                # –¶–µ —Ç–æ–π –∂–µ –∫–ª—ñ—î–Ω—Ç - –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ
                cursor.execute('''
                    UPDATE clients SET first_name=?, last_name=?, phone=? WHERE id=?
                ''', (first_name, last_name, phone_norm, client_id))
                logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}")
            else:
                # –ö–ª—ñ—î–Ω—Ç –∑–º—ñ–Ω–∏–≤ –Ω–æ–º–µ—Ä - –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
                cursor.execute('DELETE FROM clients WHERE phone = ? AND id != ?', (phone_norm, client_id))
                cursor.execute('''
                    UPDATE clients SET first_name=?, last_name=?, phone=? WHERE id=?
                ''', (first_name, last_name, phone_norm, client_id))
                logger.info(f"üîÑ –ö–ª—ñ—î–Ω—Ç {client_id} –∑–º—ñ–Ω–∏–≤ –Ω–æ–º–µ—Ä: {existing_by_id[0]} ‚Üí {phone_norm}")
                
        elif existing_by_id:
            # –Ü—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º ID, –∞–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ–Ω—à–∏–π
            old_phone = existing_by_id[0]
            cursor.execute('''
                UPDATE clients SET first_name=?, last_name=?, phone=? WHERE id=?
            ''', (first_name, last_name, phone_norm, client_id))
            logger.info(f"üìû –ö–ª—ñ—î–Ω—Ç {client_id} –æ–Ω–æ–≤–∏–≤ —Ç–µ–ª–µ—Ñ–æ–Ω: {old_phone} ‚Üí {phone_norm}")
            
        elif existing_by_phone:
            # –Ü—Å–Ω—É—î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, –∞–ª–µ ID —ñ–Ω—à–∏–π
            old_id = existing_by_phone[0]
            cursor.execute('DELETE FROM clients WHERE phone = ?', (phone_norm,))
            cursor.execute('''
                INSERT INTO clients (id, first_name, last_name, phone)
                VALUES (?, ?, ?, ?)
            ''', (client_id, first_name, last_name, phone_norm))
            logger.info(f"üÜî –¢–µ–ª–µ—Ñ–æ–Ω {phone_norm} –ø–µ—Ä–µ–π—à–æ–≤ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ {old_id} –¥–æ {client_id}")
            
        else:
            # –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç
            cursor.execute('''
                INSERT INTO clients (id, first_name, last_name, phone)
                VALUES (?, ?, ?, ?)
            ''', (client_id, first_name, last_name, phone_norm))
            logger.info(f"üÜï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}")
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –ö–ª—ñ—î–Ω—Ç {client_id} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")
        return False

def add_or_update_client_old(db_path, client_id, first_name, last_name, phone):
    """–°—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
    logger.info(f"üë§ [–°–¢–ê–†–ê –õ–û–ì–Ü–ö–ê] –î–æ–¥–∞–≤–∞–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {client_id}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        phone_norm = normalize_phone(phone)
        
        cursor.execute('''
            INSERT INTO clients(id, first_name, last_name, phone)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(id) DO UPDATE SET
            first_name=excluded.first_name,
            last_name=excluded.last_name,
            phone=excluded.phone
        ''', (client_id, first_name, last_name, phone_norm))
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ [–°–¢–ê–†–ê –õ–û–ì–Ü–ö–ê] –ö–ª—ñ—î–Ω—Ç {client_id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π")
        return True
        
    except Exception as e:
        logger.exception(f"‚ùå [–°–¢–ê–†–ê –õ–û–ì–Ü–ö–ê] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ {client_id}: {e}")
        return False

def get_clients_info(db_path):
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ"""
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, first_name, last_name, phone FROM clients ORDER BY id')
        clients = cursor.fetchall()
        
        conn.close()
        return clients
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: {e}")
        return []

def test_scenario(name, db_path, test_func):
    """–ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π"""
    logger.info(f"üß™ –¢–ï–°–¢–û–í–ò–ô –°–¶–ï–ù–ê–†–Ü–ô: {name}")
    logger.info("=" * 50)
    
    # –û—á–∏—Å—Ç–∏—Ç–∏ –±–∞–∑—É
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM clients')
    conn.commit()
    conn.close()
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç
    test_func(db_path)
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    clients = get_clients_info(db_path)
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É '{name}':")
    for client in clients:
        logger.info(f"   ID: {client[0]}, –Ü–º'—è: {client[1]} {client[2]}, –¢–µ–ª–µ—Ñ–æ–Ω: {client[3]}")
    
    logger.info(f"üìä –ó–∞–≥–∞–ª–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(clients)}")
    logger.info("")
    
    return clients

def test_new_clients(db_path):
    """–¢–µ—Å—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    add_or_update_client_improved(db_path, "1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0991234567")
    add_or_update_client_improved(db_path, "1002", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞", "0672345678")
    add_or_update_client_improved(db_path, "1003", "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", "–°–∏–¥–æ—Ä–æ–≤", "0503456789")

def test_duplicate_phones(db_path):
    """–¢–µ—Å—Ç –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤"""
    add_or_update_client_improved(db_path, "1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0991234567")
    add_or_update_client_improved(db_path, "1002", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞", "0991234567")  # –¢–æ–π –∂–µ –Ω–æ–º–µ—Ä!

def test_client_changed_phone(db_path):
    """–¢–µ—Å—Ç –∑–º—ñ–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞"""
    add_or_update_client_improved(db_path, "1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0991234567")
    add_or_update_client_improved(db_path, "1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0672345678")  # –ù–æ–≤–∏–π –Ω–æ–º–µ—Ä

def test_phone_transfer(db_path):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–æ–º–µ—Ä—É –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —ñ–Ω—à–æ–º—É"""
    add_or_update_client_improved(db_path, "1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0991234567")
    add_or_update_client_improved(db_path, "1002", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞", "0672345678")
    
    # –¢–µ–ø–µ—Ä –Ω–æ–º–µ—Ä –Ü–≤–∞–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –ú–∞—Ä—ñ—ó
    add_or_update_client_improved(db_path, "1002", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞", "0991234567")

def test_complex_scenario(db_path):
    """–°–∫–ª–∞–¥–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –∑ –±–∞–≥–∞—Ç—å–º–∞ –∑–º—ñ–Ω–∞–º–∏"""
    # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
    add_or_update_client_improved(db_path, "1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0991234567")
    add_or_update_client_improved(db_path, "1002", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞", "0672345678")
    add_or_update_client_improved(db_path, "1003", "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", "–°–∏–¥–æ—Ä–æ–≤", "0503456789")
    
    # –Ü–≤–∞–Ω –∑–º—ñ–Ω—é—î –Ω–æ–º–µ—Ä
    add_or_update_client_improved(db_path, "1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0631111111")
    
    # –ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ä–∏–π –Ω–æ–º–µ—Ä –Ü–≤–∞–Ω–∞
    add_or_update_client_improved(db_path, "1004", "–ü–µ—Ç—Ä–æ", "–ö–æ–≤–∞–ª—å", "0991234567")
    
    # –ú–∞—Ä—ñ—è –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ
    add_or_update_client_improved(db_path, "1002", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞-–ü–µ—Ç—Ä–æ–≤–∞", "0672345678")

def compare_old_vs_new_logic(db_path_old, db_path_new):
    """–ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Å—Ç–∞—Ä—É —Ç–∞ –Ω–æ–≤—É –ª–æ–≥—ñ–∫—É"""
    logger.info("üÜö –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –°–¢–ê–†–û–á –¢–ê –ù–û–í–û–á –õ–û–ì–Ü–ö–ò")
    logger.info("=" * 50)
    
    test_data = [
        ("1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0991234567"),
        ("1002", "–ú–∞—Ä—ñ—è", "–Ü–≤–∞–Ω–æ–≤–∞", "0672345678"),
        ("1001", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤", "0631111111"),  # –ó–º—ñ–Ω–∞ –Ω–æ–º–µ—Ä—É
        ("1003", "–ù–æ–≤–∏–π", "–ö–ª—ñ—î–Ω—Ç", "0991234567"),  # –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä
    ]
    
    # –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞
    for client_data in test_data:
        add_or_update_client_old(db_path_old, *client_data)
    
    # –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞
    for client_data in test_data:
        add_or_update_client_improved(db_path_new, *client_data)
    
    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    old_clients = get_clients_info(db_path_old)
    new_clients = get_clients_info(db_path_new)
    
    logger.info(f"üìä –°–¢–ê–†–ê –õ–û–ì–Ü–ö–ê - {len(old_clients)} –∫–ª—ñ—î–Ω—Ç—ñ–≤:")
    for client in old_clients:
        logger.info(f"   ID: {client[0]}, –Ü–º'—è: {client[1]} {client[2]}, –¢–µ–ª–µ—Ñ–æ–Ω: {client[3]}")
    
    logger.info(f"üìä –ù–û–í–ê –õ–û–ì–Ü–ö–ê - {len(new_clients)} –∫–ª—ñ—î–Ω—Ç—ñ–≤:")
    for client in new_clients:
        logger.info(f"   ID: {client[0]}, –Ü–º'—è: {client[1]} {client[2]}, –¢–µ–ª–µ—Ñ–æ–Ω: {client[3]}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
    old_phones = [client[3] for client in old_clients]
    new_phones = [client[3] for client in new_clients]
    
    old_duplicates = len(old_phones) - len(set(old_phones))
    new_duplicates = len(new_phones) - len(set(new_phones))
    
    logger.info(f"üìä –î—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤:")
    logger.info(f"   –°—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞: {old_duplicates}")
    logger.info(f"   –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞: {new_duplicates}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–û–ö–†–ê–©–ï–ù–û–á –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–á")
    logger.info(f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 60)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –ë–î
    test_db = create_test_db()
    old_db = create_test_db()
    new_db = create_test_db()
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –¥–ª—è –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
        test_scenario("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤", test_db, test_new_clients)
        test_scenario("–î—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", test_db, test_duplicate_phones)
        test_scenario("–ó–º—ñ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞", test_db, test_client_changed_phone)
        test_scenario("–ü–µ—Ä–µ–¥–∞—á–∞ –Ω–æ–º–µ—Ä—É –º—ñ–∂ –∫–ª—ñ—î–Ω—Ç–∞–º–∏", test_db, test_phone_transfer)
        test_scenario("–°–∫–ª–∞–¥–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π", test_db, test_complex_scenario)
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó —Ç–∞ –Ω–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏
        compare_old_vs_new_logic(old_db, new_db)
        
        logger.info("‚úÖ –í–°–Ü –¢–ï–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û")
        
    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
    finally:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏
        for db_file in [test_db, old_db, new_db]:
            try:
                os.unlink(db_file)
                logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—É –ë–î: {db_file}")
            except:
                pass

if __name__ == "__main__":
    main()
