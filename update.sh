#!/bin/bash

echo "üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø ZADARMA BOT –ù–ê –°–ï–†–í–ï–†–Ü (–ó –ü–ï–†–ï–í–Ü–†–ö–û–Æ –í–ò–ü–†–ê–í–õ–ï–ù–¨)"
echo "============================================================="

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

PROJECT_DIR="/home/gomoncli/zadarma"
BACKUP_DIR="/home/gomoncli/backup/zadarma_update_$(date +%Y%m%d_%H%M%S)"

echo -e "${BLUE}üìÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É: $PROJECT_DIR${NC}"
echo -e "${PURPLE}üéØ –í–∫–ª—é—á–µ–Ω–æ: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å webhook —Å–∏—Å—Ç–µ–º–∏${NC}"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –ø—Ä–æ—î–∫—Ç
if [ ! -d "$PROJECT_DIR" ]; then
    echo -e "${RED}‚ùå –ü–û–ú–ò–õ–ö–ê: –ü—Ä–æ—î–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ $PROJECT_DIR${NC}"
    exit 1
fi

cd "$PROJECT_DIR" || exit 1

# 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup –≤–∞–∂–ª–∏–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
echo -e "${YELLOW}1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup –≤–∞–∂–ª–∏–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...${NC}"
mkdir -p "$BACKUP_DIR"

# –ë–µ–∫–∞–ø–∏–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –ü–ï–†–ï–î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
CRITICAL_FILES=("config.py" "users.db" ".env" "simple_webhook.py" "process_webhook.py")
for file in "${CRITICAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        cp "$file" "$BACKUP_DIR/"
        echo -e "   üíæ $file"
    fi
done

# –ë–µ–∫–∞–ø–∏–º–æ PHP webhook
if [ -f "/home/gomoncli/public_html/zadarma_webhook.php" ]; then
    cp "/home/gomoncli/public_html/zadarma_webhook.php" "$BACKUP_DIR/"
    echo -e "   üíæ zadarma_webhook.php"
fi

# –ë–µ–∫–∞–ø–∏–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
if [ -f "call_tracking.db" ]; then
    cp "call_tracking.db" "$BACKUP_DIR/"
    echo -e "   üíæ call_tracking.db"
fi

# –ë–µ–∫–∞–ø–∏–º–æ –ª–æ–≥–∏
cp *.log "$BACKUP_DIR/" 2>/dev/null && echo -e "   üíæ *.log"

echo -e "${GREEN}‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: $BACKUP_DIR${NC}"

# 2. –ó—É–ø–∏–Ω–µ–Ω–Ω—è –±–æ—Ç–∞
echo -e "${YELLOW}2Ô∏è‚É£ –ó—É–ø–∏–Ω–µ–Ω–Ω—è –±–æ—Ç–∞...${NC}"
BOT_PIDS=$(pgrep -f "python3.*bot.py")
if [ -n "$BOT_PIDS" ]; then
    echo -e "   üõë –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞ (PID: $BOT_PIDS)"
    pkill -f "python3.*bot.py"
    sleep 3
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑—É–ø–∏–Ω–∏–≤—Å—è
    if pgrep -f "python3.*bot.py" > /dev/null; then
        echo -e "${RED}   ‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑—É–ø–∏–Ω–∏–≤—Å—è, –ø—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...${NC}"
        pkill -9 -f "python3.*bot.py"
        sleep 2
    fi
    echo -e "${GREEN}   ‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ${NC}"
else
    echo -e "   ‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π"
fi

# 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å—É
echo -e "${YELLOW}3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å—É...${NC}"

if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå –ü–û–ú–ò–õ–ö–ê: –¶–µ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π${NC}"
    echo -e "${YELLOW}–ü–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Git –∞–±–æ clone –ø—Ä–æ—î–∫—Ç –∑–∞–Ω–æ–≤–æ${NC}"
    exit 1
fi

# –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
echo -e "${BLUE}   üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è:${NC}"
git status --short

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏
CHANGED_FILES=$(git status --porcelain | wc -l)
if [ "$CHANGED_FILES" -gt 0 ]; then
    echo -e "${YELLOW}   ‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ $CHANGED_FILES –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤${NC}"
    echo -e "${BLUE}   üìã –ó–±–µ—Ä–µ–∂–µ–º–æ —É stash...${NC}"
    git stash push -m "Auto stash before update $(date)"
fi

# 4. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É –∑ GitHub
echo -e "${YELLOW}4Ô∏è‚É£ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ GitHub...${NC}"

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–∏
git fetch origin main

# –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ
COMMITS_BEHIND=$(git rev-list --count HEAD..origin/main 2>/dev/null || echo "0")
if [ "$COMMITS_BEHIND" -gt 0 ]; then
    echo -e "${BLUE}   üì• –î–æ—Å—Ç—É–ø–Ω–æ $COMMITS_BEHIND –Ω–æ–≤–∏—Ö –∫–æ–º–º—ñ—Ç—ñ–≤:${NC}"
    git log --oneline HEAD..origin/main | head -5
else
    echo -e "${GREEN}   ‚úÖ –ö–æ–¥ –≤–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π${NC}"
fi

# –ö–†–ò–¢–ò–ß–ù–û: –¢–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥–∏
echo -e "${BLUE}   üíæ –¢–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏...${NC}"
TEMP_DIR="/tmp/zadarma_configs_$(date +%s)"
mkdir -p "$TEMP_DIR"

for file in config.py users.db call_tracking.db .env; do
    if [ -f "$file" ]; then
        cp "$file" "$TEMP_DIR/"
        echo -e "   üìÅ $file ‚Üí $TEMP_DIR/"
    fi
done

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
echo -e "${BLUE}   üîÑ –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...${NC}"
git reset --hard origin/main

# –ö–†–ò–¢–ò–ß–ù–û: –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥–∏
echo -e "${BLUE}   üîÑ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏...${NC}"
for file in config.py users.db call_tracking.db .env; do
    if [ -f "$TEMP_DIR/$file" ]; then
        cp "$TEMP_DIR/$file" "$file"
        echo -e "   ‚úÖ $file –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ"
    fi
done

# –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∫–∞—Ç–∞–ª–æ–≥
rm -rf "$TEMP_DIR"

echo -e "${GREEN}‚úÖ –ö–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π${NC}"

# 5. –ù–û–í–ï: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
echo -e "${PURPLE}5Ô∏è‚É£ üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ö–†–ò–¢–ò–ß–ù–ò–• –í–ò–ü–†–ê–í–õ–ï–ù–¨...${NC}"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª–∏ –º—ñ—Å—Ç—è—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—É –ª–æ–≥—ñ–∫—É
check_fix() {
    local file="$1"
    local pattern="$2"
    local description="$3"
    
    if [ ! -f "$file" ]; then
        echo -e "${RED}   ‚ùå $file –≤—ñ–¥—Å—É—Ç–Ω—ñ–π${NC}"
        return 1
    fi
    
    if grep -q "$pattern" "$file"; then
        echo -e "${GREEN}   ‚úÖ $description${NC}"
        return 0
    else
        echo -e "${RED}   ‚ùå $description - –ù–ï –ó–ù–ê–ô–î–ï–ù–û${NC}"
        return 1
    fi
}

FIX_ERRORS=0

echo -e "${BLUE}   üß™ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤ Python —Ñ–∞–π–ª–∞—Ö:${NC}"

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ simple_webhook.py
if check_fix "simple_webhook.py" "duration > 0" "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ —É—Å–ø—ñ—Ö—É (duration > 0)"; then
    :
else
    FIX_ERRORS=$((FIX_ERRORS + 1))
fi

if check_fix "simple_webhook.py" "\.format(" "Python 3.6 —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å (.format –∑–∞–º—ñ—Å—Ç—å f-strings)"; then
    :
else
    FIX_ERRORS=$((FIX_ERRORS + 1))
fi

if check_fix "simple_webhook.py" "ENHANCED.*WEBHOOK.*PROCESSOR" "–û–Ω–æ–≤–ª–µ–Ω–∏–π enhanced processor"; then
    :
else
    FIX_ERRORS=$((FIX_ERRORS + 1))
fi

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ process_webhook.py
if check_fix "process_webhook.py" "duration > 0" "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤ process_webhook.py"; then
    :
else
    FIX_ERRORS=$((FIX_ERRORS + 1))
fi

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PHP webhook
PHP_WEBHOOK="/home/gomoncli/public_html/zadarma_webhook.php"
if [ -f "$PHP_WEBHOOK" ]; then
    echo -e "${BLUE}   üß™ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PHP webhook:${NC}"
    
    if check_fix "$PHP_WEBHOOK" "isBotCallback" "–§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è IVR/Bot"; then
        :
    else
        FIX_ERRORS=$((FIX_ERRORS + 1))
    fi
    
    if check_fix "$PHP_WEBHOOK" "simple_webhook.py" "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è simple_webhook.py"; then
        :
    else
        FIX_ERRORS=$((FIX_ERRORS + 1))
    fi
else
    echo -e "${RED}   ‚ùå PHP webhook —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π${NC}"
    FIX_ERRORS=$((FIX_ERRORS + 1))
fi

if [ $FIX_ERRORS -eq 0 ]; then
    echo -e "${GREEN}   üéâ –í–°–Ü –ö–†–ò–¢–ò–ß–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–†–ò–°–£–¢–ù–Ü!${NC}"
else
    echo -e "${RED}   ‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û $FIX_ERRORS –í–Ü–î–°–£–¢–ù–Ü–• –í–ò–ü–†–ê–í–õ–ï–ù–¨!${NC}"
    echo -e "${YELLOW}   üìã –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ñ–∞–π–ª–∏ –≤—Ä—É—á–Ω—É${NC}"
fi

# 6. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
echo -e "${YELLOW}6Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤...${NC}"
chmod +x *.sh *.py
chmod -R 755 webhooks/ 2>/dev/null || true

# –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è webhook —Ñ–∞–π–ª—ñ–≤
chmod +x simple_webhook.py process_webhook.py
if [ -f "$PHP_WEBHOOK" ]; then
    chmod 755 "$PHP_WEBHOOK"
fi

echo -e "${GREEN}‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ${NC}"

# 7. –ù–û–í–ï: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
echo -e "${PURPLE}7Ô∏è‚É£ üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–ò–ü–†–ê–í–õ–ï–ù–¨...${NC}"

# –¢–µ—Å—Ç 1: Python –ª–æ–≥—ñ–∫–∞
echo -e "${BLUE}   üìã –¢–µ—Å—Ç 1: Python –ª–æ–≥—ñ–∫–∞ —É—Å–ø—ñ—Ö—É${NC}"
TEST_RESULT=$(python3 simple_webhook.py '{"event":"NOTIFY_END","caller_id":"0733103110","called_did":"0637442017","disposition":"cancel","duration":"5"}' 2>&1)

if echo "$TEST_RESULT" | grep -q "‚úÖ.*–≤—ñ–¥—á–∏–Ω–µ–Ω–æ"; then
    echo -e "${GREEN}   ‚úÖ SUCCESS –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ${NC}"
else
    echo -e "${RED}   ‚ùå SUCCESS –ª–æ–≥—ñ–∫–∞ –ù–ï –ü–†–ê–¶–Æ–Ñ${NC}"
    echo -e "${YELLOW}   –†–µ–∑—É–ª—å—Ç–∞—Ç: $TEST_RESULT${NC}"
    FIX_ERRORS=$((FIX_ERRORS + 1))
fi

# –¢–µ—Å—Ç 2: –õ–æ–≥—ñ–∫–∞ –ø–æ–º–∏–ª–æ–∫
echo -e "${BLUE}   üìã –¢–µ—Å—Ç 2: –õ–æ–≥—ñ–∫–∞ –ø–æ–º–∏–ª–æ–∫${NC}"
ERROR_TEST=$(python3 simple_webhook.py '{"event":"NOTIFY_END","caller_id":"0733103110","called_did":"0930063585","disposition":"busy","duration":"0"}' 2>&1)

if echo "$ERROR_TEST" | grep -q "‚ùå.*–∑–∞–π–Ω—è—Ç–∏–π"; then
    echo -e "${GREEN}   ‚úÖ ERROR –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ${NC}"
else
    echo -e "${RED}   ‚ùå ERROR –ª–æ–≥—ñ–∫–∞ –ù–ï –ü–†–ê–¶–Æ–Ñ${NC}"
    echo -e "${YELLOW}   –†–µ–∑—É–ª—å—Ç–∞—Ç: $ERROR_TEST${NC}"
fi

# –¢–µ—Å—Ç 3: PHP Webhook
echo -e "${BLUE}   üìã –¢–µ—Å—Ç 3: PHP Webhook —Ä–æ—É—Ç–∏–Ω–≥${NC}"
PHP_TEST=$(curl -s -X POST https://gomonclinic.com/zadarma_webhook.php -d "event=NOTIFY_END&caller_id=0733103110&called_did=0637442017&disposition=cancel&duration=5" 2>/dev/null)

if echo "$PHP_TEST" | grep -q "bot_processed"; then
    echo -e "${GREEN}   ‚úÖ PHP —Ä–æ—É—Ç–∏–Ω–≥ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ${NC}"
else
    echo -e "${YELLOW}   ‚ö†Ô∏è PHP —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤ –∞–±–æ webhook –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π${NC}"
    echo -e "${BLUE}   –í—ñ–¥–ø–æ–≤—ñ–¥—å: ${PHP_TEST:0:100}...${NC}"
fi

# 8. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
echo -e "${YELLOW}8Ô∏è‚É£ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...${NC}"
if [ -f "requirements.txt" ]; then
    pip3 install -r requirements.txt --user --upgrade
    echo -e "${GREEN}‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ${NC}"
else
    echo -e "${YELLOW}   ‚ö†Ô∏è requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ${NC}"
fi

# 9. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
echo -e "${YELLOW}9Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...${NC}"

if [ ! -f "config.py" ]; then
    echo -e "${RED}‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ–π config.py${NC}"
    if [ -f "config.py.example" ]; then
        echo -e "${YELLOW}–°—Ç–≤–æ—Ä—é—î–º–æ config.py –∑ —à–∞–±–ª–æ–Ω—É...${NC}"
        cp config.py.example config.py
        echo -e "${RED}‚ö†Ô∏è  –£–í–ê–ì–ê: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ config.py –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ API –∫–ª—é—á–∞–º–∏!${NC}"
        echo -e "${BLUE}nano config.py${NC}"
    fi
    exit 1
fi

# –¢–µ—Å—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
if python3 -c "from config import validate_config; validate_config()" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞${NC}"
else
    echo -e "${RED}‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è${NC}"
    echo -e "${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª config.py —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏${NC}"
    exit 1
fi

# 10. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
echo -e "${YELLOW}üîü –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –±–æ—Ç–∞...${NC}"

if [ -f "run_script.sh" ]; then
    nohup ./run_script.sh > /dev/null 2>&1 &
    BOT_PID=$!
    echo -e "   üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (PID: $BOT_PID)"
    
    # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
    sleep 5
    if kill -0 $BOT_PID 2>/dev/null; then
        echo -e "${GREEN}‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∞—Ü—é—î${NC}"
    else
        echo -e "${RED}‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏:${NC}"
        tail -10 bot.log 2>/dev/null || echo "–õ–æ–≥ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
        exit 1
    fi
else
    echo -e "${YELLOW}   ‚ö†Ô∏è run_script.sh –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–ø—Ä—è–º—É:${NC}"
    nohup python3 bot.py > /dev/null 2>&1 &
    echo -e "   üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ"
fi

# 11. –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup'—ñ–≤
echo -e "${YELLOW}1Ô∏è‚É£1Ô∏è‚É£ –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö backup'—ñ–≤...${NC}"
BACKUP_BASE_DIR="$(dirname "$BACKUP_DIR")"
if [ -d "$BACKUP_BASE_DIR" ]; then
    ls -1t "$BACKUP_BASE_DIR"/zadarma_update_* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
    REMAINING_BACKUPS=$(ls -1 "$BACKUP_BASE_DIR"/zadarma_update_* 2>/dev/null | wc -l)
    echo -e "   üóëÔ∏è –ó–∞–ª–∏—à–µ–Ω–æ $REMAINING_BACKUPS –æ—Å—Ç–∞–Ω–Ω—ñ—Ö backup'—ñ–≤"
fi

# –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢
echo ""
echo -e "${GREEN}üéâ –û–ù–û–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!${NC}"
echo ""

if [ $FIX_ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –ö–†–ò–¢–ò–ß–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ê–ö–¢–ò–í–ù–Ü!${NC}"
    echo -e "${GREEN}   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ —É—Å–ø—ñ—Ö—É (duration > 0)${NC}"
    echo -e "${GREEN}   - Python 3.6 —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å${NC}"  
    echo -e "${GREEN}   - –†–æ—É—Ç–∏–Ω–≥ IVR/Bot —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π${NC}"
    echo -e "${GREEN}   - Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û $FIX_ERRORS –ü–†–û–ë–õ–ï–ú –ó –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø–ú–ò${NC}"
    echo -e "${YELLOW}   –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª–∏ —Ç–∞ –ª–æ–≥–∏${NC}"
fi

echo ""
echo -e "${BLUE}üìã –ü–Ü–î–°–£–ú–û–ö:${NC}"
echo -e "   üìÅ –ü—Ä–æ—î–∫—Ç:        $PROJECT_DIR"
echo -e "   üíæ Backup:        $BACKUP_DIR"
echo -e "   ü§ñ Bot PID:       $(pgrep -f "python3.*bot.py" || echo "–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")"
echo -e "   üìä –ö–æ–º–º—ñ—Ç—ñ–≤:      $COMMITS_BEHIND –Ω–æ–≤–∏—Ö"
echo -e "   üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:   $([ $FIX_ERRORS -eq 0 ] && echo "‚úÖ –í–°–ï –û–ö" || echo "‚ö†Ô∏è $FIX_ERRORS –ø—Ä–æ–±–ª–µ–º")"
echo ""
echo -e "${BLUE}üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ò:${NC}"
echo -e "   –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:      ps aux | grep bot.py"
echo -e "   –õ–æ–≥–∏ –±–æ—Ç–∞:        tail -f bot.log"
echo -e "   –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–∏:     –ù–∞–¥—ñ—à–ª—ñ—Ç—å /hvirtka –∞–±–æ /vorota –±–æ—Ç—É"
echo -e "   PHP –ª–æ–≥–∏:         tail -f /home/gomoncli/public_html/error_log"
echo ""

if [ $FIX_ERRORS -eq 0 ]; then
    echo -e "${GREEN}üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê! –¢–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ /hvirtka —Ç–∞ /vorota${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –ü–û–¢–†–Ü–ë–ù–ê –£–í–ê–ì–ê: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É${NC}"
fi
