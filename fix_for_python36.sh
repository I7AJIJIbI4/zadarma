#!/bin/bash
# fix_for_python36.sh - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è Python 3.6 –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ

echo "üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –î–õ–Ø PYTHON 3.6"
echo "============================="

cd /home/gomoncli/zadarma || exit 1

echo "üìã –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: $(pwd)"
echo "üêç Python –≤–µ—Ä—Å—ñ—è: $(python3 --version)"

# 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö users.db
echo "1Ô∏è‚É£ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö users.db..."
python3 << 'EOF'
import sqlite3
import os

DB_PATH = 'users.db'
try:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é clients
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id TEXT PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            phone TEXT UNIQUE
        )
    ''')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é users
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            phone TEXT,
            username TEXT,
            first_name TEXT
        )
    ''')
    
    conn.commit()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cursor.execute('SELECT COUNT(*) FROM clients')
    clients_count = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM users')
    users_count = cursor.fetchone()[0]
    
    print('‚úÖ –ë–î users.db —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞: {} –∫–ª—ñ—î–Ω—Ç—ñ–≤, {} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'.format(clients_count, users_count))
    
    conn.close()
    
except Exception as e:
    print('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó users.db: {}'.format(e))
EOF

# 2. –°—Ç–≤–æ—Ä—é—î–º–æ Python 3.6 —Å—É–º—ñ—Å–Ω—É –≤–µ—Ä—Å—ñ—é sync_management
echo "2Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Python 3.6 —Å—É–º—ñ—Å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó sync_management..."
cat > sync_management_py36.py << 'EOF'
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
sync_management_py36.py - Python 3.6 —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
"""

import logging
import sys
import os
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ config.py —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º)
DB_PATH = "/home/gomoncli/zadarma/users.db"

try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config
    import config
    ADMIN_USER_IDS = getattr(config, 'ADMIN_USER_IDS', [573368771])
except ImportError:
    # Fallback –µ—Å–ª–∏ config –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    ADMIN_USER_IDS = [573368771, 7930079513]
    logger.warning("Config –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤")

def handle_sync_status_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ /sync_status - —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        )
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM clients')
        total_clients = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        # –î—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        cursor.execute('''
            SELECT phone, COUNT(*) as count 
            FROM clients 
            GROUP BY phone 
            HAVING count > 1
        ''')
        duplicates = cursor.fetchall()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
        cursor.execute('SELECT id, first_name, last_name, phone FROM clients ORDER BY rowid DESC LIMIT 5')
        recent_clients = cursor.fetchall()
        
        conn.close()
        
        status_text = "üìä –°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò\n\n"
        status_text += "üè• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
        status_text += "  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}\n".format(total_users)
        status_text += "  üè• –ö–ª–∏–µ–Ω—Ç–æ–≤: {}\n".format(total_clients)
        status_text += "  üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {}\n".format(len(duplicates))
        
        status_text += "\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã:"
        for client in recent_clients:
            status_text += "\n  ‚Ä¢ ID:{} {} {} ({})".format(client[0], client[1], client[2], client[3])
        
        if duplicates:
            status_text += "\n\nüö® –î—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:"
            for phone, count in duplicates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status_text += "\n  ‚Ä¢ {}: {} –∑–∞–ø–∏—Å–µ–π".format(phone, count)
        
        bot.send_message(
            chat_id=update.message.chat_id,
            text=status_text
        )
        
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ sync_status: {}".format(e))
        bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        )

def handle_sync_test_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ /sync_test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        )
        return
    
    try:
        bot.send_message(
            chat_id=update.message.chat_id,
            text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ API..."
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM clients')
            clients_count = cursor.fetchone()[0]
            cursor.execute('SELECT COUNT(*) FROM users')
            users_count = cursor.fetchone()[0]
            conn.close()
            db_ok = True
        except Exception as e:
            db_ok = False
            clients_count = 0
            users_count = 0
        
        test_result = "üß™ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n\n"
        test_result += "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {}\n".format('‚úÖ OK' if db_ok else '‚ùå –û—à–∏–±–∫–∞')
        test_result += "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:\n"
        test_result += "  üè• –ö–ª–∏–µ–Ω—Ç–æ–≤: {}\n".format(clients_count)
        test_result += "  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}\n".format(users_count)

        bot.send_message(
            chat_id=update.message.chat_id,
            text=test_result
        )
        
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ sync_test: {}".format(e))
        bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API"
        )

def handle_sync_help_command(bot, update):
    """–ö–æ–º–∞–Ω–¥–∞ /sync_help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        bot.send_message(
            chat_id=update.message.chat_id,
            text="‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        )
        return
    
    help_text = """üîÑ –ö–û–ú–ê–ù–î–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò

üìä /sync_status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
üß™ /sync_test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
‚ùì /sync_help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ Python 3.6
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏

üìû –ü–û–î–î–ï–†–ñ–ö–ê: +380733103110"""

    bot.send_message(
        chat_id=update.message.chat_id,
        text=help_text
    )
EOF

# 3. –°–æ–∑–¥–∞–µ–º Python 3.6 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π process_webhook
echo "3Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ process_webhook –¥–ª—è Python 3.6..."
cat > process_webhook.py << 'EOF'
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
process_webhook.py - Python 3.6 compatible webhook processor
"""

import sys
import json
import logging
import sqlite3
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = '/home/gomoncli/zadarma/webhook_processor.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DB_PATH = '/home/gomoncli/zadarma/call_tracking.db'

def is_call_successful(webhook_data):
    """
    –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞ –¥–ª—è Python 3.6
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration = int(webhook_data.get('duration', 0))
        if duration > 0:
            logger.info("‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω—ã–π: duration = {}".format(duration))
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        disposition = webhook_data.get('disposition', '').upper()
        if disposition == 'ANSWERED':
            logger.info("‚úÖ –ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω—ã–π: disposition = ANSWERED")
            return True
        
        # –ó–≤–æ–Ω–æ–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π
        logger.info("‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π: duration={}, disposition={}".format(duration, disposition))
        return False
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞: {}".format(e))
        return False

def process_webhook_data(webhook_json):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not webhook_json:
            logger.error("‚ùå –ü—É—Å—Ç—ã–µ webhook –¥–∞–Ω–Ω—ã–µ")
            return False
            
        webhook_data = json.loads(webhook_json) if isinstance(webhook_json, str) else webhook_json
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        event = webhook_data.get('event', 'UNKNOWN')
        caller = webhook_data.get('caller_id', 'N/A')
        called = webhook_data.get('called_did', webhook_data.get('internal', 'N/A'))
        
        logger.info("üìû Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞: event={}, caller={}, called={}".format(event, caller, called))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        success = is_call_successful(webhook_data)
        
        if event == 'NOTIFY_START':
            logger.info("üü¢ –ó–≤–æ–Ω–æ–∫ –Ω–∞—á–∞–ª—Å—è: {} -> {}".format(caller, called))
        elif event == 'NOTIFY_END':
            duration = webhook_data.get('duration', 0)
            status = "—É—Å–ø–µ—à–Ω—ã–π" if success else "–Ω–µ—É—Å–ø–µ—à–Ω—ã–π"
            logger.info("üî¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {} —Å–µ–∫, {}".format(duration, status))
        
        return success
        
    except json.JSONDecodeError as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {}".format(e))
        return False
    except Exception as e:
        logger.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {}".format(e))
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    if len(sys.argv) < 2:
        logger.error("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 process_webhook.py '<json_data>'")
        sys.exit(1)
    
    webhook_json = sys.argv[1]
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ process_webhook.py")
    
    success = process_webhook_data(webhook_json)
    
    if success:
        logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print("SUCCESS")
        return 0
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")
        print("ERROR")
        return 1

if __name__ == "__main__":
    exit(main())
EOF

chmod +x process_webhook.py sync_management_py36.py

# 4. –°–æ–∑–¥–∞–µ–º Python 3.6 —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–µ—Ä—Å–∏—é user_db —Ñ—É–Ω–∫—Ü–∏–π
echo "4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π user_db..."
python3 << 'EOF'
import sqlite3
import sys
import os

DB_PATH = 'users.db'

def cleanup_duplicate_phones():
    """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ - Python 3.6"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–æ–≤")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        cursor.execute('''
            SELECT phone, COUNT(*) as count 
            FROM clients 
            GROUP BY phone 
            HAVING count > 1
        ''')
        
        duplicates = cursor.fetchall()
        cleaned_count = 0
        
        for phone, count in duplicates:
            print("üìû –ù–∞–π–¥–µ–Ω–æ {} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {}".format(count, phone))
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º rowid (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π)
            cursor.execute('''
                DELETE FROM clients 
                WHERE phone = ? AND rowid NOT IN (
                    SELECT MIN(rowid) FROM clients WHERE phone = ?
                )
            ''', (phone, phone))
            
            cleaned_count += cursor.rowcount
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –£–¥–∞–ª–µ–Ω–æ {} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤".format(cleaned_count))
        return cleaned_count
        
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {}".format(e))
        return 0

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
result = cleanup_duplicate_phones()
print("–†–µ–∑—É–ª—å—Ç–∞—Ç: {}".format(result))
EOF

# 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
echo "5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π..."

echo "üß™ –¢–µ—Å—Ç process_webhook —É—Å–ø–µ—Ö:"
python3 process_webhook.py '{"event":"NOTIFY_END","duration":"15","disposition":"answered","caller_id":"test"}'

echo "üß™ –¢–µ—Å—Ç process_webhook –æ—à–∏–±–∫–∞:"
python3 process_webhook.py '{"event":"NOTIFY_END","duration":"0","disposition":"no_answer","caller_id":"test"}'

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
echo "6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞..."
if pgrep -f "python3.*bot.py" > /dev/null; then
    bot_pid=$(pgrep -f "python3.*bot.py")
    echo "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $bot_pid)"
else
    echo "‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    echo "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞..."
    python3 bot.py &
    sleep 3
    if pgrep -f "python3.*bot.py" > /dev/null; then
        echo "‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    fi
fi

echo ""
echo "üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø PYTHON 3.6 –ó–ê–í–ï–†–®–ï–ù–´!"
echo "======================================="
echo ""
echo "üìã –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:"
echo "1. ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ë–î users.db"
echo "2. ‚úÖ –°–æ–∑–¥–∞–Ω–∞ Python 3.6 —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è sync_management"
echo "3. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω process_webhook –¥–ª—è Python 3.6"
echo "4. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã f-strings –Ω–∞ .format()"
echo "5. ‚úÖ –£–±—Ä–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º config"
echo ""
echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:"
echo "–í Telegram –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É:"
echo "‚Ä¢ /sync_status - —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
echo "‚Ä¢ /sync_test - —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
echo "‚Ä¢ /hvirtka - —Ç–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–∏—Ç–∫–∏"
echo ""
echo "üìã –õ–û–ì–ò:"
echo "‚Ä¢ tail -f bot.log"
echo "‚Ä¢ tail -f webhook_processor.log"
