#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
add_tracker_methods.py - –î–æ–¥–∞—î –Ω–µ–¥–æ—Å—Ç–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –≤ CallTracker
"""

import sys
import os

def add_methods_to_call_tracker():
    """–î–æ–¥–∞—î –Ω–µ–¥–æ—Å—Ç–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –¥–æ –∫–ª–∞—Å—É CallTracker"""
    
    file_path = '/home/gomoncli/zadarma/zadarma_api_webhook.py'
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    # –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–µ—Ç–æ–¥–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å
    if 'def get_recent_calls(' in content and 'def get_call_by_target_and_time(' in content:
        print("‚úÖ –ú–µ—Ç–æ–¥–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å")
        return True
    
    # –ö–æ–¥ –º–µ—Ç–æ–¥—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    methods_code = '''
    def get_recent_calls(self, time_window_seconds=300):
        """
        –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –¥–∑–≤—ñ–Ω–∫–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥
        
        Args:
            time_window_seconds: –í—ñ–∫–Ω–æ —á–∞—Å—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5 —Ö–≤–∏–ª–∏–Ω)
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –¥–∑–≤—ñ–Ω–∫—ñ–≤
        """
        try:
            import time
            current_time = time.time()
            cutoff_time = current_time - time_window_seconds
            
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT call_id, chat_id, target_number, action_type, timestamp, status, pbx_call_id
                FROM call_tracking 
                WHERE timestamp > ?
                ORDER BY timestamp DESC
            """, (cutoff_time,))
            
            calls = []
            for row in cursor.fetchall():
                calls.append({
                    'call_id': row[0],
                    'chat_id': row[1], 
                    'target_number': row[2],
                    'action_type': row[3],
                    'timestamp': row[4],
                    'status': row[5],
                    'pbx_call_id': row[6]
                })
            
            return calls
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ—â–æ–¥–∞–≤–Ω—ñ—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤: {e}")
            return []

    def get_call_by_target_and_time(self, target_number, time_window_seconds=120):
        """
        –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –¥–∑–≤—ñ–Ω–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–∞ —á–∞—Å—É
        
        Args:
            target_number: –¶—ñ–ª—å–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            time_window_seconds: –í—ñ–∫–Ω–æ —á–∞—Å—É –¥–ª—è –ø–æ—à—É–∫—É
        
        Returns:
            dict –∞–±–æ None: –î–∞–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∞
        """
        try:
            import time
            current_time = time.time()
            cutoff_time = current_time - time_window_seconds
            
            cursor = self.conn.cursor()
            
            # –®—É–∫–∞—î–º–æ –ø–æ —Ç–æ—á–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ
            cursor.execute("""
                SELECT call_id, chat_id, target_number, action_type, timestamp, status, pbx_call_id
                FROM call_tracking 
                WHERE target_number = ? AND timestamp > ? AND status IN ('pending', 'api_success')
                ORDER BY timestamp DESC
                LIMIT 1
            """, (target_number, cutoff_time))
            
            row = cursor.fetchone()
            if row:
                return {
                    'call_id': row[0],
                    'chat_id': row[1],
                    'target_number': row[2], 
                    'action_type': row[3],
                    'timestamp': row[4],
                    'status': row[5],
                    'pbx_call_id': row[6]
                }
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ, —à—É–∫–∞—î–º–æ –ø–æ —á–∞—Å—Ç–∫–æ–≤—ñ–π
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ—à—É–∫—É
            normalized_target = target_number.lstrip('0').lstrip('38')
            
            cursor.execute("""
                SELECT call_id, chat_id, target_number, action_type, timestamp, status, pbx_call_id
                FROM call_tracking 
                WHERE (target_number LIKE ? OR target_number LIKE ?) 
                AND timestamp > ? AND status IN ('pending', 'api_success')
                ORDER BY timestamp DESC
                LIMIT 1
            """, (f'%{normalized_target}', f'%{target_number}%', cutoff_time))
            
            row = cursor.fetchone()
            if row:
                return {
                    'call_id': row[0],
                    'chat_id': row[1],
                    'target_number': row[2],
                    'action_type': row[3], 
                    'timestamp': row[4],
                    'status': row[5],
                    'pbx_call_id': row[6]
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –¥–∑–≤—ñ–Ω–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É {target_number}: {e}")
            return None
'''
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–≤ –∫—ñ–Ω—Ü—ñ –∫–ª–∞—Å—É CallTracker)
    lines = content.split('\n')
    insert_index = -1
    
    # –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–µ—Ç–æ–¥ –∫–ª–∞—Å—É CallTracker
    in_call_tracker_class = False
    for i, line in enumerate(lines):
        if 'class CallTracker:' in line:
            in_call_tracker_class = True
        elif in_call_tracker_class and line.startswith('class ') and 'CallTracker' not in line:
            # –ó–Ω–∞–π—à–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–ª–∞—Å
            insert_index = i
            break
        elif in_call_tracker_class and line.strip() and not line.startswith(' ') and not line.startswith('\t'):
            # –ó–Ω–∞–π—à–ª–∏ –∫—ñ–Ω–µ—Ü—å –∫–ª–∞—Å—É
            insert_index = i
            break
    
    if insert_index == -1:
        # –î–æ–¥–∞—î–º–æ –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É
        insert_index = len(lines)
    
    # –í—Å—Ç–∞–≤–ª—è—î–º–æ –º–µ—Ç–æ–¥–∏
    method_lines = methods_code.split('\n')
    for i, method_line in enumerate(method_lines):
        lines.insert(insert_index + i, method_line)
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –Ω–∞–∑–∞–¥
    new_content = '\n'.join(lines)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
    backup_path = f"{file_path}.backup.tracker_methods"
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –Ω–æ–≤–∏–π –≤–º—ñ—Å—Ç
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("‚úÖ –ú–µ—Ç–æ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ CallTracker")
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è: {backup_path}")
    return True

if __name__ == "__main__":
    print("üîß –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –¥–æ CallTracker...")
    
    if add_methods_to_call_tracker():
        print("‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ —á–∏ –ø—Ä–∞—Ü—é—î —ñ–º–ø–æ—Ä—Ç
        try:
            sys.path.append('/home/gomoncli/zadarma')
            from zadarma_api_webhook import call_tracker
            
            if hasattr(call_tracker, 'get_recent_calls'):
                print("‚úÖ –ú–µ—Ç–æ–¥ get_recent_calls –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            else:
                print("‚ùå –ú–µ—Ç–æ–¥ get_recent_calls –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                
            if hasattr(call_tracker, 'get_call_by_target_and_time'):
                print("‚úÖ –ú–µ—Ç–æ–¥ get_call_by_target_and_time –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            else:
                print("‚ùå –ú–µ—Ç–æ–¥ get_call_by_target_and_time –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
            
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è")